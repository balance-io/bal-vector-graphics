//
//  IntroScreen.swift
//  Balance
//
//  Created by Christian Baroni on 2/18/17.
//  Copyright Â© 2017 Balance. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import Cocoa

public struct IntroScreen {

    //// Drawing Methods

    public static func drawLightMonthlyButton(frame: NSRect = NSRect(x: 0, y: 0, width: 84, height: 40), original: Bool = true, pressed: Bool = false) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext

        //// Color Declarations
        let shadowColor = NSColor(deviceRed: 0.196, green: 0.196, blue: 0.365, alpha: 1)
        let monthlyPressedColor = NSColor(deviceRed: 0, green: 0, blue: 0, alpha: 0.12)
        let lightColor = NSColor(deviceRed: 0.024, green: 0.686, blue: 0.82, alpha: 1)

        //// Shadow Declarations
        let buttonShadow = NSShadow()
        buttonShadow.shadowColor = shadowColor.withAlphaComponent(0.03 * shadowColor.alphaComponent)
        buttonShadow.shadowOffset = NSSize(width: 0, height: -1)
        buttonShadow.shadowBlurRadius = 2
        let monthlyButtonLargeShadow = NSShadow()
        monthlyButtonLargeShadow.shadowColor = shadowColor.withAlphaComponent(0.09 * shadowColor.alphaComponent)
        monthlyButtonLargeShadow.shadowOffset = NSSize(width: 0, height: -1.5)
        monthlyButtonLargeShadow.shadowBlurRadius = 3

        //// shadowGroup
        NSGraphicsContext.saveGraphicsState()
        monthlyButtonLargeShadow.set()
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// button
        NSGraphicsContext.saveGraphicsState()
        buttonShadow.set()
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        //// Clip rectMask
        let rectMaskPath = NSBezierPath(roundedRect: NSRect(x: frame.minX + 13, y: frame.minY + frame.height - 35, width: 58, height: 34), xRadius: 5, yRadius: 5)
        rectMaskPath.addClip()


        //// rect Drawing
        let rectPath = NSBezierPath(rect: NSRect(x: frame.minX + 13, y: frame.minY + frame.height - 35, width: 58, height: 34))
        lightColor.setFill()
        rectPath.fill()


        if (pressed) {
            //// pressedRect Drawing
            let pressedRectPath = NSBezierPath(rect: NSRect(x: frame.minX + 13, y: frame.minY + frame.height - 35, width: 58, height: 34))
            monthlyPressedColor.setFill()
            pressedRectPath.fill()
        }


        //// Text Drawing
        let textRect = NSRect(x: frame.minX + 13, y: frame.minY + frame.height - 33, width: 58, height: 31)
        let textTextContent = "Free"
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .center
        let textFontAttributes = [NSFontAttributeName: NSFont.semiboldSystemFont(ofSize: NSFont.systemFontSize()), NSForegroundColorAttributeName: NSColor.white, NSParagraphStyleAttributeName: textStyle]

        let textTextHeight: CGFloat = textTextContent.boundingRect(with: NSSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes).height
        let textTextRect: NSRect = NSRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight)
        NSGraphicsContext.saveGraphicsState()
        NSRectClip(textRect)
        textTextContent.draw(in: textTextRect.offsetBy(dx: 0, dy: 1), withAttributes: textFontAttributes)
        NSGraphicsContext.restoreGraphicsState()


        context.endTransparencyLayer()
        NSGraphicsContext.restoreGraphicsState()


        context.endTransparencyLayer()
        NSGraphicsContext.restoreGraphicsState()
    }

    public static func drawBasicAnnualButton(frame: NSRect = NSRect(x: 0, y: 0, width: 90, height: 46), original: Bool = true, pressed: Bool = false) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext

        //// Color Declarations
        let basicColor = NSColor(deviceRed: 0, green: 0.463, blue: 1, alpha: 1)
        let shadowColor = NSColor(deviceRed: 0.196, green: 0.196, blue: 0.365, alpha: 1)
        let buttonStrokeColor = NSColor(deviceRed: 0, green: 0, blue: 0, alpha: 0.03)
        let annualPressedColor = NSColor(deviceRed: 0.78, green: 0.788, blue: 0.882, alpha: 0.12)

        //// Shadow Declarations
        let buttonShadow = NSShadow()
        buttonShadow.shadowColor = shadowColor.withAlphaComponent(0.03 * shadowColor.alphaComponent)
        buttonShadow.shadowOffset = NSSize(width: 0, height: -1)
        buttonShadow.shadowBlurRadius = 2
        let annualButtonLargeShadow = NSShadow()
        annualButtonLargeShadow.shadowColor = shadowColor.withAlphaComponent(0.09 * shadowColor.alphaComponent)
        annualButtonLargeShadow.shadowOffset = NSSize(width: 0, height: -3)
        annualButtonLargeShadow.shadowBlurRadius = 6

        //// buttonStroke Drawing
        let buttonStrokePath = NSBezierPath(roundedRect: NSRect(x: frame.minX + 5.5, y: frame.minY + 8.5, width: frame.width - 11, height: frame.height - 11), xRadius: 5.5, yRadius: 5.5)
        NSGraphicsContext.saveGraphicsState()
        buttonShadow.set()
        buttonStrokeColor.setFill()
        buttonStrokePath.fill()
        NSGraphicsContext.restoreGraphicsState()



        //// shadowGroup
        NSGraphicsContext.saveGraphicsState()
        annualButtonLargeShadow.set()
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// button
        NSGraphicsContext.saveGraphicsState()
        buttonShadow.set()
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        //// Clip rectMask
        let rectMaskPath = NSBezierPath(roundedRect: NSRect(x: frame.minX + 6, y: frame.minY + frame.height - 37, width: 78, height: 34), xRadius: 5, yRadius: 5)
        rectMaskPath.addClip()


        //// rect Drawing
        let rectPath = NSBezierPath(rect: NSRect(x: frame.minX + 6, y: frame.minY + frame.height - 37, width: 78, height: 34))
        NSColor.white.setFill()
        rectPath.fill()


        if (pressed) {
            //// pressedRect Drawing
            let pressedRectPath = NSBezierPath(rect: NSRect(x: frame.minX + 6, y: frame.minY + frame.height - 37, width: 78, height: 34))
            annualPressedColor.setFill()
            pressedRectPath.fill()
        }


        //// Text Drawing
        let textRect = NSRect(x: frame.minX + 6, y: frame.minY + frame.height - 35, width: 78, height: 31)
        let textTextContent = "49.99/yr"
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .center
        let textFontAttributes = [NSFontAttributeName: NSFont.semiboldSystemFont(ofSize: NSFont.systemFontSize()), NSForegroundColorAttributeName: basicColor, NSParagraphStyleAttributeName: textStyle]

        let textTextHeight: CGFloat = textTextContent.boundingRect(with: NSSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes).height
        let textTextRect: NSRect = NSRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight)
        NSGraphicsContext.saveGraphicsState()
        NSRectClip(textRect)
        textTextContent.draw(in: textTextRect.offsetBy(dx: 0, dy: 1), withAttributes: textFontAttributes)
        NSGraphicsContext.restoreGraphicsState()


        context.endTransparencyLayer()
        NSGraphicsContext.restoreGraphicsState()


        context.endTransparencyLayer()
        NSGraphicsContext.restoreGraphicsState()
    }

    public static func drawBasicMonthlyButton(frame: NSRect = NSRect(x: 0, y: 0, width: 84, height: 40), original: Bool = true, pressed: Bool = false) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext

        //// Color Declarations
        let basicColor = NSColor(deviceRed: 0, green: 0.463, blue: 1, alpha: 1)
        let shadowColor = NSColor(deviceRed: 0.196, green: 0.196, blue: 0.365, alpha: 1)
        let monthlyPressedColor = NSColor(deviceRed: 0, green: 0, blue: 0, alpha: 0.12)

        //// Shadow Declarations
        let buttonShadow = NSShadow()
        buttonShadow.shadowColor = shadowColor.withAlphaComponent(0.03 * shadowColor.alphaComponent)
        buttonShadow.shadowOffset = NSSize(width: 0, height: -1)
        buttonShadow.shadowBlurRadius = 2
        let monthlyButtonLargeShadow = NSShadow()
        monthlyButtonLargeShadow.shadowColor = shadowColor.withAlphaComponent(0.09 * shadowColor.alphaComponent)
        monthlyButtonLargeShadow.shadowOffset = NSSize(width: 0, height: -1.5)
        monthlyButtonLargeShadow.shadowBlurRadius = 3

        //// shadowGroup
        NSGraphicsContext.saveGraphicsState()
        monthlyButtonLargeShadow.set()
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// button
        NSGraphicsContext.saveGraphicsState()
        buttonShadow.set()
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        //// Clip rectMask
        let rectMaskPath = NSBezierPath(roundedRect: NSRect(x: frame.minX + 3, y: frame.minY + frame.height - 35, width: 78, height: 34), xRadius: 5, yRadius: 5)
        rectMaskPath.addClip()


        //// rect Drawing
        let rectPath = NSBezierPath(rect: NSRect(x: frame.minX + 3, y: frame.minY + frame.height - 35, width: 78, height: 34))
        basicColor.setFill()
        rectPath.fill()


        if (pressed) {
            //// pressedRect Drawing
            let pressedRectPath = NSBezierPath(rect: NSRect(x: frame.minX + 3, y: frame.minY + frame.height - 35, width: 78, height: 34))
            monthlyPressedColor.setFill()
            pressedRectPath.fill()
        }


        //// Text Drawing
        let textRect = NSRect(x: frame.minX + 3, y: frame.minY + frame.height - 33, width: 78, height: 31)
        let textTextContent = "4.99/mo"
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .center
        let textFontAttributes = [NSFontAttributeName: NSFont.semiboldSystemFont(ofSize: NSFont.systemFontSize()), NSForegroundColorAttributeName: NSColor.white, NSParagraphStyleAttributeName: textStyle]

        let textTextHeight: CGFloat = textTextContent.boundingRect(with: NSSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes).height
        let textTextRect: NSRect = NSRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight)
        NSGraphicsContext.saveGraphicsState()
        NSRectClip(textRect)
        textTextContent.draw(in: textTextRect.offsetBy(dx: 0, dy: 1), withAttributes: textFontAttributes)
        NSGraphicsContext.restoreGraphicsState()


        context.endTransparencyLayer()
        NSGraphicsContext.restoreGraphicsState()


        context.endTransparencyLayer()
        NSGraphicsContext.restoreGraphicsState()
    }

    public static func drawMediumMonthlyButton(frame: NSRect = NSRect(x: 0, y: 0, width: 84, height: 40), original: Bool = true, pressed: Bool = false) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext

        //// Color Declarations
        let shadowColor = NSColor(deviceRed: 0.196, green: 0.196, blue: 0.365, alpha: 1)
        let monthlyPressedColor = NSColor(deviceRed: 0, green: 0, blue: 0, alpha: 0.12)
        let mediumColor = NSColor(deviceRed: 0.302, green: 0.263, blue: 0.604, alpha: 1)

        //// Shadow Declarations
        let buttonShadow = NSShadow()
        buttonShadow.shadowColor = shadowColor.withAlphaComponent(0.03 * shadowColor.alphaComponent)
        buttonShadow.shadowOffset = NSSize(width: 0, height: -1)
        buttonShadow.shadowBlurRadius = 2
        let monthlyButtonLargeShadow = NSShadow()
        monthlyButtonLargeShadow.shadowColor = shadowColor.withAlphaComponent(0.09 * shadowColor.alphaComponent)
        monthlyButtonLargeShadow.shadowOffset = NSSize(width: 0, height: -1.5)
        monthlyButtonLargeShadow.shadowBlurRadius = 3

        //// shadowGroup
        NSGraphicsContext.saveGraphicsState()
        monthlyButtonLargeShadow.set()
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// button
        NSGraphicsContext.saveGraphicsState()
        buttonShadow.set()
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        //// Clip rectMask
        let rectMaskPath = NSBezierPath(roundedRect: NSRect(x: frame.minX + 3, y: frame.minY + frame.height - 35, width: 78, height: 34), xRadius: 5, yRadius: 5)
        rectMaskPath.addClip()


        //// rect Drawing
        let rectPath = NSBezierPath(rect: NSRect(x: frame.minX + 3, y: frame.minY + frame.height - 35, width: 78, height: 34))
        mediumColor.setFill()
        rectPath.fill()


        if (pressed) {
            //// pressedRect Drawing
            let pressedRectPath = NSBezierPath(rect: NSRect(x: frame.minX + 3, y: frame.minY + frame.height - 35, width: 78, height: 34))
            monthlyPressedColor.setFill()
            pressedRectPath.fill()
        }


        //// Text Drawing
        let textRect = NSRect(x: frame.minX + 3, y: frame.minY + frame.height - 33, width: 78, height: 31)
        let textTextContent = "9.99/mo"
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .center
        let textFontAttributes = [NSFontAttributeName: NSFont.semiboldSystemFont(ofSize: NSFont.systemFontSize()), NSForegroundColorAttributeName: NSColor.white, NSParagraphStyleAttributeName: textStyle]

        let textTextHeight: CGFloat = textTextContent.boundingRect(with: NSSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes).height
        let textTextRect: NSRect = NSRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight)
        NSGraphicsContext.saveGraphicsState()
        NSRectClip(textRect)
        textTextContent.draw(in: textTextRect.offsetBy(dx: 0, dy: 1), withAttributes: textFontAttributes)
        NSGraphicsContext.restoreGraphicsState()


        context.endTransparencyLayer()
        NSGraphicsContext.restoreGraphicsState()


        context.endTransparencyLayer()
        NSGraphicsContext.restoreGraphicsState()
    }

    public static func drawMediumAnnualButton(frame: NSRect = NSRect(x: 0, y: 0, width: 90, height: 46), original: Bool = true, pressed: Bool = false) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext

        //// Color Declarations
        let shadowColor = NSColor(deviceRed: 0.196, green: 0.196, blue: 0.365, alpha: 1)
        let buttonStrokeColor = NSColor(deviceRed: 0, green: 0, blue: 0, alpha: 0.03)
        let annualPressedColor = NSColor(deviceRed: 0.78, green: 0.788, blue: 0.882, alpha: 0.12)
        let mediumColor = NSColor(deviceRed: 0.302, green: 0.263, blue: 0.604, alpha: 1)

        //// Shadow Declarations
        let buttonShadow = NSShadow()
        buttonShadow.shadowColor = shadowColor.withAlphaComponent(0.03 * shadowColor.alphaComponent)
        buttonShadow.shadowOffset = NSSize(width: 0, height: -1)
        buttonShadow.shadowBlurRadius = 2
        let annualButtonLargeShadow = NSShadow()
        annualButtonLargeShadow.shadowColor = shadowColor.withAlphaComponent(0.09 * shadowColor.alphaComponent)
        annualButtonLargeShadow.shadowOffset = NSSize(width: 0, height: -3)
        annualButtonLargeShadow.shadowBlurRadius = 6

        //// buttonStroke Drawing
        let buttonStrokePath = NSBezierPath(roundedRect: NSRect(x: frame.minX + 5.5, y: frame.minY + 8.5, width: frame.width - 11, height: frame.height - 11), xRadius: 5.5, yRadius: 5.5)
        NSGraphicsContext.saveGraphicsState()
        buttonShadow.set()
        buttonStrokeColor.setFill()
        buttonStrokePath.fill()
        NSGraphicsContext.restoreGraphicsState()



        //// shadowGroup
        NSGraphicsContext.saveGraphicsState()
        annualButtonLargeShadow.set()
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// button
        NSGraphicsContext.saveGraphicsState()
        buttonShadow.set()
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        //// Clip rectMask
        let rectMaskPath = NSBezierPath(roundedRect: NSRect(x: frame.minX + 6, y: frame.minY + frame.height - 37, width: 78, height: 34), xRadius: 5, yRadius: 5)
        rectMaskPath.addClip()


        //// rect Drawing
        let rectPath = NSBezierPath(rect: NSRect(x: frame.minX + 6, y: frame.minY + frame.height - 37, width: 78, height: 34))
        NSColor.white.setFill()
        rectPath.fill()


        if (pressed) {
            //// pressedRect Drawing
            let pressedRectPath = NSBezierPath(rect: NSRect(x: frame.minX + 6, y: frame.minY + frame.height - 37, width: 78, height: 34))
            annualPressedColor.setFill()
            pressedRectPath.fill()
        }


        //// Text Drawing
        let textRect = NSRect(x: frame.minX + 6, y: frame.minY + frame.height - 35, width: 78, height: 31)
        let textTextContent = "99.99/yr"
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .center
        let textFontAttributes = [NSFontAttributeName: NSFont.semiboldSystemFont(ofSize: NSFont.systemFontSize()), NSForegroundColorAttributeName: mediumColor, NSParagraphStyleAttributeName: textStyle]

        let textTextHeight: CGFloat = textTextContent.boundingRect(with: NSSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes).height
        let textTextRect: NSRect = NSRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight)
        NSGraphicsContext.saveGraphicsState()
        NSRectClip(textRect)
        textTextContent.draw(in: textTextRect.offsetBy(dx: 0, dy: 1), withAttributes: textFontAttributes)
        NSGraphicsContext.restoreGraphicsState()


        context.endTransparencyLayer()
        NSGraphicsContext.restoreGraphicsState()


        context.endTransparencyLayer()
        NSGraphicsContext.restoreGraphicsState()
    }

}
