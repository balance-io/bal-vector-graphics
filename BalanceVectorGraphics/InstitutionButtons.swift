//
//  InstitutionButtons.swift
//  Balance
//
//  Created by Christian Baroni on 2/5/17.
//  Copyright Â© 2017 Balance. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import Cocoa

public struct InstitutionButtons {

    //// Drawing Methods

    public static func drawBoaButton(bounds: NSRect = NSRect(x: 0, y: 0, width: 191, height: 56), original: Bool = true, hover: Bool = false, pressed: Bool = false) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext

        //// Color Declarations
        let highlightGradientColor = NSColor(deviceRed: 1, green: 1, blue: 1, alpha: 0.09)
        let highlightGradientColor2 = NSColor(deviceRed: 1, green: 1, blue: 1, alpha: 0)
        let shadow2Color = NSColor(deviceRed: 1, green: 1, blue: 1, alpha: 0.36)
        let bankOfAmericaBackground = NSColor(deviceRed: 0.875, green: 0.051, blue: 0.165, alpha: 1)
        let logoWhite = NSColor(deviceRed: 1, green: 1, blue: 1, alpha: 1)

        //// Gradient Declarations
        let highlightGradient = NSGradient(starting: highlightGradientColor, ending: highlightGradientColor2)!

        //// Shadow Declarations
        let outerShadow = NSShadow()
        outerShadow.shadowColor = NSColor.black
        outerShadow.shadowOffset = NSSize(width: 0, height: 0)
        outerShadow.shadowBlurRadius = 0.5
        let innerStroke = NSShadow()
        innerStroke.shadowColor = shadow2Color
        innerStroke.shadowOffset = NSSize(width: 0, height: 0)
        innerStroke.shadowBlurRadius = 0.5

        if (original) {
            //// bankOfAmerica
            NSGraphicsContext.saveGraphicsState()
            context.translateBy(x: bounds.minX + 95.5, y: bounds.maxY - 28)

            outerShadow.set()
            context.beginTransparencyLayer(auxiliaryInfo: nil)


            //// bankOfAmericaBase Drawing
            let bankOfAmericaBasePath = NSBezierPath(roundedRect: NSRect(x: -88.5, y: -21, width: 177, height: 42), xRadius: 5, yRadius: 5)
            bankOfAmericaBackground.setFill()
            bankOfAmericaBasePath.fill()


            //// bankOfAmericaHighlight Drawing
            let bankOfAmericaHighlightPath = NSBezierPath(roundedRect: NSRect(x: -88.5, y: -21, width: 177, height: 42), xRadius: 5, yRadius: 5)
            highlightGradient.draw(in: bankOfAmericaHighlightPath, angle: -45)

            ////// bankOfAmericaHighlight Inner Shadow
            NSGraphicsContext.saveGraphicsState()
            NSRectClip(bankOfAmericaHighlightPath.bounds)
            context.setShadow(offset: NSSize.zero, blur: 0, color: nil)

            context.setAlpha(innerStroke.shadowColor!.alphaComponent)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            let bankOfAmericaHighlightOpaqueShadow = NSShadow()
            bankOfAmericaHighlightOpaqueShadow.shadowColor = innerStroke.shadowColor!.withAlphaComponent(1)
            bankOfAmericaHighlightOpaqueShadow.shadowOffset = innerStroke.shadowOffset
            bankOfAmericaHighlightOpaqueShadow.shadowBlurRadius = innerStroke.shadowBlurRadius
            bankOfAmericaHighlightOpaqueShadow.set()

            context.setBlendMode(.sourceOut)
            context.beginTransparencyLayer(auxiliaryInfo: nil)

            bankOfAmericaHighlightOpaqueShadow.shadowColor!.setFill()
            bankOfAmericaHighlightPath.fill()

            context.endTransparencyLayer()
            context.endTransparencyLayer()
            NSGraphicsContext.restoreGraphicsState()



            context.endTransparencyLayer()

            NSGraphicsContext.restoreGraphicsState()
        }


        if (hover) {
            //// bankOfAmericaHover
            NSGraphicsContext.saveGraphicsState()
            context.translateBy(x: bounds.minX + 95.5, y: bounds.maxY - 28)
            context.scaleBy(x: 1.05, y: 1.05)

            outerShadow.set()
            context.beginTransparencyLayer(auxiliaryInfo: nil)


            //// bankOfAmericaBase 2 Drawing
            let bankOfAmericaBase2Path = NSBezierPath(roundedRect: NSRect(x: -88.5, y: -21, width: 177, height: 42), xRadius: 5, yRadius: 5)
            bankOfAmericaBackground.setFill()
            bankOfAmericaBase2Path.fill()


            //// bankOfAmericaHighlight 2 Drawing
            let bankOfAmericaHighlight2Path = NSBezierPath(roundedRect: NSRect(x: -88.1, y: -20.95, width: 177, height: 42), xRadius: 5, yRadius: 5)
            highlightGradient.draw(in: bankOfAmericaHighlight2Path, angle: -45)

            ////// bankOfAmericaHighlight 2 Inner Shadow
            NSGraphicsContext.saveGraphicsState()
            NSRectClip(bankOfAmericaHighlight2Path.bounds)
            context.setShadow(offset: NSSize.zero, blur: 0, color: nil)

            context.setAlpha(innerStroke.shadowColor!.alphaComponent)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            let bankOfAmericaHighlight2OpaqueShadow = NSShadow()
            bankOfAmericaHighlight2OpaqueShadow.shadowColor = innerStroke.shadowColor!.withAlphaComponent(1)
            bankOfAmericaHighlight2OpaqueShadow.shadowOffset = innerStroke.shadowOffset
            bankOfAmericaHighlight2OpaqueShadow.shadowBlurRadius = innerStroke.shadowBlurRadius
            bankOfAmericaHighlight2OpaqueShadow.set()

            context.setBlendMode(.sourceOut)
            context.beginTransparencyLayer(auxiliaryInfo: nil)

            bankOfAmericaHighlight2OpaqueShadow.shadowColor!.setFill()
            bankOfAmericaHighlight2Path.fill()

            context.endTransparencyLayer()
            context.endTransparencyLayer()
            NSGraphicsContext.restoreGraphicsState()



            context.endTransparencyLayer()

            NSGraphicsContext.restoreGraphicsState()
        }


        if (pressed) {
            //// bankOfAmericaPressed
            NSGraphicsContext.saveGraphicsState()
            context.translateBy(x: bounds.minX + 95.5, y: bounds.maxY - 28)

            outerShadow.set()
            context.beginTransparencyLayer(auxiliaryInfo: nil)


            //// bankOfAmericaBase 3 Drawing
            let bankOfAmericaBase3Path = NSBezierPath(roundedRect: NSRect(x: -88.5, y: -21, width: 177, height: 42), xRadius: 5, yRadius: 5)
            bankOfAmericaBackground.setFill()
            bankOfAmericaBase3Path.fill()


            //// bankOfAmericaHighlight 3 Drawing
            let bankOfAmericaHighlight3Path = NSBezierPath(roundedRect: NSRect(x: -88.5, y: -21, width: 177, height: 42), xRadius: 5, yRadius: 5)
            highlightGradient.draw(in: bankOfAmericaHighlight3Path, angle: -45)

            ////// bankOfAmericaHighlight 3 Inner Shadow
            NSGraphicsContext.saveGraphicsState()
            NSRectClip(bankOfAmericaHighlight3Path.bounds)
            context.setShadow(offset: NSSize.zero, blur: 0, color: nil)

            context.setAlpha(innerStroke.shadowColor!.alphaComponent)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            let bankOfAmericaHighlight3OpaqueShadow = NSShadow()
            bankOfAmericaHighlight3OpaqueShadow.shadowColor = innerStroke.shadowColor!.withAlphaComponent(1)
            bankOfAmericaHighlight3OpaqueShadow.shadowOffset = innerStroke.shadowOffset
            bankOfAmericaHighlight3OpaqueShadow.shadowBlurRadius = innerStroke.shadowBlurRadius
            bankOfAmericaHighlight3OpaqueShadow.set()

            context.setBlendMode(.sourceOut)
            context.beginTransparencyLayer(auxiliaryInfo: nil)

            bankOfAmericaHighlight3OpaqueShadow.shadowColor!.setFill()
            bankOfAmericaHighlight3Path.fill()

            context.endTransparencyLayer()
            context.endTransparencyLayer()
            NSGraphicsContext.restoreGraphicsState()



            context.endTransparencyLayer()

            NSGraphicsContext.restoreGraphicsState()
        }


        //// bankOfAmericaLogo Drawing
        let bankOfAmericaLogoPath = NSBezierPath()
        bankOfAmericaLogoPath.move(to: NSPoint(x: bounds.minX + 143.23, y: bounds.maxY - 23.46))
        bankOfAmericaLogoPath.curve(to: NSPoint(x: bounds.minX + 146.08, y: bounds.maxY - 24.66), controlPoint1: NSPoint(x: bounds.minX + 144.19, y: bounds.maxY - 23.83), controlPoint2: NSPoint(x: bounds.minX + 145.14, y: bounds.maxY - 24.23))
        bankOfAmericaLogoPath.curve(to: NSPoint(x: bounds.minX + 137.47, y: bounds.maxY - 28.88), controlPoint1: NSPoint(x: bounds.minX + 143.1, y: bounds.maxY - 25.85), controlPoint2: NSPoint(x: bounds.minX + 140.22, y: bounds.maxY - 27.27))
        bankOfAmericaLogoPath.curve(to: NSPoint(x: bounds.minX + 134.64, y: bounds.maxY - 27.52), controlPoint1: NSPoint(x: bounds.minX + 136.54, y: bounds.maxY - 28.4), controlPoint2: NSPoint(x: bounds.minX + 135.6, y: bounds.maxY - 27.95))
        bankOfAmericaLogoPath.curve(to: NSPoint(x: bounds.minX + 143.23, y: bounds.maxY - 23.46), controlPoint1: NSPoint(x: bounds.minX + 137.38, y: bounds.maxY - 25.95), controlPoint2: NSPoint(x: bounds.minX + 140.26, y: bounds.maxY - 24.59))
        bankOfAmericaLogoPath.close()
        bankOfAmericaLogoPath.move(to: NSPoint(x: bounds.minX + 139.68, y: bounds.maxY - 22.23))
        bankOfAmericaLogoPath.curve(to: NSPoint(x: bounds.minX + 130.79, y: bounds.maxY - 25.99), controlPoint1: NSPoint(x: bounds.minX + 136.59, y: bounds.maxY - 23.19), controlPoint2: NSPoint(x: bounds.minX + 133.61, y: bounds.maxY - 24.45))
        bankOfAmericaLogoPath.curve(to: NSPoint(x: bounds.minX + 133.46, y: bounds.maxY - 27.02), controlPoint1: NSPoint(x: bounds.minX + 131.69, y: bounds.maxY - 26.31), controlPoint2: NSPoint(x: bounds.minX + 132.58, y: bounds.maxY - 26.65))
        bankOfAmericaLogoPath.curve(to: NSPoint(x: bounds.minX + 142.09, y: bounds.maxY - 23.03), controlPoint1: NSPoint(x: bounds.minX + 136.19, y: bounds.maxY - 25.43), controlPoint2: NSPoint(x: bounds.minX + 139.09, y: bounds.maxY - 24.09))
        bankOfAmericaLogoPath.curve(to: NSPoint(x: bounds.minX + 139.68, y: bounds.maxY - 22.23), controlPoint1: NSPoint(x: bounds.minX + 141.3, y: bounds.maxY - 22.75), controlPoint2: NSPoint(x: bounds.minX + 140.49, y: bounds.maxY - 22.48))
        bankOfAmericaLogoPath.close()
        bankOfAmericaLogoPath.move(to: NSPoint(x: bounds.minX + 149.69, y: bounds.maxY - 23.34))
        bankOfAmericaLogoPath.curve(to: NSPoint(x: bounds.minX + 142.14, y: bounds.maxY - 20.43), controlPoint1: NSPoint(x: bounds.minX + 147.26, y: bounds.maxY - 22.18), controlPoint2: NSPoint(x: bounds.minX + 144.74, y: bounds.maxY - 21.21))
        bankOfAmericaLogoPath.curve(to: NSPoint(x: bounds.minX + 139.43, y: bounds.maxY - 21.28), controlPoint1: NSPoint(x: bounds.minX + 141.23, y: bounds.maxY - 20.69), controlPoint2: NSPoint(x: bounds.minX + 140.33, y: bounds.maxY - 20.97))
        bankOfAmericaLogoPath.curve(to: NSPoint(x: bounds.minX + 147.2, y: bounds.maxY - 24.23), controlPoint1: NSPoint(x: bounds.minX + 142.1, y: bounds.maxY - 22.06), controlPoint2: NSPoint(x: bounds.minX + 144.7, y: bounds.maxY - 23.04))
        bankOfAmericaLogoPath.curve(to: NSPoint(x: bounds.minX + 149.69, y: bounds.maxY - 23.34), controlPoint1: NSPoint(x: bounds.minX + 148.02, y: bounds.maxY - 23.91), controlPoint2: NSPoint(x: bounds.minX + 148.86, y: bounds.maxY - 23.62))
        bankOfAmericaLogoPath.close()
        bankOfAmericaLogoPath.move(to: NSPoint(x: bounds.minX + 153.66, y: bounds.maxY - 22.18))
        bankOfAmericaLogoPath.curve(to: NSPoint(x: bounds.minX + 145.97, y: bounds.maxY - 19.5), controlPoint1: NSPoint(x: bounds.minX + 151.17, y: bounds.maxY - 21.11), controlPoint2: NSPoint(x: bounds.minX + 148.6, y: bounds.maxY - 20.21))
        bankOfAmericaLogoPath.curve(to: NSPoint(x: bounds.minX + 143.48, y: bounds.maxY - 20.07), controlPoint1: NSPoint(x: bounds.minX + 145.13, y: bounds.maxY - 19.67), controlPoint2: NSPoint(x: bounds.minX + 144.3, y: bounds.maxY - 19.86))
        bankOfAmericaLogoPath.curve(to: NSPoint(x: bounds.minX + 151.07, y: bounds.maxY - 22.91), controlPoint1: NSPoint(x: bounds.minX + 146.09, y: bounds.maxY - 20.82), controlPoint2: NSPoint(x: bounds.minX + 148.63, y: bounds.maxY - 21.77))
        bankOfAmericaLogoPath.curve(to: NSPoint(x: bounds.minX + 153.66, y: bounds.maxY - 22.18), controlPoint1: NSPoint(x: bounds.minX + 151.93, y: bounds.maxY - 22.64), controlPoint2: NSPoint(x: bounds.minX + 152.79, y: bounds.maxY - 22.4))
        bankOfAmericaLogoPath.close()
        bankOfAmericaLogoPath.move(to: NSPoint(x: bounds.minX + 160.03, y: bounds.maxY - 24.28))
        bankOfAmericaLogoPath.curve(to: NSPoint(x: bounds.minX + 142.65, y: bounds.maxY - 33.01), controlPoint1: NSPoint(x: bounds.minX + 153.79, y: bounds.maxY - 26.36), controlPoint2: NSPoint(x: bounds.minX + 147.94, y: bounds.maxY - 29.31))
        bankOfAmericaLogoPath.curve(to: NSPoint(x: bounds.minX + 146.52, y: bounds.maxY - 35.55), controlPoint1: NSPoint(x: bounds.minX + 143.97, y: bounds.maxY - 33.81), controlPoint2: NSPoint(x: bounds.minX + 145.26, y: bounds.maxY - 34.66))
        bankOfAmericaLogoPath.curve(to: NSPoint(x: bounds.minX + 163, y: bounds.maxY - 25.94), controlPoint1: NSPoint(x: bounds.minX + 151.51, y: bounds.maxY - 31.65), controlPoint2: NSPoint(x: bounds.minX + 157.04, y: bounds.maxY - 28.41))
        bankOfAmericaLogoPath.curve(to: NSPoint(x: bounds.minX + 160.03, y: bounds.maxY - 24.28), controlPoint1: NSPoint(x: bounds.minX + 162.03, y: bounds.maxY - 25.36), controlPoint2: NSPoint(x: bounds.minX + 161.03, y: bounds.maxY - 24.81))
        bankOfAmericaLogoPath.close()
        bankOfAmericaLogoPath.move(to: NSPoint(x: bounds.minX + 155.74, y: bounds.maxY - 22.28))
        bankOfAmericaLogoPath.curve(to: NSPoint(x: bounds.minX + 137.65, y: bounds.maxY - 30.29), controlPoint1: NSPoint(x: bounds.minX + 149.25, y: bounds.maxY - 23.97), controlPoint2: NSPoint(x: bounds.minX + 143.15, y: bounds.maxY - 26.7))
        bankOfAmericaLogoPath.curve(to: NSPoint(x: bounds.minX + 141.3, y: bounds.maxY - 32.21), controlPoint1: NSPoint(x: bounds.minX + 138.89, y: bounds.maxY - 30.89), controlPoint2: NSPoint(x: bounds.minX + 140.1, y: bounds.maxY - 31.53))
        bankOfAmericaLogoPath.curve(to: NSPoint(x: bounds.minX + 159.05, y: bounds.maxY - 23.79), controlPoint1: NSPoint(x: bounds.minX + 146.69, y: bounds.maxY - 28.54), controlPoint2: NSPoint(x: bounds.minX + 152.67, y: bounds.maxY - 25.67))
        bankOfAmericaLogoPath.curve(to: NSPoint(x: bounds.minX + 155.74, y: bounds.maxY - 22.28), controlPoint1: NSPoint(x: bounds.minX + 157.96, y: bounds.maxY - 23.25), controlPoint2: NSPoint(x: bounds.minX + 156.86, y: bounds.maxY - 22.74))
        bankOfAmericaLogoPath.close()
        bankOfAmericaLogoPath.move(to: NSPoint(x: bounds.minX + 66.28, y: bounds.maxY - 25.01))
        bankOfAmericaLogoPath.curve(to: NSPoint(x: bounds.minX + 62.91, y: bounds.maxY - 28.85), controlPoint1: NSPoint(x: bounds.minX + 64.03, y: bounds.maxY - 25.01), controlPoint2: NSPoint(x: bounds.minX + 62.91, y: bounds.maxY - 26.65))
        bankOfAmericaLogoPath.curve(to: NSPoint(x: bounds.minX + 66.28, y: bounds.maxY - 32.75), controlPoint1: NSPoint(x: bounds.minX + 62.91, y: bounds.maxY - 31.15), controlPoint2: NSPoint(x: bounds.minX + 63.98, y: bounds.maxY - 32.75))
        bankOfAmericaLogoPath.curve(to: NSPoint(x: bounds.minX + 69.65, y: bounds.maxY - 28.85), controlPoint1: NSPoint(x: bounds.minX + 68.58, y: bounds.maxY - 32.75), controlPoint2: NSPoint(x: bounds.minX + 69.65, y: bounds.maxY - 31.15))
        bankOfAmericaLogoPath.curve(to: NSPoint(x: bounds.minX + 66.28, y: bounds.maxY - 25.01), controlPoint1: NSPoint(x: bounds.minX + 69.65, y: bounds.maxY - 26.65), controlPoint2: NSPoint(x: bounds.minX + 68.53, y: bounds.maxY - 25.01))
        bankOfAmericaLogoPath.close()
        bankOfAmericaLogoPath.move(to: NSPoint(x: bounds.minX + 66.28, y: bounds.maxY - 31.25))
        bankOfAmericaLogoPath.curve(to: NSPoint(x: bounds.minX + 65.42, y: bounds.maxY - 28.85), controlPoint1: NSPoint(x: bounds.minX + 65.68, y: bounds.maxY - 31.25), controlPoint2: NSPoint(x: bounds.minX + 65.42, y: bounds.maxY - 30.72))
        bankOfAmericaLogoPath.curve(to: NSPoint(x: bounds.minX + 66.28, y: bounds.maxY - 26.51), controlPoint1: NSPoint(x: bounds.minX + 65.42, y: bounds.maxY - 27.14), controlPoint2: NSPoint(x: bounds.minX + 65.59, y: bounds.maxY - 26.51))
        bankOfAmericaLogoPath.curve(to: NSPoint(x: bounds.minX + 67.15, y: bounds.maxY - 28.85), controlPoint1: NSPoint(x: bounds.minX + 66.97, y: bounds.maxY - 26.51), controlPoint2: NSPoint(x: bounds.minX + 67.15, y: bounds.maxY - 27.14))
        bankOfAmericaLogoPath.curve(to: NSPoint(x: bounds.minX + 66.28, y: bounds.maxY - 31.25), controlPoint1: NSPoint(x: bounds.minX + 67.15, y: bounds.maxY - 30.72), controlPoint2: NSPoint(x: bounds.minX + 66.88, y: bounds.maxY - 31.25))
        bankOfAmericaLogoPath.close()
        bankOfAmericaLogoPath.move(to: NSPoint(x: bounds.minX + 71.21, y: bounds.maxY - 24.38))
        bankOfAmericaLogoPath.line(to: NSPoint(x: bounds.minX + 71.21, y: bounds.maxY - 25.21))
        bankOfAmericaLogoPath.line(to: NSPoint(x: bounds.minX + 70.23, y: bounds.maxY - 25.21))
        bankOfAmericaLogoPath.line(to: NSPoint(x: bounds.minX + 70.23, y: bounds.maxY - 26.89))
        bankOfAmericaLogoPath.line(to: NSPoint(x: bounds.minX + 71.21, y: bounds.maxY - 26.89))
        bankOfAmericaLogoPath.line(to: NSPoint(x: bounds.minX + 71.21, y: bounds.maxY - 32.59))
        bankOfAmericaLogoPath.line(to: NSPoint(x: bounds.minX + 73.63, y: bounds.maxY - 32.59))
        bankOfAmericaLogoPath.line(to: NSPoint(x: bounds.minX + 73.63, y: bounds.maxY - 26.89))
        bankOfAmericaLogoPath.line(to: NSPoint(x: bounds.minX + 74.95, y: bounds.maxY - 26.89))
        bankOfAmericaLogoPath.line(to: NSPoint(x: bounds.minX + 74.95, y: bounds.maxY - 25.21))
        bankOfAmericaLogoPath.line(to: NSPoint(x: bounds.minX + 73.63, y: bounds.maxY - 25.21))
        bankOfAmericaLogoPath.line(to: NSPoint(x: bounds.minX + 73.63, y: bounds.maxY - 24.46))
        bankOfAmericaLogoPath.curve(to: NSPoint(x: bounds.minX + 74.5, y: bounds.maxY - 23.77), controlPoint1: NSPoint(x: bounds.minX + 73.63, y: bounds.maxY - 24.01), controlPoint2: NSPoint(x: bounds.minX + 73.86, y: bounds.maxY - 23.77))
        bankOfAmericaLogoPath.curve(to: NSPoint(x: bounds.minX + 74.94, y: bounds.maxY - 23.82), controlPoint1: NSPoint(x: bounds.minX + 74.63, y: bounds.maxY - 23.77), controlPoint2: NSPoint(x: bounds.minX + 74.81, y: bounds.maxY - 23.79))
        bankOfAmericaLogoPath.line(to: NSPoint(x: bounds.minX + 74.94, y: bounds.maxY - 22))
        bankOfAmericaLogoPath.curve(to: NSPoint(x: bounds.minX + 73.72, y: bounds.maxY - 21.91), controlPoint1: NSPoint(x: bounds.minX + 74.55, y: bounds.maxY - 21.96), controlPoint2: NSPoint(x: bounds.minX + 74.2, y: bounds.maxY - 21.91))
        bankOfAmericaLogoPath.curve(to: NSPoint(x: bounds.minX + 71.21, y: bounds.maxY - 24.38), controlPoint1: NSPoint(x: bounds.minX + 72.12, y: bounds.maxY - 21.91), controlPoint2: NSPoint(x: bounds.minX + 71.21, y: bounds.maxY - 22.57))
        bankOfAmericaLogoPath.close()
        bankOfAmericaLogoPath.move(to: NSPoint(x: bounds.minX + 45.43, y: bounds.maxY - 27.28))
        bankOfAmericaLogoPath.curve(to: NSPoint(x: bounds.minX + 42.48, y: bounds.maxY - 25.03), controlPoint1: NSPoint(x: bounds.minX + 45.43, y: bounds.maxY - 25.65), controlPoint2: NSPoint(x: bounds.minX + 43.93, y: bounds.maxY - 25.03))
        bankOfAmericaLogoPath.curve(to: NSPoint(x: bounds.minX + 39.49, y: bounds.maxY - 27.08), controlPoint1: NSPoint(x: bounds.minX + 41.11, y: bounds.maxY - 25.03), controlPoint2: NSPoint(x: bounds.minX + 39.76, y: bounds.maxY - 25.62))
        bankOfAmericaLogoPath.line(to: NSPoint(x: bounds.minX + 41.6, y: bounds.maxY - 27.5))
        bankOfAmericaLogoPath.curve(to: NSPoint(x: bounds.minX + 42.39, y: bounds.maxY - 26.53), controlPoint1: NSPoint(x: bounds.minX + 41.62, y: bounds.maxY - 27.07), controlPoint2: NSPoint(x: bounds.minX + 41.81, y: bounds.maxY - 26.53))
        bankOfAmericaLogoPath.curve(to: NSPoint(x: bounds.minX + 43.02, y: bounds.maxY - 27.27), controlPoint1: NSPoint(x: bounds.minX + 42.81, y: bounds.maxY - 26.53), controlPoint2: NSPoint(x: bounds.minX + 43.02, y: bounds.maxY - 26.83))
        bankOfAmericaLogoPath.line(to: NSPoint(x: bounds.minX + 43.02, y: bounds.maxY - 27.9))
        bankOfAmericaLogoPath.curve(to: NSPoint(x: bounds.minX + 39.16, y: bounds.maxY - 30.57), controlPoint1: NSPoint(x: bounds.minX + 41.42, y: bounds.maxY - 28.08), controlPoint2: NSPoint(x: bounds.minX + 39.22, y: bounds.maxY - 28.65))
        bankOfAmericaLogoPath.curve(to: NSPoint(x: bounds.minX + 41.25, y: bounds.maxY - 32.73), controlPoint1: NSPoint(x: bounds.minX + 39.13, y: bounds.maxY - 31.93), controlPoint2: NSPoint(x: bounds.minX + 40.04, y: bounds.maxY - 32.73))
        bankOfAmericaLogoPath.curve(to: NSPoint(x: bounds.minX + 43.09, y: bounds.maxY - 31.92), controlPoint1: NSPoint(x: bounds.minX + 41.96, y: bounds.maxY - 32.73), controlPoint2: NSPoint(x: bounds.minX + 42.68, y: bounds.maxY - 32.34))
        bankOfAmericaLogoPath.curve(to: NSPoint(x: bounds.minX + 43.17, y: bounds.maxY - 32.59), controlPoint1: NSPoint(x: bounds.minX + 43.1, y: bounds.maxY - 32.04), controlPoint2: NSPoint(x: bounds.minX + 43.12, y: bounds.maxY - 32.39))
        bankOfAmericaLogoPath.line(to: NSPoint(x: bounds.minX + 45.66, y: bounds.maxY - 32.59))
        bankOfAmericaLogoPath.curve(to: NSPoint(x: bounds.minX + 45.43, y: bounds.maxY - 31.4), controlPoint1: NSPoint(x: bounds.minX + 45.57, y: bounds.maxY - 32.49), controlPoint2: NSPoint(x: bounds.minX + 45.43, y: bounds.maxY - 32.24))
        bankOfAmericaLogoPath.line(to: NSPoint(x: bounds.minX + 45.43, y: bounds.maxY - 27.28))
        bankOfAmericaLogoPath.line(to: NSPoint(x: bounds.minX + 45.43, y: bounds.maxY - 27.28))
        bankOfAmericaLogoPath.close()
        bankOfAmericaLogoPath.move(to: NSPoint(x: bounds.minX + 43.02, y: bounds.maxY - 30.71))
        bankOfAmericaLogoPath.curve(to: NSPoint(x: bounds.minX + 42.24, y: bounds.maxY - 31.17), controlPoint1: NSPoint(x: bounds.minX + 42.81, y: bounds.maxY - 30.98), controlPoint2: NSPoint(x: bounds.minX + 42.52, y: bounds.maxY - 31.17))
        bankOfAmericaLogoPath.curve(to: NSPoint(x: bounds.minX + 41.54, y: bounds.maxY - 30.39), controlPoint1: NSPoint(x: bounds.minX + 41.81, y: bounds.maxY - 31.17), controlPoint2: NSPoint(x: bounds.minX + 41.54, y: bounds.maxY - 30.9))
        bankOfAmericaLogoPath.curve(to: NSPoint(x: bounds.minX + 43.02, y: bounds.maxY - 29.05), controlPoint1: NSPoint(x: bounds.minX + 41.54, y: bounds.maxY - 29.44), controlPoint2: NSPoint(x: bounds.minX + 42.17, y: bounds.maxY - 29.13))
        bankOfAmericaLogoPath.line(to: NSPoint(x: bounds.minX + 43.02, y: bounds.maxY - 30.71))
        bankOfAmericaLogoPath.line(to: NSPoint(x: bounds.minX + 43.02, y: bounds.maxY - 30.71))
        bankOfAmericaLogoPath.close()
        bankOfAmericaLogoPath.move(to: NSPoint(x: bounds.minX + 51.36, y: bounds.maxY - 25.03))
        bankOfAmericaLogoPath.curve(to: NSPoint(x: bounds.minX + 49.26, y: bounds.maxY - 25.96), controlPoint1: NSPoint(x: bounds.minX + 50.42, y: bounds.maxY - 25.03), controlPoint2: NSPoint(x: bounds.minX + 49.75, y: bounds.maxY - 25.46))
        bankOfAmericaLogoPath.line(to: NSPoint(x: bounds.minX + 49.23, y: bounds.maxY - 25.96))
        bankOfAmericaLogoPath.line(to: NSPoint(x: bounds.minX + 49.21, y: bounds.maxY - 25.21))
        bankOfAmericaLogoPath.line(to: NSPoint(x: bounds.minX + 46.85, y: bounds.maxY - 25.21))
        bankOfAmericaLogoPath.line(to: NSPoint(x: bounds.minX + 46.85, y: bounds.maxY - 32.59))
        bankOfAmericaLogoPath.line(to: NSPoint(x: bounds.minX + 49.26, y: bounds.maxY - 32.59))
        bankOfAmericaLogoPath.line(to: NSPoint(x: bounds.minX + 49.26, y: bounds.maxY - 27.31))
        bankOfAmericaLogoPath.curve(to: NSPoint(x: bounds.minX + 50.05, y: bounds.maxY - 26.85), controlPoint1: NSPoint(x: bounds.minX + 49.49, y: bounds.maxY - 27.03), controlPoint2: NSPoint(x: bounds.minX + 49.78, y: bounds.maxY - 26.85))
        bankOfAmericaLogoPath.curve(to: NSPoint(x: bounds.minX + 50.61, y: bounds.maxY - 27.51), controlPoint1: NSPoint(x: bounds.minX + 50.46, y: bounds.maxY - 26.85), controlPoint2: NSPoint(x: bounds.minX + 50.61, y: bounds.maxY - 27.09))
        bankOfAmericaLogoPath.line(to: NSPoint(x: bounds.minX + 50.61, y: bounds.maxY - 32.59))
        bankOfAmericaLogoPath.line(to: NSPoint(x: bounds.minX + 53.03, y: bounds.maxY - 32.59))
        bankOfAmericaLogoPath.line(to: NSPoint(x: bounds.minX + 53.03, y: bounds.maxY - 26.75))
        bankOfAmericaLogoPath.curve(to: NSPoint(x: bounds.minX + 51.36, y: bounds.maxY - 25.03), controlPoint1: NSPoint(x: bounds.minX + 53.03, y: bounds.maxY - 25.74), controlPoint2: NSPoint(x: bounds.minX + 52.42, y: bounds.maxY - 25.03))
        bankOfAmericaLogoPath.close()
        bankOfAmericaLogoPath.move(to: NSPoint(x: bounds.minX + 61.16, y: bounds.maxY - 25.21))
        bankOfAmericaLogoPath.line(to: NSPoint(x: bounds.minX + 58.76, y: bounds.maxY - 25.21))
        bankOfAmericaLogoPath.line(to: NSPoint(x: bounds.minX + 56.98, y: bounds.maxY - 27.44))
        bankOfAmericaLogoPath.line(to: NSPoint(x: bounds.minX + 56.95, y: bounds.maxY - 27.44))
        bankOfAmericaLogoPath.line(to: NSPoint(x: bounds.minX + 56.95, y: bounds.maxY - 22.12))
        bankOfAmericaLogoPath.line(to: NSPoint(x: bounds.minX + 54.53, y: bounds.maxY - 22.12))
        bankOfAmericaLogoPath.line(to: NSPoint(x: bounds.minX + 54.53, y: bounds.maxY - 32.59))
        bankOfAmericaLogoPath.line(to: NSPoint(x: bounds.minX + 56.95, y: bounds.maxY - 32.59))
        bankOfAmericaLogoPath.line(to: NSPoint(x: bounds.minX + 56.95, y: bounds.maxY - 29.95))
        bankOfAmericaLogoPath.line(to: NSPoint(x: bounds.minX + 57.46, y: bounds.maxY - 29.37))
        bankOfAmericaLogoPath.line(to: NSPoint(x: bounds.minX + 57.49, y: bounds.maxY - 29.37))
        bankOfAmericaLogoPath.line(to: NSPoint(x: bounds.minX + 58.66, y: bounds.maxY - 32.59))
        bankOfAmericaLogoPath.line(to: NSPoint(x: bounds.minX + 61.17, y: bounds.maxY - 32.59))
        bankOfAmericaLogoPath.line(to: NSPoint(x: bounds.minX + 59.14, y: bounds.maxY - 27.48))
        bankOfAmericaLogoPath.line(to: NSPoint(x: bounds.minX + 61.16, y: bounds.maxY - 25.21))
        bankOfAmericaLogoPath.close()
        bankOfAmericaLogoPath.move(to: NSPoint(x: bounds.minX + 36.59, y: bounds.maxY - 27.14))
        bankOfAmericaLogoPath.line(to: NSPoint(x: bounds.minX + 36.59, y: bounds.maxY - 27.06))
        bankOfAmericaLogoPath.curve(to: NSPoint(x: bounds.minX + 38.32, y: bounds.maxY - 24.68), controlPoint1: NSPoint(x: bounds.minX + 37.36, y: bounds.maxY - 26.77), controlPoint2: NSPoint(x: bounds.minX + 38.32, y: bounds.maxY - 26.05))
        bankOfAmericaLogoPath.curve(to: NSPoint(x: bounds.minX + 35.2, y: bounds.maxY - 22.12), controlPoint1: NSPoint(x: bounds.minX + 38.32, y: bounds.maxY - 23.23), controlPoint2: NSPoint(x: bounds.minX + 37.08, y: bounds.maxY - 22.12))
        bankOfAmericaLogoPath.line(to: NSPoint(x: bounds.minX + 31, y: bounds.maxY - 22.12))
        bankOfAmericaLogoPath.line(to: NSPoint(x: bounds.minX + 31, y: bounds.maxY - 32.59))
        bankOfAmericaLogoPath.line(to: NSPoint(x: bounds.minX + 35.09, y: bounds.maxY - 32.59))
        bankOfAmericaLogoPath.curve(to: NSPoint(x: bounds.minX + 38.57, y: bounds.maxY - 29.79), controlPoint1: NSPoint(x: bounds.minX + 37.11, y: bounds.maxY - 32.59), controlPoint2: NSPoint(x: bounds.minX + 38.57, y: bounds.maxY - 31.58))
        bankOfAmericaLogoPath.curve(to: NSPoint(x: bounds.minX + 36.59, y: bounds.maxY - 27.14), controlPoint1: NSPoint(x: bounds.minX + 38.57, y: bounds.maxY - 28.45), controlPoint2: NSPoint(x: bounds.minX + 37.74, y: bounds.maxY - 27.52))
        bankOfAmericaLogoPath.close()
        bankOfAmericaLogoPath.move(to: NSPoint(x: bounds.minX + 33.61, y: bounds.maxY - 23.97))
        bankOfAmericaLogoPath.line(to: NSPoint(x: bounds.minX + 34.55, y: bounds.maxY - 23.97))
        bankOfAmericaLogoPath.curve(to: NSPoint(x: bounds.minX + 35.84, y: bounds.maxY - 25.13), controlPoint1: NSPoint(x: bounds.minX + 35.16, y: bounds.maxY - 23.97), controlPoint2: NSPoint(x: bounds.minX + 35.84, y: bounds.maxY - 24.13))
        bankOfAmericaLogoPath.curve(to: NSPoint(x: bounds.minX + 34.49, y: bounds.maxY - 26.27), controlPoint1: NSPoint(x: bounds.minX + 35.84, y: bounds.maxY - 25.75), controlPoint2: NSPoint(x: bounds.minX + 35.46, y: bounds.maxY - 26.27))
        bankOfAmericaLogoPath.line(to: NSPoint(x: bounds.minX + 33.61, y: bounds.maxY - 26.27))
        bankOfAmericaLogoPath.line(to: NSPoint(x: bounds.minX + 33.61, y: bounds.maxY - 23.97))
        bankOfAmericaLogoPath.line(to: NSPoint(x: bounds.minX + 33.61, y: bounds.maxY - 23.97))
        bankOfAmericaLogoPath.close()
        bankOfAmericaLogoPath.move(to: NSPoint(x: bounds.minX + 34.6, y: bounds.maxY - 30.65))
        bankOfAmericaLogoPath.line(to: NSPoint(x: bounds.minX + 33.61, y: bounds.maxY - 30.65))
        bankOfAmericaLogoPath.line(to: NSPoint(x: bounds.minX + 33.61, y: bounds.maxY - 28.03))
        bankOfAmericaLogoPath.line(to: NSPoint(x: bounds.minX + 34.6, y: bounds.maxY - 28.03))
        bankOfAmericaLogoPath.curve(to: NSPoint(x: bounds.minX + 35.95, y: bounds.maxY - 29.33), controlPoint1: NSPoint(x: bounds.minX + 35.46, y: bounds.maxY - 28.03), controlPoint2: NSPoint(x: bounds.minX + 35.95, y: bounds.maxY - 28.55))
        bankOfAmericaLogoPath.curve(to: NSPoint(x: bounds.minX + 34.6, y: bounds.maxY - 30.65), controlPoint1: NSPoint(x: bounds.minX + 35.95, y: bounds.maxY - 30.4), controlPoint2: NSPoint(x: bounds.minX + 35.18, y: bounds.maxY - 30.65))
        bankOfAmericaLogoPath.close()
        bankOfAmericaLogoPath.move(to: NSPoint(x: bounds.minX + 126.37, y: bounds.maxY - 31.4))
        bankOfAmericaLogoPath.line(to: NSPoint(x: bounds.minX + 126.37, y: bounds.maxY - 27.28))
        bankOfAmericaLogoPath.curve(to: NSPoint(x: bounds.minX + 123.41, y: bounds.maxY - 25.03), controlPoint1: NSPoint(x: bounds.minX + 126.37, y: bounds.maxY - 25.65), controlPoint2: NSPoint(x: bounds.minX + 124.86, y: bounds.maxY - 25.03))
        bankOfAmericaLogoPath.curve(to: NSPoint(x: bounds.minX + 120.43, y: bounds.maxY - 27.08), controlPoint1: NSPoint(x: bounds.minX + 122.04, y: bounds.maxY - 25.03), controlPoint2: NSPoint(x: bounds.minX + 120.7, y: bounds.maxY - 25.62))
        bankOfAmericaLogoPath.line(to: NSPoint(x: bounds.minX + 122.53, y: bounds.maxY - 27.5))
        bankOfAmericaLogoPath.curve(to: NSPoint(x: bounds.minX + 123.33, y: bounds.maxY - 26.53), controlPoint1: NSPoint(x: bounds.minX + 122.56, y: bounds.maxY - 27.07), controlPoint2: NSPoint(x: bounds.minX + 122.74, y: bounds.maxY - 26.53))
        bankOfAmericaLogoPath.curve(to: NSPoint(x: bounds.minX + 123.95, y: bounds.maxY - 27.27), controlPoint1: NSPoint(x: bounds.minX + 123.74, y: bounds.maxY - 26.53), controlPoint2: NSPoint(x: bounds.minX + 123.95, y: bounds.maxY - 26.83))
        bankOfAmericaLogoPath.line(to: NSPoint(x: bounds.minX + 123.95, y: bounds.maxY - 27.9))
        bankOfAmericaLogoPath.curve(to: NSPoint(x: bounds.minX + 120.1, y: bounds.maxY - 30.57), controlPoint1: NSPoint(x: bounds.minX + 122.35, y: bounds.maxY - 28.08), controlPoint2: NSPoint(x: bounds.minX + 120.15, y: bounds.maxY - 28.65))
        bankOfAmericaLogoPath.curve(to: NSPoint(x: bounds.minX + 122.19, y: bounds.maxY - 32.73), controlPoint1: NSPoint(x: bounds.minX + 120.06, y: bounds.maxY - 31.93), controlPoint2: NSPoint(x: bounds.minX + 120.98, y: bounds.maxY - 32.73))
        bankOfAmericaLogoPath.curve(to: NSPoint(x: bounds.minX + 124.03, y: bounds.maxY - 31.92), controlPoint1: NSPoint(x: bounds.minX + 122.9, y: bounds.maxY - 32.73), controlPoint2: NSPoint(x: bounds.minX + 123.61, y: bounds.maxY - 32.34))
        bankOfAmericaLogoPath.curve(to: NSPoint(x: bounds.minX + 124.1, y: bounds.maxY - 32.59), controlPoint1: NSPoint(x: bounds.minX + 124.04, y: bounds.maxY - 32.04), controlPoint2: NSPoint(x: bounds.minX + 124.06, y: bounds.maxY - 32.39))
        bankOfAmericaLogoPath.line(to: NSPoint(x: bounds.minX + 126.59, y: bounds.maxY - 32.59))
        bankOfAmericaLogoPath.curve(to: NSPoint(x: bounds.minX + 126.37, y: bounds.maxY - 31.4), controlPoint1: NSPoint(x: bounds.minX + 126.5, y: bounds.maxY - 32.49), controlPoint2: NSPoint(x: bounds.minX + 126.37, y: bounds.maxY - 32.24))
        bankOfAmericaLogoPath.close()
        bankOfAmericaLogoPath.move(to: NSPoint(x: bounds.minX + 123.95, y: bounds.maxY - 30.71))
        bankOfAmericaLogoPath.curve(to: NSPoint(x: bounds.minX + 123.18, y: bounds.maxY - 31.17), controlPoint1: NSPoint(x: bounds.minX + 123.74, y: bounds.maxY - 30.98), controlPoint2: NSPoint(x: bounds.minX + 123.45, y: bounds.maxY - 31.17))
        bankOfAmericaLogoPath.curve(to: NSPoint(x: bounds.minX + 122.47, y: bounds.maxY - 30.39), controlPoint1: NSPoint(x: bounds.minX + 122.74, y: bounds.maxY - 31.17), controlPoint2: NSPoint(x: bounds.minX + 122.47, y: bounds.maxY - 30.9))
        bankOfAmericaLogoPath.curve(to: NSPoint(x: bounds.minX + 123.95, y: bounds.maxY - 29.05), controlPoint1: NSPoint(x: bounds.minX + 122.47, y: bounds.maxY - 29.44), controlPoint2: NSPoint(x: bounds.minX + 123.11, y: bounds.maxY - 29.13))
        bankOfAmericaLogoPath.line(to: NSPoint(x: bounds.minX + 123.95, y: bounds.maxY - 30.71))
        bankOfAmericaLogoPath.line(to: NSPoint(x: bounds.minX + 123.95, y: bounds.maxY - 30.71))
        bankOfAmericaLogoPath.close()
        bankOfAmericaLogoPath.move(to: NSPoint(x: bounds.minX + 100.01, y: bounds.maxY - 25.01))
        bankOfAmericaLogoPath.curve(to: NSPoint(x: bounds.minX + 96.68, y: bounds.maxY - 28.87), controlPoint1: NSPoint(x: bounds.minX + 97.78, y: bounds.maxY - 25.01), controlPoint2: NSPoint(x: bounds.minX + 96.68, y: bounds.maxY - 26.78))
        bankOfAmericaLogoPath.curve(to: NSPoint(x: bounds.minX + 100.03, y: bounds.maxY - 32.75), controlPoint1: NSPoint(x: bounds.minX + 96.68, y: bounds.maxY - 30.91), controlPoint2: NSPoint(x: bounds.minX + 97.72, y: bounds.maxY - 32.75))
        bankOfAmericaLogoPath.curve(to: NSPoint(x: bounds.minX + 103.04, y: bounds.maxY - 30.73), controlPoint1: NSPoint(x: bounds.minX + 102.19, y: bounds.maxY - 32.75), controlPoint2: NSPoint(x: bounds.minX + 102.93, y: bounds.maxY - 31.07))
        bankOfAmericaLogoPath.line(to: NSPoint(x: bounds.minX + 101.41, y: bounds.maxY - 30.15))
        bankOfAmericaLogoPath.curve(to: NSPoint(x: bounds.minX + 100.21, y: bounds.maxY - 31.16), controlPoint1: NSPoint(x: bounds.minX + 101.29, y: bounds.maxY - 30.74), controlPoint2: NSPoint(x: bounds.minX + 100.79, y: bounds.maxY - 31.16))
        bankOfAmericaLogoPath.curve(to: NSPoint(x: bounds.minX + 99.09, y: bounds.maxY - 29.41), controlPoint1: NSPoint(x: bounds.minX + 99.24, y: bounds.maxY - 31.16), controlPoint2: NSPoint(x: bounds.minX + 99.06, y: bounds.maxY - 30.07))
        bankOfAmericaLogoPath.line(to: NSPoint(x: bounds.minX + 103.14, y: bounds.maxY - 29.41))
        bankOfAmericaLogoPath.line(to: NSPoint(x: bounds.minX + 103.14, y: bounds.maxY - 28.91))
        bankOfAmericaLogoPath.curve(to: NSPoint(x: bounds.minX + 100.01, y: bounds.maxY - 25.01), controlPoint1: NSPoint(x: bounds.minX + 103.14, y: bounds.maxY - 26.98), controlPoint2: NSPoint(x: bounds.minX + 102.34, y: bounds.maxY - 25.01))
        bankOfAmericaLogoPath.close()
        bankOfAmericaLogoPath.move(to: NSPoint(x: bounds.minX + 100.9, y: bounds.maxY - 28))
        bankOfAmericaLogoPath.line(to: NSPoint(x: bounds.minX + 99.09, y: bounds.maxY - 28))
        bankOfAmericaLogoPath.curve(to: NSPoint(x: bounds.minX + 99.99, y: bounds.maxY - 26.51), controlPoint1: NSPoint(x: bounds.minX + 99.06, y: bounds.maxY - 27.3), controlPoint2: NSPoint(x: bounds.minX + 99.3, y: bounds.maxY - 26.51))
        bankOfAmericaLogoPath.curve(to: NSPoint(x: bounds.minX + 100.9, y: bounds.maxY - 28), controlPoint1: NSPoint(x: bounds.minX + 100.83, y: bounds.maxY - 26.51), controlPoint2: NSPoint(x: bounds.minX + 100.92, y: bounds.maxY - 27.31))
        bankOfAmericaLogoPath.close()
        bankOfAmericaLogoPath.move(to: NSPoint(x: bounds.minX + 109.66, y: bounds.maxY - 25.21))
        bankOfAmericaLogoPath.line(to: NSPoint(x: bounds.minX + 112.08, y: bounds.maxY - 25.21))
        bankOfAmericaLogoPath.line(to: NSPoint(x: bounds.minX + 112.08, y: bounds.maxY - 32.59))
        bankOfAmericaLogoPath.line(to: NSPoint(x: bounds.minX + 109.66, y: bounds.maxY - 32.59))
        bankOfAmericaLogoPath.line(to: NSPoint(x: bounds.minX + 109.66, y: bounds.maxY - 25.21))
        bankOfAmericaLogoPath.close()
        bankOfAmericaLogoPath.move(to: NSPoint(x: bounds.minX + 109.66, y: bounds.maxY - 22.12))
        bankOfAmericaLogoPath.line(to: NSPoint(x: bounds.minX + 112.08, y: bounds.maxY - 22.12))
        bankOfAmericaLogoPath.line(to: NSPoint(x: bounds.minX + 112.08, y: bounds.maxY - 24.24))
        bankOfAmericaLogoPath.line(to: NSPoint(x: bounds.minX + 109.66, y: bounds.maxY - 24.24))
        bankOfAmericaLogoPath.line(to: NSPoint(x: bounds.minX + 109.66, y: bounds.maxY - 22.12))
        bankOfAmericaLogoPath.close()
        bankOfAmericaLogoPath.move(to: NSPoint(x: bounds.minX + 116.62, y: bounds.maxY - 26.51))
        bankOfAmericaLogoPath.curve(to: NSPoint(x: bounds.minX + 117.32, y: bounds.maxY - 27.01), controlPoint1: NSPoint(x: bounds.minX + 117.01, y: bounds.maxY - 26.51), controlPoint2: NSPoint(x: bounds.minX + 117.21, y: bounds.maxY - 26.72))
        bankOfAmericaLogoPath.curve(to: NSPoint(x: bounds.minX + 117.44, y: bounds.maxY - 27.94), controlPoint1: NSPoint(x: bounds.minX + 117.43, y: bounds.maxY - 27.29), controlPoint2: NSPoint(x: bounds.minX + 117.44, y: bounds.maxY - 27.64))
        bankOfAmericaLogoPath.line(to: NSPoint(x: bounds.minX + 119.51, y: bounds.maxY - 27.94))
        bankOfAmericaLogoPath.curve(to: NSPoint(x: bounds.minX + 116.55, y: bounds.maxY - 25.01), controlPoint1: NSPoint(x: bounds.minX + 119.51, y: bounds.maxY - 27.2), controlPoint2: NSPoint(x: bounds.minX + 119.12, y: bounds.maxY - 25.01))
        bankOfAmericaLogoPath.curve(to: NSPoint(x: bounds.minX + 113.13, y: bounds.maxY - 29.04), controlPoint1: NSPoint(x: bounds.minX + 114.27, y: bounds.maxY - 25.01), controlPoint2: NSPoint(x: bounds.minX + 113.13, y: bounds.maxY - 27.03))
        bankOfAmericaLogoPath.curve(to: NSPoint(x: bounds.minX + 116.45, y: bounds.maxY - 32.75), controlPoint1: NSPoint(x: bounds.minX + 113.13, y: bounds.maxY - 30.87), controlPoint2: NSPoint(x: bounds.minX + 114.27, y: bounds.maxY - 32.75))
        bankOfAmericaLogoPath.curve(to: NSPoint(x: bounds.minX + 119.43, y: bounds.maxY - 30.01), controlPoint1: NSPoint(x: bounds.minX + 118.21, y: bounds.maxY - 32.75), controlPoint2: NSPoint(x: bounds.minX + 119.25, y: bounds.maxY - 31.81))
        bankOfAmericaLogoPath.line(to: NSPoint(x: bounds.minX + 117.55, y: bounds.maxY - 29.75))
        bankOfAmericaLogoPath.curve(to: NSPoint(x: bounds.minX + 116.62, y: bounds.maxY - 31.16), controlPoint1: NSPoint(x: bounds.minX + 117.55, y: bounds.maxY - 30.31), controlPoint2: NSPoint(x: bounds.minX + 117.48, y: bounds.maxY - 31.16))
        bankOfAmericaLogoPath.curve(to: NSPoint(x: bounds.minX + 115.73, y: bounds.maxY - 28.95), controlPoint1: NSPoint(x: bounds.minX + 116, y: bounds.maxY - 31.16), controlPoint2: NSPoint(x: bounds.minX + 115.73, y: bounds.maxY - 30.62))
        bankOfAmericaLogoPath.curve(to: NSPoint(x: bounds.minX + 116.62, y: bounds.maxY - 26.51), controlPoint1: NSPoint(x: bounds.minX + 115.73, y: bounds.maxY - 27.48), controlPoint2: NSPoint(x: bounds.minX + 115.82, y: bounds.maxY - 26.51))
        bankOfAmericaLogoPath.close()
        bankOfAmericaLogoPath.move(to: NSPoint(x: bounds.minX + 79.15, y: bounds.maxY - 22.12))
        bankOfAmericaLogoPath.line(to: NSPoint(x: bounds.minX + 76.66, y: bounds.maxY - 32.59))
        bankOfAmericaLogoPath.line(to: NSPoint(x: bounds.minX + 78.98, y: bounds.maxY - 32.59))
        bankOfAmericaLogoPath.line(to: NSPoint(x: bounds.minX + 79.45, y: bounds.maxY - 30.47))
        bankOfAmericaLogoPath.line(to: NSPoint(x: bounds.minX + 81.91, y: bounds.maxY - 30.47))
        bankOfAmericaLogoPath.line(to: NSPoint(x: bounds.minX + 82.33, y: bounds.maxY - 32.59))
        bankOfAmericaLogoPath.line(to: NSPoint(x: bounds.minX + 84.94, y: bounds.maxY - 32.59))
        bankOfAmericaLogoPath.line(to: NSPoint(x: bounds.minX + 82.67, y: bounds.maxY - 22.12))
        bankOfAmericaLogoPath.line(to: NSPoint(x: bounds.minX + 79.15, y: bounds.maxY - 22.12))
        bankOfAmericaLogoPath.close()
        bankOfAmericaLogoPath.move(to: NSPoint(x: bounds.minX + 79.82, y: bounds.maxY - 28.62))
        bankOfAmericaLogoPath.line(to: NSPoint(x: bounds.minX + 80.72, y: bounds.maxY - 24.35))
        bankOfAmericaLogoPath.line(to: NSPoint(x: bounds.minX + 80.77, y: bounds.maxY - 24.35))
        bankOfAmericaLogoPath.line(to: NSPoint(x: bounds.minX + 81.54, y: bounds.maxY - 28.62))
        bankOfAmericaLogoPath.line(to: NSPoint(x: bounds.minX + 79.82, y: bounds.maxY - 28.62))
        bankOfAmericaLogoPath.close()
        bankOfAmericaLogoPath.move(to: NSPoint(x: bounds.minX + 106.54, y: bounds.maxY - 26.21))
        bankOfAmericaLogoPath.line(to: NSPoint(x: bounds.minX + 106.5, y: bounds.maxY - 26.21))
        bankOfAmericaLogoPath.line(to: NSPoint(x: bounds.minX + 106.48, y: bounds.maxY - 25.21))
        bankOfAmericaLogoPath.line(to: NSPoint(x: bounds.minX + 104.14, y: bounds.maxY - 25.21))
        bankOfAmericaLogoPath.line(to: NSPoint(x: bounds.minX + 104.14, y: bounds.maxY - 32.59))
        bankOfAmericaLogoPath.line(to: NSPoint(x: bounds.minX + 106.56, y: bounds.maxY - 32.59))
        bankOfAmericaLogoPath.line(to: NSPoint(x: bounds.minX + 106.56, y: bounds.maxY - 27.81))
        bankOfAmericaLogoPath.curve(to: NSPoint(x: bounds.minX + 107.88, y: bounds.maxY - 27.24), controlPoint1: NSPoint(x: bounds.minX + 106.84, y: bounds.maxY - 27.48), controlPoint2: NSPoint(x: bounds.minX + 107.27, y: bounds.maxY - 27.24))
        bankOfAmericaLogoPath.curve(to: NSPoint(x: bounds.minX + 108.87, y: bounds.maxY - 27.44), controlPoint1: NSPoint(x: bounds.minX + 108.3, y: bounds.maxY - 27.24), controlPoint2: NSPoint(x: bounds.minX + 108.59, y: bounds.maxY - 27.34))
        bankOfAmericaLogoPath.line(to: NSPoint(x: bounds.minX + 108.87, y: bounds.maxY - 25.03))
        bankOfAmericaLogoPath.curve(to: NSPoint(x: bounds.minX + 106.54, y: bounds.maxY - 26.21), controlPoint1: NSPoint(x: bounds.minX + 107.94, y: bounds.maxY - 25.03), controlPoint2: NSPoint(x: bounds.minX + 107.03, y: bounds.maxY - 25.43))
        bankOfAmericaLogoPath.close()
        bankOfAmericaLogoPath.move(to: NSPoint(x: bounds.minX + 93.94, y: bounds.maxY - 25.03))
        bankOfAmericaLogoPath.curve(to: NSPoint(x: bounds.minX + 91.78, y: bounds.maxY - 26.02), controlPoint1: NSPoint(x: bounds.minX + 92.93, y: bounds.maxY - 25.03), controlPoint2: NSPoint(x: bounds.minX + 92.2, y: bounds.maxY - 25.57))
        bankOfAmericaLogoPath.line(to: NSPoint(x: bounds.minX + 91.75, y: bounds.maxY - 26.02))
        bankOfAmericaLogoPath.curve(to: NSPoint(x: bounds.minX + 90.3, y: bounds.maxY - 25.03), controlPoint1: NSPoint(x: bounds.minX + 91.52, y: bounds.maxY - 25.45), controlPoint2: NSPoint(x: bounds.minX + 91.03, y: bounds.maxY - 25.03))
        bankOfAmericaLogoPath.curve(to: NSPoint(x: bounds.minX + 88.13, y: bounds.maxY - 25.96), controlPoint1: NSPoint(x: bounds.minX + 89.4, y: bounds.maxY - 25.03), controlPoint2: NSPoint(x: bounds.minX + 88.64, y: bounds.maxY - 25.49))
        bankOfAmericaLogoPath.line(to: NSPoint(x: bounds.minX + 88.1, y: bounds.maxY - 25.96))
        bankOfAmericaLogoPath.line(to: NSPoint(x: bounds.minX + 88.09, y: bounds.maxY - 25.21))
        bankOfAmericaLogoPath.line(to: NSPoint(x: bounds.minX + 85.73, y: bounds.maxY - 25.21))
        bankOfAmericaLogoPath.line(to: NSPoint(x: bounds.minX + 85.73, y: bounds.maxY - 32.59))
        bankOfAmericaLogoPath.line(to: NSPoint(x: bounds.minX + 88.1, y: bounds.maxY - 32.59))
        bankOfAmericaLogoPath.line(to: NSPoint(x: bounds.minX + 88.1, y: bounds.maxY - 27.33))
        bankOfAmericaLogoPath.curve(to: NSPoint(x: bounds.minX + 88.92, y: bounds.maxY - 26.87), controlPoint1: NSPoint(x: bounds.minX + 88.31, y: bounds.maxY - 27.05), controlPoint2: NSPoint(x: bounds.minX + 88.67, y: bounds.maxY - 26.87))
        bankOfAmericaLogoPath.curve(to: NSPoint(x: bounds.minX + 89.49, y: bounds.maxY - 27.53), controlPoint1: NSPoint(x: bounds.minX + 89.37, y: bounds.maxY - 26.87), controlPoint2: NSPoint(x: bounds.minX + 89.49, y: bounds.maxY - 27.13))
        bankOfAmericaLogoPath.line(to: NSPoint(x: bounds.minX + 89.49, y: bounds.maxY - 32.59))
        bankOfAmericaLogoPath.line(to: NSPoint(x: bounds.minX + 91.86, y: bounds.maxY - 32.59))
        bankOfAmericaLogoPath.line(to: NSPoint(x: bounds.minX + 91.86, y: bounds.maxY - 27.33))
        bankOfAmericaLogoPath.curve(to: NSPoint(x: bounds.minX + 92.69, y: bounds.maxY - 26.87), controlPoint1: NSPoint(x: bounds.minX + 92.02, y: bounds.maxY - 27.12), controlPoint2: NSPoint(x: bounds.minX + 92.37, y: bounds.maxY - 26.87))
        bankOfAmericaLogoPath.curve(to: NSPoint(x: bounds.minX + 93.25, y: bounds.maxY - 27.53), controlPoint1: NSPoint(x: bounds.minX + 93.13, y: bounds.maxY - 26.87), controlPoint2: NSPoint(x: bounds.minX + 93.25, y: bounds.maxY - 27.13))
        bankOfAmericaLogoPath.line(to: NSPoint(x: bounds.minX + 93.25, y: bounds.maxY - 32.59))
        bankOfAmericaLogoPath.line(to: NSPoint(x: bounds.minX + 95.62, y: bounds.maxY - 32.59))
        bankOfAmericaLogoPath.line(to: NSPoint(x: bounds.minX + 95.62, y: bounds.maxY - 26.71))
        bankOfAmericaLogoPath.curve(to: NSPoint(x: bounds.minX + 93.94, y: bounds.maxY - 25.03), controlPoint1: NSPoint(x: bounds.minX + 95.62, y: bounds.maxY - 25.69), controlPoint2: NSPoint(x: bounds.minX + 94.94, y: bounds.maxY - 25.03))
        bankOfAmericaLogoPath.close()
        bankOfAmericaLogoPath.windingRule = .evenOddWindingRule
        logoWhite.setFill()
        bankOfAmericaLogoPath.fill()
    }

    public static func drawChaseButton(bounds: NSRect = NSRect(x: 0, y: 0, width: 191, height: 56), original: Bool = true, hover: Bool = false, pressed: Bool = false) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext

        //// Color Declarations
        let chaseBackground = NSColor(deviceRed: 0.016, green: 0.349, blue: 0.663, alpha: 1)
        let highlightGradientColor = NSColor(deviceRed: 1, green: 1, blue: 1, alpha: 0.09)
        let highlightGradientColor2 = NSColor(deviceRed: 1, green: 1, blue: 1, alpha: 0)
        let shadow2Color = NSColor(deviceRed: 1, green: 1, blue: 1, alpha: 0.36)
        let logoWhite = NSColor(deviceRed: 1, green: 1, blue: 1, alpha: 1)

        //// Gradient Declarations
        let highlightGradient = NSGradient(starting: highlightGradientColor, ending: highlightGradientColor2)!

        //// Shadow Declarations
        let outerShadow = NSShadow()
        outerShadow.shadowColor = NSColor.black
        outerShadow.shadowOffset = NSSize(width: 0, height: 0)
        outerShadow.shadowBlurRadius = 0.5
        let innerStroke = NSShadow()
        innerStroke.shadowColor = shadow2Color
        innerStroke.shadowOffset = NSSize(width: 0, height: 0)
        innerStroke.shadowBlurRadius = 0.5

        if (original) {
            //// chase
            NSGraphicsContext.saveGraphicsState()
            context.translateBy(x: bounds.minX + 95.5, y: bounds.maxY - 28)

            outerShadow.set()
            context.beginTransparencyLayer(auxiliaryInfo: nil)


            //// chaseBase Drawing
            let chaseBasePath = NSBezierPath(roundedRect: NSRect(x: -88.5, y: -21, width: 177, height: 42), xRadius: 5, yRadius: 5)
            chaseBackground.setFill()
            chaseBasePath.fill()


            //// chaseHighlight Drawing
            let chaseHighlightPath = NSBezierPath(roundedRect: NSRect(x: -88.5, y: -21, width: 177, height: 42), xRadius: 5, yRadius: 5)
            highlightGradient.draw(in: chaseHighlightPath, angle: -45)

            ////// chaseHighlight Inner Shadow
            NSGraphicsContext.saveGraphicsState()
            NSRectClip(chaseHighlightPath.bounds)
            context.setShadow(offset: NSSize.zero, blur: 0, color: nil)

            context.setAlpha(innerStroke.shadowColor!.alphaComponent)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            let chaseHighlightOpaqueShadow = NSShadow()
            chaseHighlightOpaqueShadow.shadowColor = innerStroke.shadowColor!.withAlphaComponent(1)
            chaseHighlightOpaqueShadow.shadowOffset = innerStroke.shadowOffset
            chaseHighlightOpaqueShadow.shadowBlurRadius = innerStroke.shadowBlurRadius
            chaseHighlightOpaqueShadow.set()

            context.setBlendMode(.sourceOut)
            context.beginTransparencyLayer(auxiliaryInfo: nil)

            chaseHighlightOpaqueShadow.shadowColor!.setFill()
            chaseHighlightPath.fill()

            context.endTransparencyLayer()
            context.endTransparencyLayer()
            NSGraphicsContext.restoreGraphicsState()



            context.endTransparencyLayer()

            NSGraphicsContext.restoreGraphicsState()
        }


        if (hover) {
            //// chaseHover
            NSGraphicsContext.saveGraphicsState()
            context.translateBy(x: bounds.minX + 95.5, y: bounds.maxY - 28)
            context.scaleBy(x: 1.05, y: 1.05)

            outerShadow.set()
            context.beginTransparencyLayer(auxiliaryInfo: nil)


            //// chaseBase 2 Drawing
            let chaseBase2Path = NSBezierPath(roundedRect: NSRect(x: -88.5, y: -21, width: 177, height: 42), xRadius: 5, yRadius: 5)
            chaseBackground.setFill()
            chaseBase2Path.fill()


            //// chaseHighlight 2 Drawing
            let chaseHighlight2Path = NSBezierPath(roundedRect: NSRect(x: -88.5, y: -21, width: 177, height: 42), xRadius: 5, yRadius: 5)
            highlightGradient.draw(in: chaseHighlight2Path, angle: -45)

            ////// chaseHighlight 2 Inner Shadow
            NSGraphicsContext.saveGraphicsState()
            NSRectClip(chaseHighlight2Path.bounds)
            context.setShadow(offset: NSSize.zero, blur: 0, color: nil)

            context.setAlpha(innerStroke.shadowColor!.alphaComponent)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            let chaseHighlight2OpaqueShadow = NSShadow()
            chaseHighlight2OpaqueShadow.shadowColor = innerStroke.shadowColor!.withAlphaComponent(1)
            chaseHighlight2OpaqueShadow.shadowOffset = innerStroke.shadowOffset
            chaseHighlight2OpaqueShadow.shadowBlurRadius = innerStroke.shadowBlurRadius
            chaseHighlight2OpaqueShadow.set()

            context.setBlendMode(.sourceOut)
            context.beginTransparencyLayer(auxiliaryInfo: nil)

            chaseHighlight2OpaqueShadow.shadowColor!.setFill()
            chaseHighlight2Path.fill()

            context.endTransparencyLayer()
            context.endTransparencyLayer()
            NSGraphicsContext.restoreGraphicsState()



            context.endTransparencyLayer()

            NSGraphicsContext.restoreGraphicsState()
        }


        if (pressed) {
            //// chasePressed
            NSGraphicsContext.saveGraphicsState()
            context.translateBy(x: bounds.minX + 95.5, y: bounds.maxY - 28)

            outerShadow.set()
            context.beginTransparencyLayer(auxiliaryInfo: nil)


            //// chaseBase 3 Drawing
            let chaseBase3Path = NSBezierPath(roundedRect: NSRect(x: -88.5, y: -21, width: 177, height: 42), xRadius: 5, yRadius: 5)
            chaseBackground.setFill()
            chaseBase3Path.fill()


            //// chaseHighlight 3 Drawing
            let chaseHighlight3Path = NSBezierPath(roundedRect: NSRect(x: -88.5, y: -21, width: 177, height: 42), xRadius: 5, yRadius: 5)
            highlightGradient.draw(in: chaseHighlight3Path, angle: -45)

            ////// chaseHighlight 3 Inner Shadow
            NSGraphicsContext.saveGraphicsState()
            NSRectClip(chaseHighlight3Path.bounds)
            context.setShadow(offset: NSSize.zero, blur: 0, color: nil)

            context.setAlpha(innerStroke.shadowColor!.alphaComponent)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            let chaseHighlight3OpaqueShadow = NSShadow()
            chaseHighlight3OpaqueShadow.shadowColor = innerStroke.shadowColor!.withAlphaComponent(1)
            chaseHighlight3OpaqueShadow.shadowOffset = innerStroke.shadowOffset
            chaseHighlight3OpaqueShadow.shadowBlurRadius = innerStroke.shadowBlurRadius
            chaseHighlight3OpaqueShadow.set()

            context.setBlendMode(.sourceOut)
            context.beginTransparencyLayer(auxiliaryInfo: nil)

            chaseHighlight3OpaqueShadow.shadowColor!.setFill()
            chaseHighlight3Path.fill()

            context.endTransparencyLayer()
            context.endTransparencyLayer()
            NSGraphicsContext.restoreGraphicsState()



            context.endTransparencyLayer()

            NSGraphicsContext.restoreGraphicsState()
        }


        //// chaseLogo Drawing
        let chaseLogoPath = NSBezierPath()
        chaseLogoPath.move(to: NSPoint(x: bounds.minX + 129.09, y: bounds.maxY - 20))
        chaseLogoPath.curve(to: NSPoint(x: bounds.minX + 128.52, y: bounds.maxY - 20.56), controlPoint1: NSPoint(x: bounds.minX + 128.78, y: bounds.maxY - 20), controlPoint2: NSPoint(x: bounds.minX + 128.52, y: bounds.maxY - 20.25))
        chaseLogoPath.line(to: NSPoint(x: bounds.minX + 128.52, y: bounds.maxY - 24.53))
        chaseLogoPath.line(to: NSPoint(x: bounds.minX + 139.09, y: bounds.maxY - 24.53))
        chaseLogoPath.line(to: NSPoint(x: bounds.minX + 134.28, y: bounds.maxY - 20))
        chaseLogoPath.line(to: NSPoint(x: bounds.minX + 129.09, y: bounds.maxY - 20))
        chaseLogoPath.close()
        chaseLogoPath.move(to: NSPoint(x: bounds.minX + 139.47, y: bounds.maxY - 25.72))
        chaseLogoPath.curve(to: NSPoint(x: bounds.minX + 138.9, y: bounds.maxY - 25.16), controlPoint1: NSPoint(x: bounds.minX + 139.47, y: bounds.maxY - 25.41), controlPoint2: NSPoint(x: bounds.minX + 139.22, y: bounds.maxY - 25.16))
        chaseLogoPath.line(to: NSPoint(x: bounds.minX + 134.91, y: bounds.maxY - 25.16))
        chaseLogoPath.line(to: NSPoint(x: bounds.minX + 134.91, y: bounds.maxY - 35.62))
        chaseLogoPath.line(to: NSPoint(x: bounds.minX + 139.47, y: bounds.maxY - 30.85))
        chaseLogoPath.line(to: NSPoint(x: bounds.minX + 139.47, y: bounds.maxY - 25.72))
        chaseLogoPath.close()
        chaseLogoPath.move(to: NSPoint(x: bounds.minX + 133.69, y: bounds.maxY - 36))
        chaseLogoPath.curve(to: NSPoint(x: bounds.minX + 134.26, y: bounds.maxY - 35.43), controlPoint1: NSPoint(x: bounds.minX + 134.01, y: bounds.maxY - 36), controlPoint2: NSPoint(x: bounds.minX + 134.26, y: bounds.maxY - 35.75))
        chaseLogoPath.line(to: NSPoint(x: bounds.minX + 134.26, y: bounds.maxY - 31.48))
        chaseLogoPath.line(to: NSPoint(x: bounds.minX + 123.7, y: bounds.maxY - 31.48))
        chaseLogoPath.line(to: NSPoint(x: bounds.minX + 128.51, y: bounds.maxY - 36))
        chaseLogoPath.line(to: NSPoint(x: bounds.minX + 133.69, y: bounds.maxY - 36))
        chaseLogoPath.close()
        chaseLogoPath.move(to: NSPoint(x: bounds.minX + 123.31, y: bounds.maxY - 30.28))
        chaseLogoPath.curve(to: NSPoint(x: bounds.minX + 123.88, y: bounds.maxY - 30.84), controlPoint1: NSPoint(x: bounds.minX + 123.31, y: bounds.maxY - 30.59), controlPoint2: NSPoint(x: bounds.minX + 123.57, y: bounds.maxY - 30.84))
        chaseLogoPath.line(to: NSPoint(x: bounds.minX + 127.88, y: bounds.maxY - 30.84))
        chaseLogoPath.line(to: NSPoint(x: bounds.minX + 127.88, y: bounds.maxY - 20.38))
        chaseLogoPath.line(to: NSPoint(x: bounds.minX + 123.31, y: bounds.maxY - 25.15))
        chaseLogoPath.line(to: NSPoint(x: bounds.minX + 123.31, y: bounds.maxY - 30.28))
        chaseLogoPath.close()
        chaseLogoPath.move(to: NSPoint(x: bounds.minX + 74.88, y: bounds.maxY - 21.91))
        chaseLogoPath.line(to: NSPoint(x: bounds.minX + 74.88, y: bounds.maxY - 26.74))
        chaseLogoPath.line(to: NSPoint(x: bounds.minX + 68.09, y: bounds.maxY - 26.74))
        chaseLogoPath.line(to: NSPoint(x: bounds.minX + 68.09, y: bounds.maxY - 21.91))
        chaseLogoPath.line(to: NSPoint(x: bounds.minX + 65.61, y: bounds.maxY - 21.91))
        chaseLogoPath.line(to: NSPoint(x: bounds.minX + 65.61, y: bounds.maxY - 34.09))
        chaseLogoPath.line(to: NSPoint(x: bounds.minX + 68.09, y: bounds.maxY - 34.09))
        chaseLogoPath.line(to: NSPoint(x: bounds.minX + 68.09, y: bounds.maxY - 28.86))
        chaseLogoPath.line(to: NSPoint(x: bounds.minX + 74.88, y: bounds.maxY - 28.86))
        chaseLogoPath.line(to: NSPoint(x: bounds.minX + 74.88, y: bounds.maxY - 34.09))
        chaseLogoPath.line(to: NSPoint(x: bounds.minX + 77.36, y: bounds.maxY - 34.09))
        chaseLogoPath.line(to: NSPoint(x: bounds.minX + 77.36, y: bounds.maxY - 21.91))
        chaseLogoPath.line(to: NSPoint(x: bounds.minX + 74.88, y: bounds.maxY - 21.91))
        chaseLogoPath.close()
        chaseLogoPath.move(to: NSPoint(x: bounds.minX + 107.82, y: bounds.maxY - 21.91))
        chaseLogoPath.line(to: NSPoint(x: bounds.minX + 107.82, y: bounds.maxY - 34.09))
        chaseLogoPath.line(to: NSPoint(x: bounds.minX + 118.68, y: bounds.maxY - 34.09))
        chaseLogoPath.line(to: NSPoint(x: bounds.minX + 117.31, y: bounds.maxY - 31.94))
        chaseLogoPath.line(to: NSPoint(x: bounds.minX + 110.3, y: bounds.maxY - 31.94))
        chaseLogoPath.line(to: NSPoint(x: bounds.minX + 110.3, y: bounds.maxY - 28.86))
        chaseLogoPath.line(to: NSPoint(x: bounds.minX + 117.09, y: bounds.maxY - 28.86))
        chaseLogoPath.line(to: NSPoint(x: bounds.minX + 117.09, y: bounds.maxY - 26.79))
        chaseLogoPath.line(to: NSPoint(x: bounds.minX + 110.3, y: bounds.maxY - 26.79))
        chaseLogoPath.line(to: NSPoint(x: bounds.minX + 110.3, y: bounds.maxY - 24))
        chaseLogoPath.line(to: NSPoint(x: bounds.minX + 117.3, y: bounds.maxY - 24))
        chaseLogoPath.line(to: NSPoint(x: bounds.minX + 118.64, y: bounds.maxY - 21.91))
        chaseLogoPath.line(to: NSPoint(x: bounds.minX + 107.82, y: bounds.maxY - 21.91))
        chaseLogoPath.close()
        chaseLogoPath.move(to: NSPoint(x: bounds.minX + 56.41, y: bounds.maxY - 21.91))
        chaseLogoPath.curve(to: NSPoint(x: bounds.minX + 52.53, y: bounds.maxY - 25.71), controlPoint1: NSPoint(x: bounds.minX + 53.83, y: bounds.maxY - 21.91), controlPoint2: NSPoint(x: bounds.minX + 52.53, y: bounds.maxY - 23.46))
        chaseLogoPath.line(to: NSPoint(x: bounds.minX + 52.53, y: bounds.maxY - 30.26))
        chaseLogoPath.curve(to: NSPoint(x: bounds.minX + 56.39, y: bounds.maxY - 34.09), controlPoint1: NSPoint(x: bounds.minX + 52.53, y: bounds.maxY - 32.87), controlPoint2: NSPoint(x: bounds.minX + 54.21, y: bounds.maxY - 34.09))
        chaseLogoPath.line(to: NSPoint(x: bounds.minX + 64.16, y: bounds.maxY - 34.09))
        chaseLogoPath.line(to: NSPoint(x: bounds.minX + 62.72, y: bounds.maxY - 31.86))
        chaseLogoPath.line(to: NSPoint(x: bounds.minX + 56.87, y: bounds.maxY - 31.86))
        chaseLogoPath.curve(to: NSPoint(x: bounds.minX + 55.09, y: bounds.maxY - 30.04), controlPoint1: NSPoint(x: bounds.minX + 55.63, y: bounds.maxY - 31.86), controlPoint2: NSPoint(x: bounds.minX + 55.09, y: bounds.maxY - 31.42))
        chaseLogoPath.line(to: NSPoint(x: bounds.minX + 55.09, y: bounds.maxY - 25.92))
        chaseLogoPath.curve(to: NSPoint(x: bounds.minX + 56.91, y: bounds.maxY - 24.07), controlPoint1: NSPoint(x: bounds.minX + 55.09, y: bounds.maxY - 24.58), controlPoint2: NSPoint(x: bounds.minX + 55.55, y: bounds.maxY - 24.07))
        chaseLogoPath.line(to: NSPoint(x: bounds.minX + 62.78, y: bounds.maxY - 24.07))
        chaseLogoPath.line(to: NSPoint(x: bounds.minX + 64.17, y: bounds.maxY - 21.91))
        chaseLogoPath.line(to: NSPoint(x: bounds.minX + 56.41, y: bounds.maxY - 21.91))
        chaseLogoPath.close()
        chaseLogoPath.move(to: NSPoint(x: bounds.minX + 96.96, y: bounds.maxY - 21.9))
        chaseLogoPath.curve(to: NSPoint(x: bounds.minX + 93.94, y: bounds.maxY - 25.07), controlPoint1: NSPoint(x: bounds.minX + 95.47, y: bounds.maxY - 21.9), controlPoint2: NSPoint(x: bounds.minX + 93.94, y: bounds.maxY - 22.79))
        chaseLogoPath.line(to: NSPoint(x: bounds.minX + 93.94, y: bounds.maxY - 25.65))
        chaseLogoPath.curve(to: NSPoint(x: bounds.minX + 96.88, y: bounds.maxY - 28.94), controlPoint1: NSPoint(x: bounds.minX + 93.94, y: bounds.maxY - 28.03), controlPoint2: NSPoint(x: bounds.minX + 95.41, y: bounds.maxY - 28.93))
        chaseLogoPath.line(to: NSPoint(x: bounds.minX + 102.03, y: bounds.maxY - 28.94))
        chaseLogoPath.curve(to: NSPoint(x: bounds.minX + 103, y: bounds.maxY - 29.92), controlPoint1: NSPoint(x: bounds.minX + 102.57, y: bounds.maxY - 28.94), controlPoint2: NSPoint(x: bounds.minX + 103, y: bounds.maxY - 29.02))
        chaseLogoPath.line(to: NSPoint(x: bounds.minX + 103, y: bounds.maxY - 30.95))
        chaseLogoPath.curve(to: NSPoint(x: bounds.minX + 102.01, y: bounds.maxY - 31.94), controlPoint1: NSPoint(x: bounds.minX + 102.99, y: bounds.maxY - 31.76), controlPoint2: NSPoint(x: bounds.minX + 102.58, y: bounds.maxY - 31.94))
        chaseLogoPath.line(to: NSPoint(x: bounds.minX + 95.23, y: bounds.maxY - 31.94))
        chaseLogoPath.line(to: NSPoint(x: bounds.minX + 93.85, y: bounds.maxY - 34.09))
        chaseLogoPath.line(to: NSPoint(x: bounds.minX + 102.17, y: bounds.maxY - 34.09))
        chaseLogoPath.curve(to: NSPoint(x: bounds.minX + 105.54, y: bounds.maxY - 30.81), controlPoint1: NSPoint(x: bounds.minX + 104.18, y: bounds.maxY - 34.09), controlPoint2: NSPoint(x: bounds.minX + 105.54, y: bounds.maxY - 33.1))
        chaseLogoPath.line(to: NSPoint(x: bounds.minX + 105.54, y: bounds.maxY - 29.97))
        chaseLogoPath.curve(to: NSPoint(x: bounds.minX + 102.31, y: bounds.maxY - 26.72), controlPoint1: NSPoint(x: bounds.minX + 105.54, y: bounds.maxY - 27.77), controlPoint2: NSPoint(x: bounds.minX + 104.28, y: bounds.maxY - 26.72))
        chaseLogoPath.line(to: NSPoint(x: bounds.minX + 97.39, y: bounds.maxY - 26.72))
        chaseLogoPath.curve(to: NSPoint(x: bounds.minX + 96.47, y: bounds.maxY - 25.78), controlPoint1: NSPoint(x: bounds.minX + 96.85, y: bounds.maxY - 26.72), controlPoint2: NSPoint(x: bounds.minX + 96.47, y: bounds.maxY - 26.58))
        chaseLogoPath.line(to: NSPoint(x: bounds.minX + 96.47, y: bounds.maxY - 24.93))
        chaseLogoPath.curve(to: NSPoint(x: bounds.minX + 97.36, y: bounds.maxY - 24), controlPoint1: NSPoint(x: bounds.minX + 96.47, y: bounds.maxY - 24.25), controlPoint2: NSPoint(x: bounds.minX + 96.73, y: bounds.maxY - 24))
        chaseLogoPath.line(to: NSPoint(x: bounds.minX + 103.82, y: bounds.maxY - 24))
        chaseLogoPath.line(to: NSPoint(x: bounds.minX + 105.17, y: bounds.maxY - 21.9))
        chaseLogoPath.line(to: NSPoint(x: bounds.minX + 96.96, y: bounds.maxY - 21.9))
        chaseLogoPath.close()
        chaseLogoPath.move(to: NSPoint(x: bounds.minX + 84.56, y: bounds.maxY - 21.91))
        chaseLogoPath.line(to: NSPoint(x: bounds.minX + 78.72, y: bounds.maxY - 34.09))
        chaseLogoPath.line(to: NSPoint(x: bounds.minX + 81.48, y: bounds.maxY - 34.09))
        chaseLogoPath.line(to: NSPoint(x: bounds.minX + 82.62, y: bounds.maxY - 31.57))
        chaseLogoPath.line(to: NSPoint(x: bounds.minX + 88.96, y: bounds.maxY - 31.57))
        chaseLogoPath.line(to: NSPoint(x: bounds.minX + 90.09, y: bounds.maxY - 34.09))
        chaseLogoPath.line(to: NSPoint(x: bounds.minX + 92.86, y: bounds.maxY - 34.09))
        chaseLogoPath.line(to: NSPoint(x: bounds.minX + 87.01, y: bounds.maxY - 21.91))
        chaseLogoPath.line(to: NSPoint(x: bounds.minX + 84.56, y: bounds.maxY - 21.91))
        chaseLogoPath.close()
        chaseLogoPath.move(to: NSPoint(x: bounds.minX + 85.78, y: bounds.maxY - 24.44))
        chaseLogoPath.line(to: NSPoint(x: bounds.minX + 88.02, y: bounds.maxY - 29.5))
        chaseLogoPath.line(to: NSPoint(x: bounds.minX + 83.55, y: bounds.maxY - 29.5))
        chaseLogoPath.line(to: NSPoint(x: bounds.minX + 85.78, y: bounds.maxY - 24.44))
        chaseLogoPath.line(to: NSPoint(x: bounds.minX + 85.78, y: bounds.maxY - 24.44))
        chaseLogoPath.close()
        chaseLogoPath.windingRule = .evenOddWindingRule
        logoWhite.setFill()
        chaseLogoPath.fill()
    }

    public static func drawWellsButton(bounds: NSRect = NSRect(x: 0, y: 0, width: 191, height: 56), original: Bool = true, hover: Bool = false, pressed: Bool = false) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext

        //// Color Declarations
        let highlightGradientColor = NSColor(deviceRed: 1, green: 1, blue: 1, alpha: 0.09)
        let highlightGradientColor2 = NSColor(deviceRed: 1, green: 1, blue: 1, alpha: 0)
        let shadow2Color = NSColor(deviceRed: 1, green: 1, blue: 1, alpha: 0.36)
        let wellsFargoLogoFill = NSColor(deviceRed: 0.996, green: 0.812, blue: 0, alpha: 1)
        let wellsFargoBackground = NSColor(deviceRed: 0.714, green: 0.078, blue: 0.173, alpha: 1)

        //// Gradient Declarations
        let highlightGradient = NSGradient(starting: highlightGradientColor, ending: highlightGradientColor2)!

        //// Shadow Declarations
        let outerShadow = NSShadow()
        outerShadow.shadowColor = NSColor.black
        outerShadow.shadowOffset = NSSize(width: 0, height: 0)
        outerShadow.shadowBlurRadius = 0.5
        let innerStroke = NSShadow()
        innerStroke.shadowColor = shadow2Color
        innerStroke.shadowOffset = NSSize(width: 0, height: 0)
        innerStroke.shadowBlurRadius = 0.5

        if (original) {
            //// wellsFargo
            NSGraphicsContext.saveGraphicsState()
            context.translateBy(x: bounds.minX + 95.5, y: bounds.maxY - 28)

            outerShadow.set()
            context.beginTransparencyLayer(auxiliaryInfo: nil)


            //// wellsFargoBase Drawing
            let wellsFargoBasePath = NSBezierPath(roundedRect: NSRect(x: -88.5, y: -21, width: 177, height: 42), xRadius: 5, yRadius: 5)
            wellsFargoBackground.setFill()
            wellsFargoBasePath.fill()


            //// wellsFargoHighlight Drawing
            let wellsFargoHighlightPath = NSBezierPath(roundedRect: NSRect(x: -88.5, y: -21, width: 177, height: 42), xRadius: 5, yRadius: 5)
            highlightGradient.draw(in: wellsFargoHighlightPath, angle: -45)

            ////// wellsFargoHighlight Inner Shadow
            NSGraphicsContext.saveGraphicsState()
            NSRectClip(wellsFargoHighlightPath.bounds)
            context.setShadow(offset: NSSize.zero, blur: 0, color: nil)

            context.setAlpha(innerStroke.shadowColor!.alphaComponent)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            let wellsFargoHighlightOpaqueShadow = NSShadow()
            wellsFargoHighlightOpaqueShadow.shadowColor = innerStroke.shadowColor!.withAlphaComponent(1)
            wellsFargoHighlightOpaqueShadow.shadowOffset = innerStroke.shadowOffset
            wellsFargoHighlightOpaqueShadow.shadowBlurRadius = innerStroke.shadowBlurRadius
            wellsFargoHighlightOpaqueShadow.set()

            context.setBlendMode(.sourceOut)
            context.beginTransparencyLayer(auxiliaryInfo: nil)

            wellsFargoHighlightOpaqueShadow.shadowColor!.setFill()
            wellsFargoHighlightPath.fill()

            context.endTransparencyLayer()
            context.endTransparencyLayer()
            NSGraphicsContext.restoreGraphicsState()



            context.endTransparencyLayer()

            NSGraphicsContext.restoreGraphicsState()
        }


        if (hover) {
            //// wellsFargohover
            NSGraphicsContext.saveGraphicsState()
            context.translateBy(x: bounds.minX + 95.5, y: bounds.maxY - 28)
            context.scaleBy(x: 1.05, y: 1.05)

            outerShadow.set()
            context.beginTransparencyLayer(auxiliaryInfo: nil)


            //// wellsFargoBase 2 Drawing
            let wellsFargoBase2Path = NSBezierPath(roundedRect: NSRect(x: -88.5, y: -21, width: 177, height: 42), xRadius: 5, yRadius: 5)
            wellsFargoBackground.setFill()
            wellsFargoBase2Path.fill()


            //// wellsFargoHighlight 2 Drawing
            let wellsFargoHighlight2Path = NSBezierPath(roundedRect: NSRect(x: -88.5, y: -21, width: 177, height: 42), xRadius: 5, yRadius: 5)
            highlightGradient.draw(in: wellsFargoHighlight2Path, angle: -45)

            ////// wellsFargoHighlight 2 Inner Shadow
            NSGraphicsContext.saveGraphicsState()
            NSRectClip(wellsFargoHighlight2Path.bounds)
            context.setShadow(offset: NSSize.zero, blur: 0, color: nil)

            context.setAlpha(innerStroke.shadowColor!.alphaComponent)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            let wellsFargoHighlight2OpaqueShadow = NSShadow()
            wellsFargoHighlight2OpaqueShadow.shadowColor = innerStroke.shadowColor!.withAlphaComponent(1)
            wellsFargoHighlight2OpaqueShadow.shadowOffset = innerStroke.shadowOffset
            wellsFargoHighlight2OpaqueShadow.shadowBlurRadius = innerStroke.shadowBlurRadius
            wellsFargoHighlight2OpaqueShadow.set()

            context.setBlendMode(.sourceOut)
            context.beginTransparencyLayer(auxiliaryInfo: nil)

            wellsFargoHighlight2OpaqueShadow.shadowColor!.setFill()
            wellsFargoHighlight2Path.fill()

            context.endTransparencyLayer()
            context.endTransparencyLayer()
            NSGraphicsContext.restoreGraphicsState()



            context.endTransparencyLayer()

            NSGraphicsContext.restoreGraphicsState()
        }


        if (pressed) {
            //// wellsFargoPressed
            NSGraphicsContext.saveGraphicsState()
            context.translateBy(x: bounds.minX + 95.5, y: bounds.maxY - 28)

            outerShadow.set()
            context.beginTransparencyLayer(auxiliaryInfo: nil)


            //// wellsFargoBase 3 Drawing
            let wellsFargoBase3Path = NSBezierPath(roundedRect: NSRect(x: -88.5, y: -21, width: 177, height: 42), xRadius: 5, yRadius: 5)
            wellsFargoBackground.setFill()
            wellsFargoBase3Path.fill()


            //// wellsFargoHighlight 3 Drawing
            let wellsFargoHighlight3Path = NSBezierPath(roundedRect: NSRect(x: -88.5, y: -21, width: 177, height: 42), xRadius: 5, yRadius: 5)
            highlightGradient.draw(in: wellsFargoHighlight3Path, angle: -45)

            ////// wellsFargoHighlight 3 Inner Shadow
            NSGraphicsContext.saveGraphicsState()
            NSRectClip(wellsFargoHighlight3Path.bounds)
            context.setShadow(offset: NSSize.zero, blur: 0, color: nil)

            context.setAlpha(innerStroke.shadowColor!.alphaComponent)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            let wellsFargoHighlight3OpaqueShadow = NSShadow()
            wellsFargoHighlight3OpaqueShadow.shadowColor = innerStroke.shadowColor!.withAlphaComponent(1)
            wellsFargoHighlight3OpaqueShadow.shadowOffset = innerStroke.shadowOffset
            wellsFargoHighlight3OpaqueShadow.shadowBlurRadius = innerStroke.shadowBlurRadius
            wellsFargoHighlight3OpaqueShadow.set()

            context.setBlendMode(.sourceOut)
            context.beginTransparencyLayer(auxiliaryInfo: nil)

            wellsFargoHighlight3OpaqueShadow.shadowColor!.setFill()
            wellsFargoHighlight3Path.fill()

            context.endTransparencyLayer()
            context.endTransparencyLayer()
            NSGraphicsContext.restoreGraphicsState()



            context.endTransparencyLayer()

            NSGraphicsContext.restoreGraphicsState()
        }


        //// wellsFargoLogo Drawing
        let wellsFargoLogoPath = NSBezierPath()
        wellsFargoLogoPath.move(to: NSPoint(x: bounds.minX + 71.91, y: bounds.maxY - 31.06))
        wellsFargoLogoPath.curve(to: NSPoint(x: bounds.minX + 69.57, y: bounds.maxY - 31.8), controlPoint1: NSPoint(x: bounds.minX + 71.59, y: bounds.maxY - 31.7), controlPoint2: NSPoint(x: bounds.minX + 70.85, y: bounds.maxY - 31.8))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 66.9, y: bounds.maxY - 31.8))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 66.9, y: bounds.maxY - 24.69))
        wellsFargoLogoPath.curve(to: NSPoint(x: bounds.minX + 68.18, y: bounds.maxY - 23.74), controlPoint1: NSPoint(x: bounds.minX + 66.9, y: bounds.maxY - 23.84), controlPoint2: NSPoint(x: bounds.minX + 67.12, y: bounds.maxY - 23.74))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 68.93, y: bounds.maxY - 23.74))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 68.93, y: bounds.maxY - 22.46))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 62.54, y: bounds.maxY - 22.46))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 62.54, y: bounds.maxY - 23.74))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 63.07, y: bounds.maxY - 23.74))
        wellsFargoLogoPath.curve(to: NSPoint(x: bounds.minX + 64.56, y: bounds.maxY - 24.69), controlPoint1: NSPoint(x: bounds.minX + 64.03, y: bounds.maxY - 23.74), controlPoint2: NSPoint(x: bounds.minX + 64.56, y: bounds.maxY - 23.74))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 64.56, y: bounds.maxY - 30.95))
        wellsFargoLogoPath.curve(to: NSPoint(x: bounds.minX + 63.18, y: bounds.maxY - 31.91), controlPoint1: NSPoint(x: bounds.minX + 64.56, y: bounds.maxY - 31.8), controlPoint2: NSPoint(x: bounds.minX + 64.14, y: bounds.maxY - 31.91))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 62.64, y: bounds.maxY - 31.91))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 62.64, y: bounds.maxY - 33.08))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 73.62, y: bounds.maxY - 33.08))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 73.62, y: bounds.maxY - 28.83))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 72.34, y: bounds.maxY - 28.83))
        wellsFargoLogoPath.curve(to: NSPoint(x: bounds.minX + 71.91, y: bounds.maxY - 31.06), controlPoint1: NSPoint(x: bounds.minX + 72.34, y: bounds.maxY - 29.79), controlPoint2: NSPoint(x: bounds.minX + 72.23, y: bounds.maxY - 30.42))
        wellsFargoLogoPath.close()
        wellsFargoLogoPath.move(to: NSPoint(x: bounds.minX + 58.4, y: bounds.maxY - 31.8))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 55.04, y: bounds.maxY - 31.8))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 55.04, y: bounds.maxY - 28.19))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 55.78, y: bounds.maxY - 28.19))
        wellsFargoLogoPath.curve(to: NSPoint(x: bounds.minX + 57.35, y: bounds.maxY - 30.21), controlPoint1: NSPoint(x: bounds.minX + 57.04, y: bounds.maxY - 28.19), controlPoint2: NSPoint(x: bounds.minX + 57.25, y: bounds.maxY - 28.41))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 58.51, y: bounds.maxY - 30.21))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 58.51, y: bounds.maxY - 24.9))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 57.35, y: bounds.maxY - 24.9))
        wellsFargoLogoPath.curve(to: NSPoint(x: bounds.minX + 55.78, y: bounds.maxY - 26.92), controlPoint1: NSPoint(x: bounds.minX + 57.25, y: bounds.maxY - 26.49), controlPoint2: NSPoint(x: bounds.minX + 57.04, y: bounds.maxY - 26.92))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 55.04, y: bounds.maxY - 26.92))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 55.04, y: bounds.maxY - 23.73))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 57.88, y: bounds.maxY - 23.73))
        wellsFargoLogoPath.curve(to: NSPoint(x: bounds.minX + 60.71, y: bounds.maxY - 26.6), controlPoint1: NSPoint(x: bounds.minX + 59.98, y: bounds.maxY - 23.73), controlPoint2: NSPoint(x: bounds.minX + 60.61, y: bounds.maxY - 24.16))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 61.87, y: bounds.maxY - 26.6))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 61.87, y: bounds.maxY - 22.46))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 51.48, y: bounds.maxY - 22.46))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 46.33, y: bounds.maxY - 22.46))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 46.33, y: bounds.maxY - 23.74))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 47.07, y: bounds.maxY - 23.74))
        wellsFargoLogoPath.curve(to: NSPoint(x: bounds.minX + 47.91, y: bounds.maxY - 24.16), controlPoint1: NSPoint(x: bounds.minX + 47.7, y: bounds.maxY - 23.74), controlPoint2: NSPoint(x: bounds.minX + 47.91, y: bounds.maxY - 23.84))
        wellsFargoLogoPath.curve(to: NSPoint(x: bounds.minX + 47.8, y: bounds.maxY - 25.01), controlPoint1: NSPoint(x: bounds.minX + 47.91, y: bounds.maxY - 24.37), controlPoint2: NSPoint(x: bounds.minX + 47.91, y: bounds.maxY - 24.59))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 45.81, y: bounds.maxY - 30.32))
        wellsFargoLogoPath.curve(to: NSPoint(x: bounds.minX + 45.7, y: bounds.maxY - 30.32), controlPoint1: NSPoint(x: bounds.minX + 45.81, y: bounds.maxY - 30.32), controlPoint2: NSPoint(x: bounds.minX + 45.81, y: bounds.maxY - 30.32))
        wellsFargoLogoPath.curve(to: NSPoint(x: bounds.minX + 43.5, y: bounds.maxY - 24.59), controlPoint1: NSPoint(x: bounds.minX + 44.76, y: bounds.maxY - 27.66), controlPoint2: NSPoint(x: bounds.minX + 43.5, y: bounds.maxY - 24.59))
        wellsFargoLogoPath.curve(to: NSPoint(x: bounds.minX + 43.39, y: bounds.maxY - 24.16), controlPoint1: NSPoint(x: bounds.minX + 43.39, y: bounds.maxY - 24.37), controlPoint2: NSPoint(x: bounds.minX + 43.39, y: bounds.maxY - 24.27))
        wellsFargoLogoPath.curve(to: NSPoint(x: bounds.minX + 44.13, y: bounds.maxY - 23.74), controlPoint1: NSPoint(x: bounds.minX + 43.39, y: bounds.maxY - 23.84), controlPoint2: NSPoint(x: bounds.minX + 43.6, y: bounds.maxY - 23.74))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 44.97, y: bounds.maxY - 23.74))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 44.97, y: bounds.maxY - 22.46))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 39.41, y: bounds.maxY - 22.46))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 39.41, y: bounds.maxY - 23.74))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 40.14, y: bounds.maxY - 23.74))
        wellsFargoLogoPath.curve(to: NSPoint(x: bounds.minX + 41.4, y: bounds.maxY - 25.01), controlPoint1: NSPoint(x: bounds.minX + 40.98, y: bounds.maxY - 23.74), controlPoint2: NSPoint(x: bounds.minX + 41.3, y: bounds.maxY - 24.16))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 39.3, y: bounds.maxY - 30.32))
        wellsFargoLogoPath.curve(to: NSPoint(x: bounds.minX + 39.2, y: bounds.maxY - 30.32), controlPoint1: NSPoint(x: bounds.minX + 39.3, y: bounds.maxY - 30.32), controlPoint2: NSPoint(x: bounds.minX + 39.3, y: bounds.maxY - 30.32))
        wellsFargoLogoPath.curve(to: NSPoint(x: bounds.minX + 36.99, y: bounds.maxY - 24.48), controlPoint1: NSPoint(x: bounds.minX + 38.25, y: bounds.maxY - 27.45), controlPoint2: NSPoint(x: bounds.minX + 36.99, y: bounds.maxY - 24.48))
        wellsFargoLogoPath.curve(to: NSPoint(x: bounds.minX + 36.99, y: bounds.maxY - 24.16), controlPoint1: NSPoint(x: bounds.minX + 36.89, y: bounds.maxY - 24.37), controlPoint2: NSPoint(x: bounds.minX + 36.99, y: bounds.maxY - 24.27))
        wellsFargoLogoPath.curve(to: NSPoint(x: bounds.minX + 37.83, y: bounds.maxY - 23.74), controlPoint1: NSPoint(x: bounds.minX + 36.89, y: bounds.maxY - 23.84), controlPoint2: NSPoint(x: bounds.minX + 37.2, y: bounds.maxY - 23.74))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 38.25, y: bounds.maxY - 23.74))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 38.25, y: bounds.maxY - 22.46))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 33, y: bounds.maxY - 22.46))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 33, y: bounds.maxY - 23.74))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 33.21, y: bounds.maxY - 23.74))
        wellsFargoLogoPath.curve(to: NSPoint(x: bounds.minX + 34.89, y: bounds.maxY - 25.12), controlPoint1: NSPoint(x: bounds.minX + 33.95, y: bounds.maxY - 23.74), controlPoint2: NSPoint(x: bounds.minX + 34.57, y: bounds.maxY - 24.16))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 38.04, y: bounds.maxY - 33.08))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 39.93, y: bounds.maxY - 33.08))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 42.24, y: bounds.maxY - 27.24))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 44.65, y: bounds.maxY - 33.08))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 46.54, y: bounds.maxY - 33.08))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 49.48, y: bounds.maxY - 25.01))
        wellsFargoLogoPath.curve(to: NSPoint(x: bounds.minX + 51.05, y: bounds.maxY - 23.73), controlPoint1: NSPoint(x: bounds.minX + 49.9, y: bounds.maxY - 24.05), controlPoint2: NSPoint(x: bounds.minX + 50.11, y: bounds.maxY - 23.73))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 51.16, y: bounds.maxY - 23.73))
        wellsFargoLogoPath.curve(to: NSPoint(x: bounds.minX + 52.63, y: bounds.maxY - 24.69), controlPoint1: NSPoint(x: bounds.minX + 52.1, y: bounds.maxY - 23.73), controlPoint2: NSPoint(x: bounds.minX + 52.63, y: bounds.maxY - 23.73))
        wellsFargoLogoPath.curve(to: NSPoint(x: bounds.minX + 52.63, y: bounds.maxY - 30.95), controlPoint1: NSPoint(x: bounds.minX + 52.63, y: bounds.maxY - 30.95), controlPoint2: NSPoint(x: bounds.minX + 52.63, y: bounds.maxY - 24.69))
        wellsFargoLogoPath.curve(to: NSPoint(x: bounds.minX + 51.16, y: bounds.maxY - 31.91), controlPoint1: NSPoint(x: bounds.minX + 52.63, y: bounds.maxY - 31.8), controlPoint2: NSPoint(x: bounds.minX + 52.1, y: bounds.maxY - 31.91))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 50.53, y: bounds.maxY - 31.91))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 50.53, y: bounds.maxY - 33.08))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 62.08, y: bounds.maxY - 33.08))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 62.08, y: bounds.maxY - 28.83))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 60.82, y: bounds.maxY - 28.83))
        wellsFargoLogoPath.curve(to: NSPoint(x: bounds.minX + 58.4, y: bounds.maxY - 31.8), controlPoint1: NSPoint(x: bounds.minX + 60.71, y: bounds.maxY - 30.96), controlPoint2: NSPoint(x: bounds.minX + 60.29, y: bounds.maxY - 31.8))
        wellsFargoLogoPath.close()
        wellsFargoLogoPath.move(to: NSPoint(x: bounds.minX + 83.88, y: bounds.maxY - 28.83))
        wellsFargoLogoPath.curve(to: NSPoint(x: bounds.minX + 83.45, y: bounds.maxY - 31.06), controlPoint1: NSPoint(x: bounds.minX + 83.88, y: bounds.maxY - 29.79), controlPoint2: NSPoint(x: bounds.minX + 83.77, y: bounds.maxY - 30.42))
        wellsFargoLogoPath.curve(to: NSPoint(x: bounds.minX + 81.11, y: bounds.maxY - 31.8), controlPoint1: NSPoint(x: bounds.minX + 83.13, y: bounds.maxY - 31.7), controlPoint2: NSPoint(x: bounds.minX + 82.39, y: bounds.maxY - 31.8))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 78.55, y: bounds.maxY - 31.8))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 78.55, y: bounds.maxY - 24.69))
        wellsFargoLogoPath.curve(to: NSPoint(x: bounds.minX + 79.72, y: bounds.maxY - 23.74), controlPoint1: NSPoint(x: bounds.minX + 78.55, y: bounds.maxY - 23.84), controlPoint2: NSPoint(x: bounds.minX + 78.76, y: bounds.maxY - 23.74))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 80.57, y: bounds.maxY - 23.74))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 80.57, y: bounds.maxY - 22.46))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 74.08, y: bounds.maxY - 22.46))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 74.08, y: bounds.maxY - 23.74))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 74.82, y: bounds.maxY - 23.74))
        wellsFargoLogoPath.curve(to: NSPoint(x: bounds.minX + 76.1, y: bounds.maxY - 24.69), controlPoint1: NSPoint(x: bounds.minX + 75.68, y: bounds.maxY - 23.74), controlPoint2: NSPoint(x: bounds.minX + 76.1, y: bounds.maxY - 23.74))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 76.1, y: bounds.maxY - 30.95))
        wellsFargoLogoPath.curve(to: NSPoint(x: bounds.minX + 74.82, y: bounds.maxY - 31.91), controlPoint1: NSPoint(x: bounds.minX + 76.1, y: bounds.maxY - 31.8), controlPoint2: NSPoint(x: bounds.minX + 75.78, y: bounds.maxY - 31.91))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 74.61, y: bounds.maxY - 31.91))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 74.61, y: bounds.maxY - 33.08))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 85.15, y: bounds.maxY - 33.08))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 85.15, y: bounds.maxY - 28.83))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 83.88, y: bounds.maxY - 28.83))
        wellsFargoLogoPath.close()
        wellsFargoLogoPath.move(to: NSPoint(x: bounds.minX + 109.39, y: bounds.maxY - 26.6))
        wellsFargoLogoPath.curve(to: NSPoint(x: bounds.minX + 108.98, y: bounds.maxY - 24.37), controlPoint1: NSPoint(x: bounds.minX + 109.39, y: bounds.maxY - 25.75), controlPoint2: NSPoint(x: bounds.minX + 109.29, y: bounds.maxY - 25.01))
        wellsFargoLogoPath.curve(to: NSPoint(x: bounds.minX + 106.69, y: bounds.maxY - 23.73), controlPoint1: NSPoint(x: bounds.minX + 108.56, y: bounds.maxY - 23.84), controlPoint2: NSPoint(x: bounds.minX + 107.83, y: bounds.maxY - 23.73))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 104.09, y: bounds.maxY - 23.73))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 104.09, y: bounds.maxY - 26.92))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 104.92, y: bounds.maxY - 26.92))
        wellsFargoLogoPath.curve(to: NSPoint(x: bounds.minX + 106.38, y: bounds.maxY - 25.01), controlPoint1: NSPoint(x: bounds.minX + 106.17, y: bounds.maxY - 26.92), controlPoint2: NSPoint(x: bounds.minX + 106.38, y: bounds.maxY - 26.6))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 107.42, y: bounds.maxY - 25.01))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 107.42, y: bounds.maxY - 30.32))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 106.38, y: bounds.maxY - 30.32))
        wellsFargoLogoPath.curve(to: NSPoint(x: bounds.minX + 104.92, y: bounds.maxY - 28.09), controlPoint1: NSPoint(x: bounds.minX + 106.38, y: bounds.maxY - 28.51), controlPoint2: NSPoint(x: bounds.minX + 106.17, y: bounds.maxY - 28.09))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 104.09, y: bounds.maxY - 28.09))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 104.09, y: bounds.maxY - 30.85))
        wellsFargoLogoPath.curve(to: NSPoint(x: bounds.minX + 105.13, y: bounds.maxY - 31.8), controlPoint1: NSPoint(x: bounds.minX + 104.09, y: bounds.maxY - 31.8), controlPoint2: NSPoint(x: bounds.minX + 104.19, y: bounds.maxY - 31.8))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 106.27, y: bounds.maxY - 31.8))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 106.27, y: bounds.maxY - 33.08))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 99.92, y: bounds.maxY - 33.08))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 99.92, y: bounds.maxY - 31.8))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 100.55, y: bounds.maxY - 31.8))
        wellsFargoLogoPath.curve(to: NSPoint(x: bounds.minX + 101.69, y: bounds.maxY - 30.85), controlPoint1: NSPoint(x: bounds.minX + 101.38, y: bounds.maxY - 31.8), controlPoint2: NSPoint(x: bounds.minX + 101.69, y: bounds.maxY - 31.7))
        wellsFargoLogoPath.curve(to: NSPoint(x: bounds.minX + 101.69, y: bounds.maxY - 24.58), controlPoint1: NSPoint(x: bounds.minX + 101.69, y: bounds.maxY - 24.58), controlPoint2: NSPoint(x: bounds.minX + 101.69, y: bounds.maxY - 30.85))
        wellsFargoLogoPath.curve(to: NSPoint(x: bounds.minX + 100.55, y: bounds.maxY - 23.63), controlPoint1: NSPoint(x: bounds.minX + 101.69, y: bounds.maxY - 23.73), controlPoint2: NSPoint(x: bounds.minX + 101.38, y: bounds.maxY - 23.63))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 99.92, y: bounds.maxY - 23.63))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 99.92, y: bounds.maxY - 22.46))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 110.54, y: bounds.maxY - 22.46))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 110.54, y: bounds.maxY - 26.6))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 109.39, y: bounds.maxY - 26.6))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 109.39, y: bounds.maxY - 26.6))
        wellsFargoLogoPath.close()
        wellsFargoLogoPath.move(to: NSPoint(x: bounds.minX + 134.08, y: bounds.maxY - 30.28))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 133.13, y: bounds.maxY - 30.28))
        wellsFargoLogoPath.curve(to: NSPoint(x: bounds.minX + 132.49, y: bounds.maxY - 32.02), controlPoint1: NSPoint(x: bounds.minX + 133.13, y: bounds.maxY - 31.48), controlPoint2: NSPoint(x: bounds.minX + 133.13, y: bounds.maxY - 32.02))
        wellsFargoLogoPath.curve(to: NSPoint(x: bounds.minX + 131.86, y: bounds.maxY - 31.04), controlPoint1: NSPoint(x: bounds.minX + 132.18, y: bounds.maxY - 32.02), controlPoint2: NSPoint(x: bounds.minX + 131.86, y: bounds.maxY - 31.69))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 131.86, y: bounds.maxY - 30.5))
        wellsFargoLogoPath.curve(to: NSPoint(x: bounds.minX + 129.64, y: bounds.maxY - 27.78), controlPoint1: NSPoint(x: bounds.minX + 131.75, y: bounds.maxY - 28.98), controlPoint2: NSPoint(x: bounds.minX + 131.44, y: bounds.maxY - 28.33))
        wellsFargoLogoPath.curve(to: NSPoint(x: bounds.minX + 132.81, y: bounds.maxY - 25.07), controlPoint1: NSPoint(x: bounds.minX + 131.65, y: bounds.maxY - 27.57), controlPoint2: NSPoint(x: bounds.minX + 132.81, y: bounds.maxY - 26.59))
        wellsFargoLogoPath.curve(to: NSPoint(x: bounds.minX + 128.9, y: bounds.maxY - 22.46), controlPoint1: NSPoint(x: bounds.minX + 132.81, y: bounds.maxY - 23.22), controlPoint2: NSPoint(x: bounds.minX + 131.54, y: bounds.maxY - 22.46))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 121.62, y: bounds.maxY - 22.46))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 121.62, y: bounds.maxY - 23.66))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 122.46, y: bounds.maxY - 23.66))
        wellsFargoLogoPath.curve(to: NSPoint(x: bounds.minX + 123.52, y: bounds.maxY - 24.63), controlPoint1: NSPoint(x: bounds.minX + 123.41, y: bounds.maxY - 23.66), controlPoint2: NSPoint(x: bounds.minX + 123.52, y: bounds.maxY - 23.77))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 123.52, y: bounds.maxY - 31.04))
        wellsFargoLogoPath.curve(to: NSPoint(x: bounds.minX + 122.46, y: bounds.maxY - 32.02), controlPoint1: NSPoint(x: bounds.minX + 123.52, y: bounds.maxY - 31.8), controlPoint2: NSPoint(x: bounds.minX + 123.09, y: bounds.maxY - 32.02))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 121.72, y: bounds.maxY - 32.02))
        wellsFargoLogoPath.curve(to: NSPoint(x: bounds.minX + 120.45, y: bounds.maxY - 31.04), controlPoint1: NSPoint(x: bounds.minX + 121.09, y: bounds.maxY - 32.02), controlPoint2: NSPoint(x: bounds.minX + 120.77, y: bounds.maxY - 31.8))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 117.07, y: bounds.maxY - 22.46))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 114.54, y: bounds.maxY - 22.46))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 110.95, y: bounds.maxY - 31.04))
        wellsFargoLogoPath.curve(to: NSPoint(x: bounds.minX + 109.58, y: bounds.maxY - 32.02), controlPoint1: NSPoint(x: bounds.minX + 110.63, y: bounds.maxY - 31.8), controlPoint2: NSPoint(x: bounds.minX + 110.42, y: bounds.maxY - 32.02))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 109.15, y: bounds.maxY - 32.02))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 109.15, y: bounds.maxY - 33.32))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 114.65, y: bounds.maxY - 33.32))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 114.65, y: bounds.maxY - 32.02))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 113.48, y: bounds.maxY - 32.02))
        wellsFargoLogoPath.curve(to: NSPoint(x: bounds.minX + 112.64, y: bounds.maxY - 31.69), controlPoint1: NSPoint(x: bounds.minX + 112.96, y: bounds.maxY - 32.02), controlPoint2: NSPoint(x: bounds.minX + 112.64, y: bounds.maxY - 32.02))
        wellsFargoLogoPath.curve(to: NSPoint(x: bounds.minX + 112.85, y: bounds.maxY - 31.15), controlPoint1: NSPoint(x: bounds.minX + 112.64, y: bounds.maxY - 31.58), controlPoint2: NSPoint(x: bounds.minX + 112.74, y: bounds.maxY - 31.37))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 113.38, y: bounds.maxY - 29.85))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 117.39, y: bounds.maxY - 29.85))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 117.92, y: bounds.maxY - 31.04))
        wellsFargoLogoPath.curve(to: NSPoint(x: bounds.minX + 118.02, y: bounds.maxY - 31.58), controlPoint1: NSPoint(x: bounds.minX + 118.02, y: bounds.maxY - 31.26), controlPoint2: NSPoint(x: bounds.minX + 118.02, y: bounds.maxY - 31.48))
        wellsFargoLogoPath.curve(to: NSPoint(x: bounds.minX + 117.18, y: bounds.maxY - 32.02), controlPoint1: NSPoint(x: bounds.minX + 118.02, y: bounds.maxY - 32.02), controlPoint2: NSPoint(x: bounds.minX + 117.71, y: bounds.maxY - 32.02))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 116.02, y: bounds.maxY - 32.02))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 116.02, y: bounds.maxY - 33.32))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 127.95, y: bounds.maxY - 33.32))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 127.95, y: bounds.maxY - 32.02))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 127, y: bounds.maxY - 32.02))
        wellsFargoLogoPath.curve(to: NSPoint(x: bounds.minX + 125.94, y: bounds.maxY - 31.04), controlPoint1: NSPoint(x: bounds.minX + 126.05, y: bounds.maxY - 32.02), controlPoint2: NSPoint(x: bounds.minX + 125.94, y: bounds.maxY - 32.02))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 125.94, y: bounds.maxY - 28.22))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 127, y: bounds.maxY - 28.22))
        wellsFargoLogoPath.curve(to: NSPoint(x: bounds.minX + 129.43, y: bounds.maxY - 30.39), controlPoint1: NSPoint(x: bounds.minX + 128.79, y: bounds.maxY - 28.22), controlPoint2: NSPoint(x: bounds.minX + 129.32, y: bounds.maxY - 28.54))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 129.43, y: bounds.maxY - 31.58))
        wellsFargoLogoPath.curve(to: NSPoint(x: bounds.minX + 131.96, y: bounds.maxY - 33.54), controlPoint1: NSPoint(x: bounds.minX + 129.53, y: bounds.maxY - 33.1), controlPoint2: NSPoint(x: bounds.minX + 130.48, y: bounds.maxY - 33.54))
        wellsFargoLogoPath.curve(to: NSPoint(x: bounds.minX + 134.07, y: bounds.maxY - 30.71), controlPoint1: NSPoint(x: bounds.minX + 133.23, y: bounds.maxY - 33.54), controlPoint2: NSPoint(x: bounds.minX + 134.07, y: bounds.maxY - 32.78))
        wellsFargoLogoPath.curve(to: NSPoint(x: bounds.minX + 134.08, y: bounds.maxY - 30.28), controlPoint1: NSPoint(x: bounds.minX + 134.08, y: bounds.maxY - 30.61), controlPoint2: NSPoint(x: bounds.minX + 134.08, y: bounds.maxY - 30.39))
        wellsFargoLogoPath.close()
        wellsFargoLogoPath.move(to: NSPoint(x: bounds.minX + 113.8, y: bounds.maxY - 28.54))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 115.49, y: bounds.maxY - 24.41))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 117.07, y: bounds.maxY - 28.54))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 113.8, y: bounds.maxY - 28.54))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 113.8, y: bounds.maxY - 28.54))
        wellsFargoLogoPath.close()
        wellsFargoLogoPath.move(to: NSPoint(x: bounds.minX + 128.16, y: bounds.maxY - 26.91))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 125.95, y: bounds.maxY - 27.02))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 125.95, y: bounds.maxY - 23.66))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 128.16, y: bounds.maxY - 23.66))
        wellsFargoLogoPath.curve(to: NSPoint(x: bounds.minX + 130.38, y: bounds.maxY - 25.29), controlPoint1: NSPoint(x: bounds.minX + 129.64, y: bounds.maxY - 23.66), controlPoint2: NSPoint(x: bounds.minX + 130.38, y: bounds.maxY - 24.09))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 130.38, y: bounds.maxY - 25.39))
        wellsFargoLogoPath.curve(to: NSPoint(x: bounds.minX + 128.16, y: bounds.maxY - 26.91), controlPoint1: NSPoint(x: bounds.minX + 130.38, y: bounds.maxY - 26.48), controlPoint2: NSPoint(x: bounds.minX + 129.64, y: bounds.maxY - 26.91))
        wellsFargoLogoPath.close()
        wellsFargoLogoPath.move(to: NSPoint(x: bounds.minX + 143.92, y: bounds.maxY - 26.23))
        wellsFargoLogoPath.curve(to: NSPoint(x: bounds.minX + 140.66, y: bounds.maxY - 23.79), controlPoint1: NSPoint(x: bounds.minX + 143.39, y: bounds.maxY - 24.57), controlPoint2: NSPoint(x: bounds.minX + 142.34, y: bounds.maxY - 23.79))
        wellsFargoLogoPath.curve(to: NSPoint(x: bounds.minX + 137.62, y: bounds.maxY - 28.12), controlPoint1: NSPoint(x: bounds.minX + 138.99, y: bounds.maxY - 23.79), controlPoint2: NSPoint(x: bounds.minX + 137.62, y: bounds.maxY - 25.24))
        wellsFargoLogoPath.curve(to: NSPoint(x: bounds.minX + 140.66, y: bounds.maxY - 32.56), controlPoint1: NSPoint(x: bounds.minX + 137.62, y: bounds.maxY - 31), controlPoint2: NSPoint(x: bounds.minX + 138.67, y: bounds.maxY - 32.45))
        wellsFargoLogoPath.curve(to: NSPoint(x: bounds.minX + 143.29, y: bounds.maxY - 30.56), controlPoint1: NSPoint(x: bounds.minX + 142.03, y: bounds.maxY - 32.56), controlPoint2: NSPoint(x: bounds.minX + 143.29, y: bounds.maxY - 31.78))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 143.29, y: bounds.maxY - 29.89))
        wellsFargoLogoPath.curve(to: NSPoint(x: bounds.minX + 142.13, y: bounds.maxY - 29.12), controlPoint1: NSPoint(x: bounds.minX + 143.29, y: bounds.maxY - 29.12), controlPoint2: NSPoint(x: bounds.minX + 143.18, y: bounds.maxY - 29.12))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 141.61, y: bounds.maxY - 29.12))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 141.61, y: bounds.maxY - 27.9))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 146.54, y: bounds.maxY - 27.9))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 146.54, y: bounds.maxY - 29.12))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 146.12, y: bounds.maxY - 29.12))
        wellsFargoLogoPath.curve(to: NSPoint(x: bounds.minX + 145.28, y: bounds.maxY - 30.01), controlPoint1: NSPoint(x: bounds.minX + 145.39, y: bounds.maxY - 29.12), controlPoint2: NSPoint(x: bounds.minX + 145.28, y: bounds.maxY - 29.12))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 145.28, y: bounds.maxY - 33.67))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 144.34, y: bounds.maxY - 33.67))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 143.81, y: bounds.maxY - 32.78))
        wellsFargoLogoPath.curve(to: NSPoint(x: bounds.minX + 140.24, y: bounds.maxY - 34), controlPoint1: NSPoint(x: bounds.minX + 142.87, y: bounds.maxY - 33.56), controlPoint2: NSPoint(x: bounds.minX + 141.5, y: bounds.maxY - 34))
        wellsFargoLogoPath.curve(to: NSPoint(x: bounds.minX + 136.68, y: bounds.maxY - 32.34), controlPoint1: NSPoint(x: bounds.minX + 138.78, y: bounds.maxY - 34), controlPoint2: NSPoint(x: bounds.minX + 137.62, y: bounds.maxY - 33.44))
        wellsFargoLogoPath.curve(to: NSPoint(x: bounds.minX + 135, y: bounds.maxY - 28.12), controlPoint1: NSPoint(x: bounds.minX + 135.63, y: bounds.maxY - 31.23), controlPoint2: NSPoint(x: bounds.minX + 135, y: bounds.maxY - 29.78))
        wellsFargoLogoPath.curve(to: NSPoint(x: bounds.minX + 136.57, y: bounds.maxY - 23.9), controlPoint1: NSPoint(x: bounds.minX + 135, y: bounds.maxY - 26.34), controlPoint2: NSPoint(x: bounds.minX + 135.52, y: bounds.maxY - 25.01))
        wellsFargoLogoPath.curve(to: NSPoint(x: bounds.minX + 140.35, y: bounds.maxY - 22.46), controlPoint1: NSPoint(x: bounds.minX + 137.52, y: bounds.maxY - 22.9), controlPoint2: NSPoint(x: bounds.minX + 138.88, y: bounds.maxY - 22.46))
        wellsFargoLogoPath.curve(to: NSPoint(x: bounds.minX + 143.6, y: bounds.maxY - 23.68), controlPoint1: NSPoint(x: bounds.minX + 141.5, y: bounds.maxY - 22.46), controlPoint2: NSPoint(x: bounds.minX + 142.87, y: bounds.maxY - 22.79))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 144.12, y: bounds.maxY - 22.46))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 144.96, y: bounds.maxY - 22.46))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 144.96, y: bounds.maxY - 26.23))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 143.92, y: bounds.maxY - 26.23))
        wellsFargoLogoPath.close()
        wellsFargoLogoPath.move(to: NSPoint(x: bounds.minX + 152.82, y: bounds.maxY - 33.54))
        wellsFargoLogoPath.curve(to: NSPoint(x: bounds.minX + 146.54, y: bounds.maxY - 27.95), controlPoint1: NSPoint(x: bounds.minX + 149.31, y: bounds.maxY - 33.54), controlPoint2: NSPoint(x: bounds.minX + 146.54, y: bounds.maxY - 31.39))
        wellsFargoLogoPath.curve(to: NSPoint(x: bounds.minX + 152.82, y: bounds.maxY - 22.46), controlPoint1: NSPoint(x: bounds.minX + 146.54, y: bounds.maxY - 24.61), controlPoint2: NSPoint(x: bounds.minX + 149.31, y: bounds.maxY - 22.46))
        wellsFargoLogoPath.curve(to: NSPoint(x: bounds.minX + 159, y: bounds.maxY - 28.05), controlPoint1: NSPoint(x: bounds.minX + 156.34, y: bounds.maxY - 22.46), controlPoint2: NSPoint(x: bounds.minX + 159, y: bounds.maxY - 24.61))
        wellsFargoLogoPath.curve(to: NSPoint(x: bounds.minX + 152.82, y: bounds.maxY - 33.54), controlPoint1: NSPoint(x: bounds.minX + 159, y: bounds.maxY - 31.39), controlPoint2: NSPoint(x: bounds.minX + 156.34, y: bounds.maxY - 33.54))
        wellsFargoLogoPath.close()
        wellsFargoLogoPath.move(to: NSPoint(x: bounds.minX + 156.44, y: bounds.maxY - 28.05))
        wellsFargoLogoPath.curve(to: NSPoint(x: bounds.minX + 152.82, y: bounds.maxY - 23.75), controlPoint1: NSPoint(x: bounds.minX + 156.44, y: bounds.maxY - 24.18), controlPoint2: NSPoint(x: bounds.minX + 153.89, y: bounds.maxY - 23.75))
        wellsFargoLogoPath.curve(to: NSPoint(x: bounds.minX + 149.2, y: bounds.maxY - 28.05), controlPoint1: NSPoint(x: bounds.minX + 150.8, y: bounds.maxY - 23.75), controlPoint2: NSPoint(x: bounds.minX + 149.2, y: bounds.maxY - 25.26))
        wellsFargoLogoPath.curve(to: NSPoint(x: bounds.minX + 152.82, y: bounds.maxY - 32.36), controlPoint1: NSPoint(x: bounds.minX + 149.2, y: bounds.maxY - 30.85), controlPoint2: NSPoint(x: bounds.minX + 150.8, y: bounds.maxY - 32.36))
        wellsFargoLogoPath.curve(to: NSPoint(x: bounds.minX + 156.44, y: bounds.maxY - 28.05), controlPoint1: NSPoint(x: bounds.minX + 153.89, y: bounds.maxY - 32.36), controlPoint2: NSPoint(x: bounds.minX + 156.44, y: bounds.maxY - 31.82))
        wellsFargoLogoPath.close()
        wellsFargoLogoPath.move(to: NSPoint(x: bounds.minX + 95.77, y: bounds.maxY - 30.1))
        wellsFargoLogoPath.curve(to: NSPoint(x: bounds.minX + 91.02, y: bounds.maxY - 33.54), controlPoint1: NSPoint(x: bounds.minX + 95.77, y: bounds.maxY - 32.65), controlPoint2: NSPoint(x: bounds.minX + 93.83, y: bounds.maxY - 33.54))
        wellsFargoLogoPath.curve(to: NSPoint(x: bounds.minX + 87.24, y: bounds.maxY - 32.21), controlPoint1: NSPoint(x: bounds.minX + 89.29, y: bounds.maxY - 33.54), controlPoint2: NSPoint(x: bounds.minX + 87.56, y: bounds.maxY - 32.54))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 86.81, y: bounds.maxY - 33.32))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 85.73, y: bounds.maxY - 33.32))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 85.73, y: bounds.maxY - 28.88))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 87.02, y: bounds.maxY - 28.88))
        wellsFargoLogoPath.curve(to: NSPoint(x: bounds.minX + 90.69, y: bounds.maxY - 31.99), controlPoint1: NSPoint(x: bounds.minX + 87.35, y: bounds.maxY - 30.99), controlPoint2: NSPoint(x: bounds.minX + 88.75, y: bounds.maxY - 31.87))
        wellsFargoLogoPath.curve(to: NSPoint(x: bounds.minX + 93.72, y: bounds.maxY - 30.43), controlPoint1: NSPoint(x: bounds.minX + 92.42, y: bounds.maxY - 32.1), controlPoint2: NSPoint(x: bounds.minX + 93.61, y: bounds.maxY - 31.65))
        wellsFargoLogoPath.curve(to: NSPoint(x: bounds.minX + 91.13, y: bounds.maxY - 28.88), controlPoint1: NSPoint(x: bounds.minX + 93.93, y: bounds.maxY - 28.99), controlPoint2: NSPoint(x: bounds.minX + 92.42, y: bounds.maxY - 29.1))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 89.29, y: bounds.maxY - 28.55))
        wellsFargoLogoPath.curve(to: NSPoint(x: bounds.minX + 85.62, y: bounds.maxY - 25.33), controlPoint1: NSPoint(x: bounds.minX + 86.59, y: bounds.maxY - 27.99), controlPoint2: NSPoint(x: bounds.minX + 85.62, y: bounds.maxY - 27.21))
        wellsFargoLogoPath.curve(to: NSPoint(x: bounds.minX + 89.72, y: bounds.maxY - 22), controlPoint1: NSPoint(x: bounds.minX + 85.51, y: bounds.maxY - 23.33), controlPoint2: NSPoint(x: bounds.minX + 87.35, y: bounds.maxY - 22))
        wellsFargoLogoPath.curve(to: NSPoint(x: bounds.minX + 93.5, y: bounds.maxY - 23.11), controlPoint1: NSPoint(x: bounds.minX + 90.91, y: bounds.maxY - 22), controlPoint2: NSPoint(x: bounds.minX + 92.42, y: bounds.maxY - 22.22))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 94.04, y: bounds.maxY - 22.22))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 95.01, y: bounds.maxY - 22.22))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 95.01, y: bounds.maxY - 26.11))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 93.83, y: bounds.maxY - 26.11))
        wellsFargoLogoPath.curve(to: NSPoint(x: bounds.minX + 89.72, y: bounds.maxY - 23.33), controlPoint1: NSPoint(x: bounds.minX + 93.61, y: bounds.maxY - 24), controlPoint2: NSPoint(x: bounds.minX + 91.45, y: bounds.maxY - 23.33))
        wellsFargoLogoPath.curve(to: NSPoint(x: bounds.minX + 87.67, y: bounds.maxY - 25), controlPoint1: NSPoint(x: bounds.minX + 88.43, y: bounds.maxY - 23.44), controlPoint2: NSPoint(x: bounds.minX + 87.67, y: bounds.maxY - 24.11))
        wellsFargoLogoPath.curve(to: NSPoint(x: bounds.minX + 89.4, y: bounds.maxY - 26.22), controlPoint1: NSPoint(x: bounds.minX + 87.67, y: bounds.maxY - 25.88), controlPoint2: NSPoint(x: bounds.minX + 88.43, y: bounds.maxY - 26))
        wellsFargoLogoPath.line(to: NSPoint(x: bounds.minX + 91.67, y: bounds.maxY - 26.55))
        wellsFargoLogoPath.curve(to: NSPoint(x: bounds.minX + 95.77, y: bounds.maxY - 30.1), controlPoint1: NSPoint(x: bounds.minX + 94.04, y: bounds.maxY - 26.99), controlPoint2: NSPoint(x: bounds.minX + 95.77, y: bounds.maxY - 27.44))
        wellsFargoLogoPath.close()
        wellsFargoLogoPath.windingRule = .evenOddWindingRule
        wellsFargoLogoFill.setFill()
        wellsFargoLogoPath.fill()
    }

    public static func drawCitiButton(bounds: NSRect = NSRect(x: 0, y: 0, width: 191, height: 56), original: Bool = true, hover: Bool = false, pressed: Bool = false) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext

        //// Color Declarations
        let highlightGradientColor = NSColor(deviceRed: 1, green: 1, blue: 1, alpha: 0.09)
        let highlightGradientColor2 = NSColor(deviceRed: 1, green: 1, blue: 1, alpha: 0)
        let shadow2Color = NSColor(deviceRed: 1, green: 1, blue: 1, alpha: 0.36)
        let logoWhite = NSColor(deviceRed: 1, green: 1, blue: 1, alpha: 1)
        let citiLogoArchFill = NSColor(deviceRed: 0.851, green: 0.149, blue: 0.11, alpha: 1)
        let citiBackground = NSColor(deviceRed: 0, green: 0.259, blue: 0.404, alpha: 1)

        //// Gradient Declarations
        let highlightGradient = NSGradient(starting: highlightGradientColor, ending: highlightGradientColor2)!

        //// Shadow Declarations
        let outerShadow = NSShadow()
        outerShadow.shadowColor = NSColor.black
        outerShadow.shadowOffset = NSSize(width: 0, height: 0)
        outerShadow.shadowBlurRadius = 0.5
        let innerStroke = NSShadow()
        innerStroke.shadowColor = shadow2Color
        innerStroke.shadowOffset = NSSize(width: 0, height: 0)
        innerStroke.shadowBlurRadius = 0.5

        if (original) {
            //// citi
            NSGraphicsContext.saveGraphicsState()
            context.translateBy(x: bounds.minX + 95.5, y: bounds.maxY - 28)

            outerShadow.set()
            context.beginTransparencyLayer(auxiliaryInfo: nil)


            //// citiBase Drawing
            let citiBasePath = NSBezierPath(roundedRect: NSRect(x: -88.5, y: -21, width: 177, height: 42), xRadius: 5, yRadius: 5)
            citiBackground.setFill()
            citiBasePath.fill()


            //// citiHighlight Drawing
            let citiHighlightPath = NSBezierPath(roundedRect: NSRect(x: -88.5, y: -21, width: 177, height: 42), xRadius: 5, yRadius: 5)
            highlightGradient.draw(in: citiHighlightPath, angle: -45)

            ////// citiHighlight Inner Shadow
            NSGraphicsContext.saveGraphicsState()
            NSRectClip(citiHighlightPath.bounds)
            context.setShadow(offset: NSSize.zero, blur: 0, color: nil)

            context.setAlpha(innerStroke.shadowColor!.alphaComponent)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            let citiHighlightOpaqueShadow = NSShadow()
            citiHighlightOpaqueShadow.shadowColor = innerStroke.shadowColor!.withAlphaComponent(1)
            citiHighlightOpaqueShadow.shadowOffset = innerStroke.shadowOffset
            citiHighlightOpaqueShadow.shadowBlurRadius = innerStroke.shadowBlurRadius
            citiHighlightOpaqueShadow.set()

            context.setBlendMode(.sourceOut)
            context.beginTransparencyLayer(auxiliaryInfo: nil)

            citiHighlightOpaqueShadow.shadowColor!.setFill()
            citiHighlightPath.fill()

            context.endTransparencyLayer()
            context.endTransparencyLayer()
            NSGraphicsContext.restoreGraphicsState()



            context.endTransparencyLayer()

            NSGraphicsContext.restoreGraphicsState()
        }


        if (hover) {
            //// citiHover
            NSGraphicsContext.saveGraphicsState()
            context.translateBy(x: bounds.minX + 95.5, y: bounds.maxY - 28)
            context.scaleBy(x: 1.05, y: 1.05)

            outerShadow.set()
            context.beginTransparencyLayer(auxiliaryInfo: nil)


            //// citiBase 2 Drawing
            let citiBase2Path = NSBezierPath(roundedRect: NSRect(x: -88.5, y: -21, width: 177, height: 42), xRadius: 5, yRadius: 5)
            citiBackground.setFill()
            citiBase2Path.fill()


            //// citiHighlight 2 Drawing
            let citiHighlight2Path = NSBezierPath(roundedRect: NSRect(x: -88.5, y: -21, width: 177, height: 42), xRadius: 5, yRadius: 5)
            highlightGradient.draw(in: citiHighlight2Path, angle: -45)

            ////// citiHighlight 2 Inner Shadow
            NSGraphicsContext.saveGraphicsState()
            NSRectClip(citiHighlight2Path.bounds)
            context.setShadow(offset: NSSize.zero, blur: 0, color: nil)

            context.setAlpha(innerStroke.shadowColor!.alphaComponent)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            let citiHighlight2OpaqueShadow = NSShadow()
            citiHighlight2OpaqueShadow.shadowColor = innerStroke.shadowColor!.withAlphaComponent(1)
            citiHighlight2OpaqueShadow.shadowOffset = innerStroke.shadowOffset
            citiHighlight2OpaqueShadow.shadowBlurRadius = innerStroke.shadowBlurRadius
            citiHighlight2OpaqueShadow.set()

            context.setBlendMode(.sourceOut)
            context.beginTransparencyLayer(auxiliaryInfo: nil)

            citiHighlight2OpaqueShadow.shadowColor!.setFill()
            citiHighlight2Path.fill()

            context.endTransparencyLayer()
            context.endTransparencyLayer()
            NSGraphicsContext.restoreGraphicsState()



            context.endTransparencyLayer()

            NSGraphicsContext.restoreGraphicsState()
        }


        if (pressed) {
            //// citiPressed
            NSGraphicsContext.saveGraphicsState()
            context.translateBy(x: bounds.minX + 95.5, y: bounds.maxY - 28)

            outerShadow.set()
            context.beginTransparencyLayer(auxiliaryInfo: nil)


            //// citiBase 3 Drawing
            let citiBase3Path = NSBezierPath(roundedRect: NSRect(x: -88.5, y: -21, width: 177, height: 42), xRadius: 5, yRadius: 5)
            citiBackground.setFill()
            citiBase3Path.fill()


            //// citiHighlight 3 Drawing
            let citiHighlight3Path = NSBezierPath(roundedRect: NSRect(x: -88.5, y: -21, width: 177, height: 42), xRadius: 5, yRadius: 5)
            highlightGradient.draw(in: citiHighlight3Path, angle: -45)

            ////// citiHighlight 3 Inner Shadow
            NSGraphicsContext.saveGraphicsState()
            NSRectClip(citiHighlight3Path.bounds)
            context.setShadow(offset: NSSize.zero, blur: 0, color: nil)

            context.setAlpha(innerStroke.shadowColor!.alphaComponent)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            let citiHighlight3OpaqueShadow = NSShadow()
            citiHighlight3OpaqueShadow.shadowColor = innerStroke.shadowColor!.withAlphaComponent(1)
            citiHighlight3OpaqueShadow.shadowOffset = innerStroke.shadowOffset
            citiHighlight3OpaqueShadow.shadowBlurRadius = innerStroke.shadowBlurRadius
            citiHighlight3OpaqueShadow.set()

            context.setBlendMode(.sourceOut)
            context.beginTransparencyLayer(auxiliaryInfo: nil)

            citiHighlight3OpaqueShadow.shadowColor!.setFill()
            citiHighlight3Path.fill()

            context.endTransparencyLayer()
            context.endTransparencyLayer()
            NSGraphicsContext.restoreGraphicsState()



            context.endTransparencyLayer()

            NSGraphicsContext.restoreGraphicsState()
        }


        //// citiLogo
        //// path1274 Drawing
        let path1274Path = NSBezierPath()
        path1274Path.move(to: NSPoint(x: bounds.minX + 88.51, y: bounds.maxY - 33.12))
        path1274Path.line(to: NSPoint(x: bounds.minX + 88.45, y: bounds.maxY - 33.18))
        path1274Path.curve(to: NSPoint(x: bounds.minX + 85.11, y: bounds.maxY - 34.75), controlPoint1: NSPoint(x: bounds.minX + 87.45, y: bounds.maxY - 34.2), controlPoint2: NSPoint(x: bounds.minX + 86.3, y: bounds.maxY - 34.75))
        path1274Path.curve(to: NSPoint(x: bounds.minX + 80.84, y: bounds.maxY - 30.27), controlPoint1: NSPoint(x: bounds.minX + 82.64, y: bounds.maxY - 34.75), controlPoint2: NSPoint(x: bounds.minX + 80.84, y: bounds.maxY - 32.87))
        path1274Path.curve(to: NSPoint(x: bounds.minX + 85.11, y: bounds.maxY - 25.79), controlPoint1: NSPoint(x: bounds.minX + 80.84, y: bounds.maxY - 27.68), controlPoint2: NSPoint(x: bounds.minX + 82.64, y: bounds.maxY - 25.79))
        path1274Path.curve(to: NSPoint(x: bounds.minX + 88.45, y: bounds.maxY - 27.37), controlPoint1: NSPoint(x: bounds.minX + 86.3, y: bounds.maxY - 25.79), controlPoint2: NSPoint(x: bounds.minX + 87.45, y: bounds.maxY - 26.34))
        path1274Path.line(to: NSPoint(x: bounds.minX + 88.51, y: bounds.maxY - 27.43))
        path1274Path.line(to: NSPoint(x: bounds.minX + 90.1, y: bounds.maxY - 25.48))
        path1274Path.line(to: NSPoint(x: bounds.minX + 90.06, y: bounds.maxY - 25.43))
        path1274Path.curve(to: NSPoint(x: bounds.minX + 85.19, y: bounds.maxY - 23.07), controlPoint1: NSPoint(x: bounds.minX + 88.73, y: bounds.maxY - 23.84), controlPoint2: NSPoint(x: bounds.minX + 87.14, y: bounds.maxY - 23.07))
        path1274Path.curve(to: NSPoint(x: bounds.minX + 80.14, y: bounds.maxY - 24.94), controlPoint1: NSPoint(x: bounds.minX + 83.23, y: bounds.maxY - 23.07), controlPoint2: NSPoint(x: bounds.minX + 81.44, y: bounds.maxY - 23.74))
        path1274Path.curve(to: NSPoint(x: bounds.minX + 78, y: bounds.maxY - 30.27), controlPoint1: NSPoint(x: bounds.minX + 78.74, y: bounds.maxY - 26.25), controlPoint2: NSPoint(x: bounds.minX + 78, y: bounds.maxY - 28.09))
        path1274Path.curve(to: NSPoint(x: bounds.minX + 80.14, y: bounds.maxY - 35.6), controlPoint1: NSPoint(x: bounds.minX + 78, y: bounds.maxY - 32.45), controlPoint2: NSPoint(x: bounds.minX + 78.74, y: bounds.maxY - 34.29))
        path1274Path.curve(to: NSPoint(x: bounds.minX + 85.19, y: bounds.maxY - 37.47), controlPoint1: NSPoint(x: bounds.minX + 81.44, y: bounds.maxY - 36.81), controlPoint2: NSPoint(x: bounds.minX + 83.23, y: bounds.maxY - 37.47))
        path1274Path.curve(to: NSPoint(x: bounds.minX + 90.06, y: bounds.maxY - 35.12), controlPoint1: NSPoint(x: bounds.minX + 87.14, y: bounds.maxY - 37.47), controlPoint2: NSPoint(x: bounds.minX + 88.73, y: bounds.maxY - 36.7))
        path1274Path.line(to: NSPoint(x: bounds.minX + 90.1, y: bounds.maxY - 35.07))
        path1274Path.line(to: NSPoint(x: bounds.minX + 88.51, y: bounds.maxY - 33.12))
        path1274Path.line(to: NSPoint(x: bounds.minX + 88.51, y: bounds.maxY - 33.12))
        path1274Path.close()
        path1274Path.windingRule = .evenOddWindingRule
        logoWhite.setFill()
        path1274Path.fill()


        //// path1276 Drawing
        let path1276Path = NSBezierPath(rect: NSRect(x: bounds.minX + 91.8, y: bounds.minY + bounds.height - 37.48, width: 2.9, height: 13.85))
        logoWhite.setFill()
        path1276Path.fill()


        //// path1278 Drawing
        let path1278Path = NSBezierPath()
        path1278Path.move(to: NSPoint(x: bounds.minX + 105.5, y: bounds.maxY - 34.24))
        path1278Path.curve(to: NSPoint(x: bounds.minX + 103.43, y: bounds.maxY - 34.93), controlPoint1: NSPoint(x: bounds.minX + 104.75, y: bounds.maxY - 34.7), controlPoint2: NSPoint(x: bounds.minX + 104.06, y: bounds.maxY - 34.93))
        path1278Path.curve(to: NSPoint(x: bounds.minX + 102.12, y: bounds.maxY - 33.36), controlPoint1: NSPoint(x: bounds.minX + 102.53, y: bounds.maxY - 34.93), controlPoint2: NSPoint(x: bounds.minX + 102.12, y: bounds.maxY - 34.45))
        path1278Path.line(to: NSPoint(x: bounds.minX + 102.12, y: bounds.maxY - 25.98))
        path1278Path.line(to: NSPoint(x: bounds.minX + 104.97, y: bounds.maxY - 25.98))
        path1278Path.line(to: NSPoint(x: bounds.minX + 104.97, y: bounds.maxY - 23.36))
        path1278Path.line(to: NSPoint(x: bounds.minX + 102.12, y: bounds.maxY - 23.36))
        path1278Path.line(to: NSPoint(x: bounds.minX + 102.12, y: bounds.maxY - 19.03))
        path1278Path.line(to: NSPoint(x: bounds.minX + 99.38, y: bounds.maxY - 20.53))
        path1278Path.line(to: NSPoint(x: bounds.minX + 99.38, y: bounds.maxY - 23.36))
        path1278Path.line(to: NSPoint(x: bounds.minX + 97.02, y: bounds.maxY - 23.36))
        path1278Path.line(to: NSPoint(x: bounds.minX + 97.02, y: bounds.maxY - 25.98))
        path1278Path.line(to: NSPoint(x: bounds.minX + 99.38, y: bounds.maxY - 25.98))
        path1278Path.line(to: NSPoint(x: bounds.minX + 99.38, y: bounds.maxY - 33.83))
        path1278Path.curve(to: NSPoint(x: bounds.minX + 102.48, y: bounds.maxY - 37.47), controlPoint1: NSPoint(x: bounds.minX + 99.38, y: bounds.maxY - 35.97), controlPoint2: NSPoint(x: bounds.minX + 100.62, y: bounds.maxY - 37.44))
        path1278Path.curve(to: NSPoint(x: bounds.minX + 104.96, y: bounds.maxY - 36.84), controlPoint1: NSPoint(x: bounds.minX + 103.74, y: bounds.maxY - 37.5), controlPoint2: NSPoint(x: bounds.minX + 104.5, y: bounds.maxY - 37.12))
        path1278Path.line(to: NSPoint(x: bounds.minX + 104.99, y: bounds.maxY - 36.82))
        path1278Path.line(to: NSPoint(x: bounds.minX + 105.66, y: bounds.maxY - 34.13))
        path1278Path.line(to: NSPoint(x: bounds.minX + 105.5, y: bounds.maxY - 34.24))
        path1278Path.line(to: NSPoint(x: bounds.minX + 105.5, y: bounds.maxY - 34.24))
        path1278Path.close()
        path1278Path.windingRule = .evenOddWindingRule
        logoWhite.setFill()
        path1278Path.fill()


        //// path1280 Drawing
        let path1280Path = NSBezierPath(rect: NSRect(x: bounds.minX + 107.95, y: bounds.minY + bounds.height - 37.48, width: 2.9, height: 13.85))
        logoWhite.setFill()
        path1280Path.fill()


        //// path1284 Drawing
        let path1284Path = NSBezierPath()
        path1284Path.move(to: NSPoint(x: bounds.minX + 111.87, y: bounds.maxY - 20.58))
        path1284Path.curve(to: NSPoint(x: bounds.minX + 100.76, y: bounds.maxY - 15), controlPoint1: NSPoint(x: bounds.minX + 109.32, y: bounds.maxY - 17.09), controlPoint2: NSPoint(x: bounds.minX + 105.08, y: bounds.maxY - 15))
        path1284Path.curve(to: NSPoint(x: bounds.minX + 89.66, y: bounds.maxY - 20.58), controlPoint1: NSPoint(x: bounds.minX + 96.45, y: bounds.maxY - 15), controlPoint2: NSPoint(x: bounds.minX + 92.21, y: bounds.maxY - 17.09))
        path1284Path.line(to: NSPoint(x: bounds.minX + 89.53, y: bounds.maxY - 20.76))
        path1284Path.line(to: NSPoint(x: bounds.minX + 92.74, y: bounds.maxY - 20.76))
        path1284Path.line(to: NSPoint(x: bounds.minX + 92.78, y: bounds.maxY - 20.73))
        path1284Path.curve(to: NSPoint(x: bounds.minX + 100.76, y: bounds.maxY - 17.39), controlPoint1: NSPoint(x: bounds.minX + 94.97, y: bounds.maxY - 18.54), controlPoint2: NSPoint(x: bounds.minX + 97.82, y: bounds.maxY - 17.39))
        path1284Path.curve(to: NSPoint(x: bounds.minX + 108.75, y: bounds.maxY - 20.73), controlPoint1: NSPoint(x: bounds.minX + 103.7, y: bounds.maxY - 17.39), controlPoint2: NSPoint(x: bounds.minX + 106.56, y: bounds.maxY - 18.54))
        path1284Path.line(to: NSPoint(x: bounds.minX + 108.79, y: bounds.maxY - 20.76))
        path1284Path.line(to: NSPoint(x: bounds.minX + 112, y: bounds.maxY - 20.76))
        path1284Path.line(to: NSPoint(x: bounds.minX + 111.87, y: bounds.maxY - 20.58))
        path1284Path.line(to: NSPoint(x: bounds.minX + 111.87, y: bounds.maxY - 20.58))
        path1284Path.close()
        path1284Path.windingRule = .evenOddWindingRule
        citiLogoArchFill.setFill()
        path1284Path.fill()
    }

    public static func drawUsbankButton(bounds: NSRect = NSRect(x: 0, y: 0, width: 191, height: 56), original: Bool = true, hover: Bool = false, pressed: Bool = false) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext

        //// Color Declarations
        let highlightGradientColor = NSColor(deviceRed: 1, green: 1, blue: 1, alpha: 0.09)
        let highlightGradientColor2 = NSColor(deviceRed: 1, green: 1, blue: 1, alpha: 0)
        let shadow2Color = NSColor(deviceRed: 1, green: 1, blue: 1, alpha: 0.36)
        let logoWhite = NSColor(deviceRed: 1, green: 1, blue: 1, alpha: 1)
        let usBankBackground = NSColor(deviceRed: 0.039, green: 0.11, blue: 0.463, alpha: 1)
        let usBankLogoBackgroundFill = NSColor(deviceRed: 0.824, green: 0.169, blue: 0.271, alpha: 1)

        //// Gradient Declarations
        let highlightGradient = NSGradient(starting: highlightGradientColor, ending: highlightGradientColor2)!

        //// Shadow Declarations
        let outerShadow = NSShadow()
        outerShadow.shadowColor = NSColor.black
        outerShadow.shadowOffset = NSSize(width: 0, height: 0)
        outerShadow.shadowBlurRadius = 0.5
        let innerStroke = NSShadow()
        innerStroke.shadowColor = shadow2Color
        innerStroke.shadowOffset = NSSize(width: 0, height: 0)
        innerStroke.shadowBlurRadius = 0.5

        if (original) {
            //// usBank
            NSGraphicsContext.saveGraphicsState()
            context.translateBy(x: bounds.minX + 95.5, y: bounds.maxY - 28)

            outerShadow.set()
            context.beginTransparencyLayer(auxiliaryInfo: nil)


            //// usBankBase Drawing
            let usBankBasePath = NSBezierPath(roundedRect: NSRect(x: -88.5, y: -21, width: 177, height: 42), xRadius: 5, yRadius: 5)
            usBankBackground.setFill()
            usBankBasePath.fill()


            //// usBankHighlight Drawing
            let usBankHighlightPath = NSBezierPath(roundedRect: NSRect(x: -88.5, y: -21, width: 177, height: 42), xRadius: 5, yRadius: 5)
            highlightGradient.draw(in: usBankHighlightPath, angle: -45)

            ////// usBankHighlight Inner Shadow
            NSGraphicsContext.saveGraphicsState()
            NSRectClip(usBankHighlightPath.bounds)
            context.setShadow(offset: NSSize.zero, blur: 0, color: nil)

            context.setAlpha(innerStroke.shadowColor!.alphaComponent)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            let usBankHighlightOpaqueShadow = NSShadow()
            usBankHighlightOpaqueShadow.shadowColor = innerStroke.shadowColor!.withAlphaComponent(1)
            usBankHighlightOpaqueShadow.shadowOffset = innerStroke.shadowOffset
            usBankHighlightOpaqueShadow.shadowBlurRadius = innerStroke.shadowBlurRadius
            usBankHighlightOpaqueShadow.set()

            context.setBlendMode(.sourceOut)
            context.beginTransparencyLayer(auxiliaryInfo: nil)

            usBankHighlightOpaqueShadow.shadowColor!.setFill()
            usBankHighlightPath.fill()

            context.endTransparencyLayer()
            context.endTransparencyLayer()
            NSGraphicsContext.restoreGraphicsState()



            context.endTransparencyLayer()

            NSGraphicsContext.restoreGraphicsState()
        }


        if (hover) {
            //// usBankHover
            NSGraphicsContext.saveGraphicsState()
            context.translateBy(x: bounds.minX + 95.5, y: bounds.maxY - 28)
            context.scaleBy(x: 1.05, y: 1.05)

            outerShadow.set()
            context.beginTransparencyLayer(auxiliaryInfo: nil)


            //// usBankBase 2 Drawing
            let usBankBase2Path = NSBezierPath(roundedRect: NSRect(x: -88.5, y: -21, width: 177, height: 42), xRadius: 5, yRadius: 5)
            usBankBackground.setFill()
            usBankBase2Path.fill()


            //// usBankHighlight 2 Drawing
            let usBankHighlight2Path = NSBezierPath(roundedRect: NSRect(x: -88.5, y: -21, width: 177, height: 42), xRadius: 5, yRadius: 5)
            highlightGradient.draw(in: usBankHighlight2Path, angle: -45)

            ////// usBankHighlight 2 Inner Shadow
            NSGraphicsContext.saveGraphicsState()
            NSRectClip(usBankHighlight2Path.bounds)
            context.setShadow(offset: NSSize.zero, blur: 0, color: nil)

            context.setAlpha(innerStroke.shadowColor!.alphaComponent)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            let usBankHighlight2OpaqueShadow = NSShadow()
            usBankHighlight2OpaqueShadow.shadowColor = innerStroke.shadowColor!.withAlphaComponent(1)
            usBankHighlight2OpaqueShadow.shadowOffset = innerStroke.shadowOffset
            usBankHighlight2OpaqueShadow.shadowBlurRadius = innerStroke.shadowBlurRadius
            usBankHighlight2OpaqueShadow.set()

            context.setBlendMode(.sourceOut)
            context.beginTransparencyLayer(auxiliaryInfo: nil)

            usBankHighlight2OpaqueShadow.shadowColor!.setFill()
            usBankHighlight2Path.fill()

            context.endTransparencyLayer()
            context.endTransparencyLayer()
            NSGraphicsContext.restoreGraphicsState()



            context.endTransparencyLayer()

            NSGraphicsContext.restoreGraphicsState()
        }


        if (pressed) {
            //// usBankPressed
            NSGraphicsContext.saveGraphicsState()
            context.translateBy(x: bounds.minX + 95.5, y: bounds.maxY - 28)

            outerShadow.set()
            context.beginTransparencyLayer(auxiliaryInfo: nil)


            //// usBankBase 3 Drawing
            let usBankBase3Path = NSBezierPath(roundedRect: NSRect(x: -88.5, y: -21, width: 177, height: 42), xRadius: 5, yRadius: 5)
            usBankBackground.setFill()
            usBankBase3Path.fill()


            //// usBankHighlight 3 Drawing
            let usBankHighlight3Path = NSBezierPath(roundedRect: NSRect(x: -88.5, y: -21, width: 177, height: 42), xRadius: 5, yRadius: 5)
            highlightGradient.draw(in: usBankHighlight3Path, angle: -45)

            ////// usBankHighlight 3 Inner Shadow
            NSGraphicsContext.saveGraphicsState()
            NSRectClip(usBankHighlight3Path.bounds)
            context.setShadow(offset: NSSize.zero, blur: 0, color: nil)

            context.setAlpha(innerStroke.shadowColor!.alphaComponent)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            let usBankHighlight3OpaqueShadow = NSShadow()
            usBankHighlight3OpaqueShadow.shadowColor = innerStroke.shadowColor!.withAlphaComponent(1)
            usBankHighlight3OpaqueShadow.shadowOffset = innerStroke.shadowOffset
            usBankHighlight3OpaqueShadow.shadowBlurRadius = innerStroke.shadowBlurRadius
            usBankHighlight3OpaqueShadow.set()

            context.setBlendMode(.sourceOut)
            context.beginTransparencyLayer(auxiliaryInfo: nil)

            usBankHighlight3OpaqueShadow.shadowColor!.setFill()
            usBankHighlight3Path.fill()

            context.endTransparencyLayer()
            context.endTransparencyLayer()
            NSGraphicsContext.restoreGraphicsState()



            context.endTransparencyLayer()

            NSGraphicsContext.restoreGraphicsState()
        }


        //// usBankLogo
        //// Fill-42 Drawing
        let fill42Path = NSBezierPath()
        fill42Path.move(to: NSPoint(x: bounds.minX + 84.4, y: bounds.maxY - 18.02))
        fill42Path.line(to: NSPoint(x: bounds.minX + 88.76, y: bounds.maxY - 18.02))
        fill42Path.line(to: NSPoint(x: bounds.minX + 88.76, y: bounds.maxY - 23.54))
        fill42Path.line(to: NSPoint(x: bounds.minX + 88.83, y: bounds.maxY - 23.54))
        fill42Path.curve(to: NSPoint(x: bounds.minX + 91.94, y: bounds.maxY - 22.02), controlPoint1: NSPoint(x: bounds.minX + 89.49, y: bounds.maxY - 22.6), controlPoint2: NSPoint(x: bounds.minX + 90.66, y: bounds.maxY - 22.02))
        fill42Path.curve(to: NSPoint(x: bounds.minX + 96.84, y: bounds.maxY - 27.97), controlPoint1: NSPoint(x: bounds.minX + 95.79, y: bounds.maxY - 22.02), controlPoint2: NSPoint(x: bounds.minX + 96.84, y: bounds.maxY - 25.25))
        fill42Path.curve(to: NSPoint(x: bounds.minX + 92.06, y: bounds.maxY - 34.06), controlPoint1: NSPoint(x: bounds.minX + 96.84, y: bounds.maxY - 30.84), controlPoint2: NSPoint(x: bounds.minX + 95.28, y: bounds.maxY - 34.06))
        fill42Path.curve(to: NSPoint(x: bounds.minX + 88.68, y: bounds.maxY - 32.51), controlPoint1: NSPoint(x: bounds.minX + 89.92, y: bounds.maxY - 34.06), controlPoint2: NSPoint(x: bounds.minX + 89.22, y: bounds.maxY - 33.25))
        fill42Path.line(to: NSPoint(x: bounds.minX + 88.6, y: bounds.maxY - 32.51))
        fill42Path.line(to: NSPoint(x: bounds.minX + 88.6, y: bounds.maxY - 33.75))
        fill42Path.line(to: NSPoint(x: bounds.minX + 84.4, y: bounds.maxY - 33.75))
        fill42Path.line(to: NSPoint(x: bounds.minX + 84.4, y: bounds.maxY - 18.02))
        fill42Path.line(to: NSPoint(x: bounds.minX + 84.4, y: bounds.maxY - 18.02))
        fill42Path.close()
        fill42Path.move(to: NSPoint(x: bounds.minX + 90.54, y: bounds.maxY - 25.21))
        fill42Path.curve(to: NSPoint(x: bounds.minX + 88.6, y: bounds.maxY - 28), controlPoint1: NSPoint(x: bounds.minX + 88.99, y: bounds.maxY - 25.21), controlPoint2: NSPoint(x: bounds.minX + 88.6, y: bounds.maxY - 26.68))
        fill42Path.curve(to: NSPoint(x: bounds.minX + 90.54, y: bounds.maxY - 30.88), controlPoint1: NSPoint(x: bounds.minX + 88.6, y: bounds.maxY - 29.36), controlPoint2: NSPoint(x: bounds.minX + 88.99, y: bounds.maxY - 30.88))
        fill42Path.curve(to: NSPoint(x: bounds.minX + 92.45, y: bounds.maxY - 28), controlPoint1: NSPoint(x: bounds.minX + 92.1, y: bounds.maxY - 30.88), controlPoint2: NSPoint(x: bounds.minX + 92.45, y: bounds.maxY - 29.36))
        fill42Path.curve(to: NSPoint(x: bounds.minX + 90.54, y: bounds.maxY - 25.21), controlPoint1: NSPoint(x: bounds.minX + 92.45, y: bounds.maxY - 26.68), controlPoint2: NSPoint(x: bounds.minX + 92.1, y: bounds.maxY - 25.21))
        fill42Path.close()
        fill42Path.move(to: NSPoint(x: bounds.minX + 109.03, y: bounds.maxY - 31.19))
        fill42Path.curve(to: NSPoint(x: bounds.minX + 109.54, y: bounds.maxY - 33.75), controlPoint1: NSPoint(x: bounds.minX + 109.03, y: bounds.maxY - 32.08), controlPoint2: NSPoint(x: bounds.minX + 109.07, y: bounds.maxY - 33.02))
        fill42Path.line(to: NSPoint(x: bounds.minX + 105.11, y: bounds.maxY - 33.75))
        fill42Path.curve(to: NSPoint(x: bounds.minX + 104.96, y: bounds.maxY - 32.67), controlPoint1: NSPoint(x: bounds.minX + 105.03, y: bounds.maxY - 33.44), controlPoint2: NSPoint(x: bounds.minX + 104.92, y: bounds.maxY - 32.98))
        fill42Path.line(to: NSPoint(x: bounds.minX + 104.92, y: bounds.maxY - 32.67))
        fill42Path.curve(to: NSPoint(x: bounds.minX + 101.23, y: bounds.maxY - 34.06), controlPoint1: NSPoint(x: bounds.minX + 103.98, y: bounds.maxY - 33.75), controlPoint2: NSPoint(x: bounds.minX + 102.62, y: bounds.maxY - 34.06))
        fill42Path.curve(to: NSPoint(x: bounds.minX + 97.22, y: bounds.maxY - 30.57), controlPoint1: NSPoint(x: bounds.minX + 99.05, y: bounds.maxY - 34.06), controlPoint2: NSPoint(x: bounds.minX + 97.22, y: bounds.maxY - 32.98))
        fill42Path.curve(to: NSPoint(x: bounds.minX + 103.67, y: bounds.maxY - 26.68), controlPoint1: NSPoint(x: bounds.minX + 97.22, y: bounds.maxY - 26.99), controlPoint2: NSPoint(x: bounds.minX + 101.42, y: bounds.maxY - 27.07))
        fill42Path.curve(to: NSPoint(x: bounds.minX + 104.88, y: bounds.maxY - 25.67), controlPoint1: NSPoint(x: bounds.minX + 104.26, y: bounds.maxY - 26.57), controlPoint2: NSPoint(x: bounds.minX + 104.88, y: bounds.maxY - 26.41))
        fill42Path.curve(to: NSPoint(x: bounds.minX + 103.4, y: bounds.maxY - 24.59), controlPoint1: NSPoint(x: bounds.minX + 104.88, y: bounds.maxY - 24.9), controlPoint2: NSPoint(x: bounds.minX + 104.14, y: bounds.maxY - 24.59))
        fill42Path.curve(to: NSPoint(x: bounds.minX + 101.81, y: bounds.maxY - 25.79), controlPoint1: NSPoint(x: bounds.minX + 102.04, y: bounds.maxY - 24.59), controlPoint2: NSPoint(x: bounds.minX + 101.81, y: bounds.maxY - 25.25))
        fill42Path.line(to: NSPoint(x: bounds.minX + 97.73, y: bounds.maxY - 25.79))
        fill42Path.curve(to: NSPoint(x: bounds.minX + 103.63, y: bounds.maxY - 22.02), controlPoint1: NSPoint(x: bounds.minX + 97.85, y: bounds.maxY - 22.57), controlPoint2: NSPoint(x: bounds.minX + 100.92, y: bounds.maxY - 22.02))
        fill42Path.curve(to: NSPoint(x: bounds.minX + 109.03, y: bounds.maxY - 26.53), controlPoint1: NSPoint(x: bounds.minX + 109.07, y: bounds.maxY - 22.02), controlPoint2: NSPoint(x: bounds.minX + 109.03, y: bounds.maxY - 24.27))
        fill42Path.line(to: NSPoint(x: bounds.minX + 109.03, y: bounds.maxY - 31.19))
        fill42Path.close()
        fill42Path.move(to: NSPoint(x: bounds.minX + 104.88, y: bounds.maxY - 28.59))
        fill42Path.curve(to: NSPoint(x: bounds.minX + 103.13, y: bounds.maxY - 29.17), controlPoint1: NSPoint(x: bounds.minX + 104.29, y: bounds.maxY - 28.9), controlPoint2: NSPoint(x: bounds.minX + 103.71, y: bounds.maxY - 29.05))
        fill42Path.curve(to: NSPoint(x: bounds.minX + 101.65, y: bounds.maxY - 30.41), controlPoint1: NSPoint(x: bounds.minX + 102.16, y: bounds.maxY - 29.36), controlPoint2: NSPoint(x: bounds.minX + 101.65, y: bounds.maxY - 29.64))
        fill42Path.curve(to: NSPoint(x: bounds.minX + 102.97, y: bounds.maxY - 31.46), controlPoint1: NSPoint(x: bounds.minX + 101.65, y: bounds.maxY - 30.96), controlPoint2: NSPoint(x: bounds.minX + 102.2, y: bounds.maxY - 31.46))
        fill42Path.curve(to: NSPoint(x: bounds.minX + 104.88, y: bounds.maxY - 29.67), controlPoint1: NSPoint(x: bounds.minX + 103.98, y: bounds.maxY - 31.46), controlPoint2: NSPoint(x: bounds.minX + 104.76, y: bounds.maxY - 30.88))
        fill42Path.line(to: NSPoint(x: bounds.minX + 104.88, y: bounds.maxY - 28.59))
        fill42Path.close()
        fill42Path.move(to: NSPoint(x: bounds.minX + 110.59, y: bounds.maxY - 22.29))
        fill42Path.line(to: NSPoint(x: bounds.minX + 114.82, y: bounds.maxY - 22.29))
        fill42Path.line(to: NSPoint(x: bounds.minX + 114.82, y: bounds.maxY - 23.73))
        fill42Path.line(to: NSPoint(x: bounds.minX + 114.86, y: bounds.maxY - 23.73))
        fill42Path.curve(to: NSPoint(x: bounds.minX + 118.63, y: bounds.maxY - 22.02), controlPoint1: NSPoint(x: bounds.minX + 115.72, y: bounds.maxY - 22.6), controlPoint2: NSPoint(x: bounds.minX + 116.84, y: bounds.maxY - 22.02))
        fill42Path.curve(to: NSPoint(x: bounds.minX + 122.52, y: bounds.maxY - 25.87), controlPoint1: NSPoint(x: bounds.minX + 120.65, y: bounds.maxY - 22.02), controlPoint2: NSPoint(x: bounds.minX + 122.52, y: bounds.maxY - 23.26))
        fill42Path.line(to: NSPoint(x: bounds.minX + 122.52, y: bounds.maxY - 33.75))
        fill42Path.line(to: NSPoint(x: bounds.minX + 118.16, y: bounds.maxY - 33.75))
        fill42Path.line(to: NSPoint(x: bounds.minX + 118.16, y: bounds.maxY - 27.77))
        fill42Path.curve(to: NSPoint(x: bounds.minX + 116.77, y: bounds.maxY - 25.52), controlPoint1: NSPoint(x: bounds.minX + 118.16, y: bounds.maxY - 26.41), controlPoint2: NSPoint(x: bounds.minX + 118.01, y: bounds.maxY - 25.52))
        fill42Path.curve(to: NSPoint(x: bounds.minX + 114.98, y: bounds.maxY - 27.69), controlPoint1: NSPoint(x: bounds.minX + 115.95, y: bounds.maxY - 25.52), controlPoint2: NSPoint(x: bounds.minX + 114.98, y: bounds.maxY - 25.87))
        fill42Path.line(to: NSPoint(x: bounds.minX + 114.98, y: bounds.maxY - 33.75))
        fill42Path.line(to: NSPoint(x: bounds.minX + 110.59, y: bounds.maxY - 33.75))
        fill42Path.line(to: NSPoint(x: bounds.minX + 110.59, y: bounds.maxY - 22.29))
        fill42Path.close()
        fill42Path.move(to: NSPoint(x: bounds.minX + 124.11, y: bounds.maxY - 18.02))
        fill42Path.line(to: NSPoint(x: bounds.minX + 128.46, y: bounds.maxY - 18.02))
        fill42Path.line(to: NSPoint(x: bounds.minX + 128.46, y: bounds.maxY - 25.63))
        fill42Path.line(to: NSPoint(x: bounds.minX + 131.22, y: bounds.maxY - 22.29))
        fill42Path.line(to: NSPoint(x: bounds.minX + 136.19, y: bounds.maxY - 22.29))
        fill42Path.line(to: NSPoint(x: bounds.minX + 132.11, y: bounds.maxY - 26.61))
        fill42Path.line(to: NSPoint(x: bounds.minX + 136.81, y: bounds.maxY - 33.75))
        fill42Path.line(to: NSPoint(x: bounds.minX + 131.57, y: bounds.maxY - 33.75))
        fill42Path.line(to: NSPoint(x: bounds.minX + 129.28, y: bounds.maxY - 29.64))
        fill42Path.line(to: NSPoint(x: bounds.minX + 128.46, y: bounds.maxY - 30.45))
        fill42Path.line(to: NSPoint(x: bounds.minX + 128.46, y: bounds.maxY - 33.75))
        fill42Path.line(to: NSPoint(x: bounds.minX + 124.11, y: bounds.maxY - 33.75))
        fill42Path.line(to: NSPoint(x: bounds.minX + 124.11, y: bounds.maxY - 18.02))
        fill42Path.close()
        fill42Path.windingRule = .evenOddWindingRule
        logoWhite.setFill()
        fill42Path.fill()


        //// Path Drawing
        let pathPath = NSBezierPath()
        pathPath.move(to: NSPoint(x: bounds.minX + 55.27, y: bounds.maxY - 17.98))
        pathPath.line(to: NSPoint(x: bounds.minX + 55.27, y: bounds.maxY - 34.26))
        pathPath.line(to: NSPoint(x: bounds.minX + 69.06, y: bounds.maxY - 38.96))
        pathPath.line(to: NSPoint(x: bounds.minX + 82.89, y: bounds.maxY - 34.26))
        pathPath.line(to: NSPoint(x: bounds.minX + 82.89, y: bounds.maxY - 17.98))
        pathPath.line(to: NSPoint(x: bounds.minX + 55.27, y: bounds.maxY - 17.98))
        pathPath.close()
        pathPath.windingRule = .evenOddWindingRule
        usBankLogoBackgroundFill.setFill()
        pathPath.fill()


        //// Fill-44 Drawing
        let fill44Path = NSBezierPath()
        fill44Path.move(to: NSPoint(x: bounds.minX + 77.18, y: bounds.maxY - 25.63))
        fill44Path.curve(to: NSPoint(x: bounds.minX + 76.67, y: bounds.maxY - 24.78), controlPoint1: NSPoint(x: bounds.minX + 77.14, y: bounds.maxY - 25.25), controlPoint2: NSPoint(x: bounds.minX + 76.98, y: bounds.maxY - 25.01))
        fill44Path.curve(to: NSPoint(x: bounds.minX + 75.7, y: bounds.maxY - 24.43), controlPoint1: NSPoint(x: bounds.minX + 76.4, y: bounds.maxY - 24.55), controlPoint2: NSPoint(x: bounds.minX + 76.05, y: bounds.maxY - 24.43))
        fill44Path.curve(to: NSPoint(x: bounds.minX + 74.38, y: bounds.maxY - 25.32), controlPoint1: NSPoint(x: bounds.minX + 75.12, y: bounds.maxY - 24.43), controlPoint2: NSPoint(x: bounds.minX + 74.38, y: bounds.maxY - 24.59))
        fill44Path.curve(to: NSPoint(x: bounds.minX + 74.89, y: bounds.maxY - 25.94), controlPoint1: NSPoint(x: bounds.minX + 74.38, y: bounds.maxY - 25.67), controlPoint2: NSPoint(x: bounds.minX + 74.65, y: bounds.maxY - 25.83))
        fill44Path.curve(to: NSPoint(x: bounds.minX + 78.77, y: bounds.maxY - 26.84), controlPoint1: NSPoint(x: bounds.minX + 75.62, y: bounds.maxY - 26.26), controlPoint2: NSPoint(x: bounds.minX + 77.29, y: bounds.maxY - 26.29))
        fill44Path.curve(to: NSPoint(x: bounds.minX + 81.45, y: bounds.maxY - 29.99), controlPoint1: NSPoint(x: bounds.minX + 80.17, y: bounds.maxY - 27.3), controlPoint2: NSPoint(x: bounds.minX + 81.45, y: bounds.maxY - 28.12))
        fill44Path.curve(to: NSPoint(x: bounds.minX + 75.62, y: bounds.maxY - 34.06), controlPoint1: NSPoint(x: bounds.minX + 81.45, y: bounds.maxY - 33.17), controlPoint2: NSPoint(x: bounds.minX + 78.46, y: bounds.maxY - 34.06))
        fill44Path.curve(to: NSPoint(x: bounds.minX + 69.91, y: bounds.maxY - 29.99), controlPoint1: NSPoint(x: bounds.minX + 72.91, y: bounds.maxY - 34.06), controlPoint2: NSPoint(x: bounds.minX + 69.99, y: bounds.maxY - 32.98))
        fill44Path.line(to: NSPoint(x: bounds.minX + 74.07, y: bounds.maxY - 29.99))
        fill44Path.curve(to: NSPoint(x: bounds.minX + 74.65, y: bounds.maxY - 31.03), controlPoint1: NSPoint(x: bounds.minX + 74.11, y: bounds.maxY - 30.41), controlPoint2: NSPoint(x: bounds.minX + 74.26, y: bounds.maxY - 30.72))
        fill44Path.curve(to: NSPoint(x: bounds.minX + 75.78, y: bounds.maxY - 31.35), controlPoint1: NSPoint(x: bounds.minX + 74.85, y: bounds.maxY - 31.19), controlPoint2: NSPoint(x: bounds.minX + 75.27, y: bounds.maxY - 31.35))
        fill44Path.curve(to: NSPoint(x: bounds.minX + 77.29, y: bounds.maxY - 30.45), controlPoint1: NSPoint(x: bounds.minX + 76.36, y: bounds.maxY - 31.35), controlPoint2: NSPoint(x: bounds.minX + 77.29, y: bounds.maxY - 31.15))
        fill44Path.curve(to: NSPoint(x: bounds.minX + 74.85, y: bounds.maxY - 29.29), controlPoint1: NSPoint(x: bounds.minX + 77.29, y: bounds.maxY - 29.79), controlPoint2: NSPoint(x: bounds.minX + 76.87, y: bounds.maxY - 29.64))
        fill44Path.curve(to: NSPoint(x: bounds.minX + 70.15, y: bounds.maxY - 25.67), controlPoint1: NSPoint(x: bounds.minX + 71.51, y: bounds.maxY - 28.7), controlPoint2: NSPoint(x: bounds.minX + 70.15, y: bounds.maxY - 27.62))
        fill44Path.curve(to: NSPoint(x: bounds.minX + 75.59, y: bounds.maxY - 22.02), controlPoint1: NSPoint(x: bounds.minX + 70.15, y: bounds.maxY - 22.76), controlPoint2: NSPoint(x: bounds.minX + 73.29, y: bounds.maxY - 22.02))
        fill44Path.curve(to: NSPoint(x: bounds.minX + 81.14, y: bounds.maxY - 25.63), controlPoint1: NSPoint(x: bounds.minX + 78.07, y: bounds.maxY - 22.02), controlPoint2: NSPoint(x: bounds.minX + 81.06, y: bounds.maxY - 22.72))
        fill44Path.line(to: NSPoint(x: bounds.minX + 77.18, y: bounds.maxY - 25.63))
        fill44Path.close()
        fill44Path.windingRule = .evenOddWindingRule
        logoWhite.setFill()
        fill44Path.fill()


        //// Fill-43 Drawing
        let fill43Path = NSBezierPath()
        fill43Path.move(to: NSPoint(x: bounds.minX + 69.02, y: bounds.maxY - 33.75))
        fill43Path.line(to: NSPoint(x: bounds.minX + 64.79, y: bounds.maxY - 33.75))
        fill43Path.line(to: NSPoint(x: bounds.minX + 64.79, y: bounds.maxY - 32.28))
        fill43Path.curve(to: NSPoint(x: bounds.minX + 61.06, y: bounds.maxY - 34.06), controlPoint1: NSPoint(x: bounds.minX + 63.97, y: bounds.maxY - 33.44), controlPoint2: NSPoint(x: bounds.minX + 62.77, y: bounds.maxY - 34.06))
        fill43Path.curve(to: NSPoint(x: bounds.minX + 57.09, y: bounds.maxY - 30.14), controlPoint1: NSPoint(x: bounds.minX + 59, y: bounds.maxY - 34.06), controlPoint2: NSPoint(x: bounds.minX + 57.09, y: bounds.maxY - 32.82))
        fill43Path.line(to: NSPoint(x: bounds.minX + 57.09, y: bounds.maxY - 22.29))
        fill43Path.line(to: NSPoint(x: bounds.minX + 61.44, y: bounds.maxY - 22.29))
        fill43Path.line(to: NSPoint(x: bounds.minX + 61.44, y: bounds.maxY - 28.31))
        fill43Path.curve(to: NSPoint(x: bounds.minX + 62.92, y: bounds.maxY - 30.57), controlPoint1: NSPoint(x: bounds.minX + 61.44, y: bounds.maxY - 29.64), controlPoint2: NSPoint(x: bounds.minX + 61.6, y: bounds.maxY - 30.57))
        fill43Path.curve(to: NSPoint(x: bounds.minX + 64.63, y: bounds.maxY - 28.31), controlPoint1: NSPoint(x: bounds.minX + 63.66, y: bounds.maxY - 30.57), controlPoint2: NSPoint(x: bounds.minX + 64.63, y: bounds.maxY - 30.22))
        fill43Path.line(to: NSPoint(x: bounds.minX + 64.63, y: bounds.maxY - 22.29))
        fill43Path.line(to: NSPoint(x: bounds.minX + 69.02, y: bounds.maxY - 22.29))
        fill43Path.line(to: NSPoint(x: bounds.minX + 69.02, y: bounds.maxY - 33.75))
        fill43Path.close()
        fill43Path.windingRule = .evenOddWindingRule
        logoWhite.setFill()
        fill43Path.fill()
    }

    public static func drawUsaaButton(bounds: NSRect = NSRect(x: 0, y: 0, width: 191, height: 56), original: Bool = true, hover: Bool = false, pressed: Bool = false) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext

        //// Color Declarations
        let highlightGradientColor = NSColor(deviceRed: 1, green: 1, blue: 1, alpha: 0.09)
        let highlightGradientColor2 = NSColor(deviceRed: 1, green: 1, blue: 1, alpha: 0)
        let shadow2Color = NSColor(deviceRed: 1, green: 1, blue: 1, alpha: 0.36)
        let gradientColor3 = NSColor(deviceRed: 0.859, green: 0.859, blue: 0.859, alpha: 1)
        let gradientColor4 = NSColor(deviceRed: 1, green: 1, blue: 1, alpha: 1)
        let usaaLogoShadowColor = NSColor(deviceRed: 1, green: 1, blue: 1, alpha: 0.5)
        let usaaBackground = NSColor(deviceRed: 0.063, green: 0.161, blue: 0.255, alpha: 1)

        //// Gradient Declarations
        let highlightGradient = NSGradient(starting: highlightGradientColor, ending: highlightGradientColor2)!
        let usaaLogoGradient = NSGradient(starting: gradientColor3, ending: gradientColor4)!

        //// Shadow Declarations
        let outerShadow = NSShadow()
        outerShadow.shadowColor = NSColor.black
        outerShadow.shadowOffset = NSSize(width: 0, height: 0)
        outerShadow.shadowBlurRadius = 0.5
        let innerStroke = NSShadow()
        innerStroke.shadowColor = shadow2Color
        innerStroke.shadowOffset = NSSize(width: 0, height: 0)
        innerStroke.shadowBlurRadius = 0.5
        let usaaLogoShadow = NSShadow()
        usaaLogoShadow.shadowColor = usaaLogoShadowColor
        usaaLogoShadow.shadowOffset = NSSize(width: 0, height: -1)
        usaaLogoShadow.shadowBlurRadius = 0

        if (original) {
            //// usaa
            NSGraphicsContext.saveGraphicsState()
            context.translateBy(x: bounds.minX + 95.5, y: bounds.maxY - 28)

            outerShadow.set()
            context.beginTransparencyLayer(auxiliaryInfo: nil)


            //// usaaBase Drawing
            let usaaBasePath = NSBezierPath(roundedRect: NSRect(x: -88.5, y: -21, width: 177, height: 42), xRadius: 5, yRadius: 5)
            usaaBackground.setFill()
            usaaBasePath.fill()


            //// usaaHighlight Drawing
            let usaaHighlightPath = NSBezierPath(roundedRect: NSRect(x: -88.5, y: -21, width: 177, height: 42), xRadius: 5, yRadius: 5)
            highlightGradient.draw(in: usaaHighlightPath, angle: -45)

            ////// usaaHighlight Inner Shadow
            NSGraphicsContext.saveGraphicsState()
            NSRectClip(usaaHighlightPath.bounds)
            context.setShadow(offset: NSSize.zero, blur: 0, color: nil)

            context.setAlpha(innerStroke.shadowColor!.alphaComponent)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            let usaaHighlightOpaqueShadow = NSShadow()
            usaaHighlightOpaqueShadow.shadowColor = innerStroke.shadowColor!.withAlphaComponent(1)
            usaaHighlightOpaqueShadow.shadowOffset = innerStroke.shadowOffset
            usaaHighlightOpaqueShadow.shadowBlurRadius = innerStroke.shadowBlurRadius
            usaaHighlightOpaqueShadow.set()

            context.setBlendMode(.sourceOut)
            context.beginTransparencyLayer(auxiliaryInfo: nil)

            usaaHighlightOpaqueShadow.shadowColor!.setFill()
            usaaHighlightPath.fill()

            context.endTransparencyLayer()
            context.endTransparencyLayer()
            NSGraphicsContext.restoreGraphicsState()



            context.endTransparencyLayer()

            NSGraphicsContext.restoreGraphicsState()
        }


        if (hover) {
            //// usaaHover
            NSGraphicsContext.saveGraphicsState()
            context.translateBy(x: bounds.minX + 95.5, y: bounds.maxY - 28)
            context.scaleBy(x: 1.05, y: 1.05)

            outerShadow.set()
            context.beginTransparencyLayer(auxiliaryInfo: nil)


            //// usaaBase 2 Drawing
            let usaaBase2Path = NSBezierPath(roundedRect: NSRect(x: -88.5, y: -21, width: 177, height: 42), xRadius: 5, yRadius: 5)
            usaaBackground.setFill()
            usaaBase2Path.fill()


            //// usaaHighlight 2 Drawing
            let usaaHighlight2Path = NSBezierPath(roundedRect: NSRect(x: -88.5, y: -21, width: 177, height: 42), xRadius: 5, yRadius: 5)
            highlightGradient.draw(in: usaaHighlight2Path, angle: -45)

            ////// usaaHighlight 2 Inner Shadow
            NSGraphicsContext.saveGraphicsState()
            NSRectClip(usaaHighlight2Path.bounds)
            context.setShadow(offset: NSSize.zero, blur: 0, color: nil)

            context.setAlpha(innerStroke.shadowColor!.alphaComponent)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            let usaaHighlight2OpaqueShadow = NSShadow()
            usaaHighlight2OpaqueShadow.shadowColor = innerStroke.shadowColor!.withAlphaComponent(1)
            usaaHighlight2OpaqueShadow.shadowOffset = innerStroke.shadowOffset
            usaaHighlight2OpaqueShadow.shadowBlurRadius = innerStroke.shadowBlurRadius
            usaaHighlight2OpaqueShadow.set()

            context.setBlendMode(.sourceOut)
            context.beginTransparencyLayer(auxiliaryInfo: nil)

            usaaHighlight2OpaqueShadow.shadowColor!.setFill()
            usaaHighlight2Path.fill()

            context.endTransparencyLayer()
            context.endTransparencyLayer()
            NSGraphicsContext.restoreGraphicsState()



            context.endTransparencyLayer()

            NSGraphicsContext.restoreGraphicsState()
        }


        if (pressed) {
            //// usaaPressed
            NSGraphicsContext.saveGraphicsState()
            context.translateBy(x: bounds.minX + 95.5, y: bounds.maxY - 28)

            outerShadow.set()
            context.beginTransparencyLayer(auxiliaryInfo: nil)


            //// usaaBase 3 Drawing
            let usaaBase3Path = NSBezierPath(roundedRect: NSRect(x: -88.5, y: -21, width: 177, height: 42), xRadius: 5, yRadius: 5)
            usaaBackground.setFill()
            usaaBase3Path.fill()


            //// usaaHighlight 3 Drawing
            let usaaHighlight3Path = NSBezierPath(roundedRect: NSRect(x: -88.5, y: -21, width: 177, height: 42), xRadius: 5, yRadius: 5)
            highlightGradient.draw(in: usaaHighlight3Path, angle: -45)

            ////// usaaHighlight 3 Inner Shadow
            NSGraphicsContext.saveGraphicsState()
            NSRectClip(usaaHighlight3Path.bounds)
            context.setShadow(offset: NSSize.zero, blur: 0, color: nil)

            context.setAlpha(innerStroke.shadowColor!.alphaComponent)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            let usaaHighlight3OpaqueShadow = NSShadow()
            usaaHighlight3OpaqueShadow.shadowColor = innerStroke.shadowColor!.withAlphaComponent(1)
            usaaHighlight3OpaqueShadow.shadowOffset = innerStroke.shadowOffset
            usaaHighlight3OpaqueShadow.shadowBlurRadius = innerStroke.shadowBlurRadius
            usaaHighlight3OpaqueShadow.set()

            context.setBlendMode(.sourceOut)
            context.beginTransparencyLayer(auxiliaryInfo: nil)

            usaaHighlight3OpaqueShadow.shadowColor!.setFill()
            usaaHighlight3Path.fill()

            context.endTransparencyLayer()
            context.endTransparencyLayer()
            NSGraphicsContext.restoreGraphicsState()



            context.endTransparencyLayer()

            NSGraphicsContext.restoreGraphicsState()
        }


        //// usaaLogo Drawing
        let usaaLogoPath = NSBezierPath()
        usaaLogoPath.move(to: NSPoint(x: bounds.minX + 82.06, y: bounds.maxY - 20.41))
        usaaLogoPath.line(to: NSPoint(x: bounds.minX + 82.06, y: bounds.maxY - 30.16))
        usaaLogoPath.curve(to: NSPoint(x: bounds.minX + 88.3, y: bounds.maxY - 36.5), controlPoint1: NSPoint(x: bounds.minX + 82.06, y: bounds.maxY - 35.6), controlPoint2: NSPoint(x: bounds.minX + 85.45, y: bounds.maxY - 36.5))
        usaaLogoPath.curve(to: NSPoint(x: bounds.minX + 94.45, y: bounds.maxY - 30.1), controlPoint1: NSPoint(x: bounds.minX + 92.5, y: bounds.maxY - 36.5), controlPoint2: NSPoint(x: bounds.minX + 94.45, y: bounds.maxY - 33.78))
        usaaLogoPath.line(to: NSPoint(x: bounds.minX + 94.45, y: bounds.maxY - 20.41))
        usaaLogoPath.line(to: NSPoint(x: bounds.minX + 91.66, y: bounds.maxY - 20.41))
        usaaLogoPath.line(to: NSPoint(x: bounds.minX + 91.66, y: bounds.maxY - 30.43))
        usaaLogoPath.curve(to: NSPoint(x: bounds.minX + 88.3, y: bounds.maxY - 34.01), controlPoint1: NSPoint(x: bounds.minX + 91.66, y: bounds.maxY - 31.7), controlPoint2: NSPoint(x: bounds.minX + 91.24, y: bounds.maxY - 34.06))
        usaaLogoPath.curve(to: NSPoint(x: bounds.minX + 85.12, y: bounds.maxY - 30), controlPoint1: NSPoint(x: bounds.minX + 85.62, y: bounds.maxY - 33.97), controlPoint2: NSPoint(x: bounds.minX + 85.12, y: bounds.maxY - 31.55))
        usaaLogoPath.line(to: NSPoint(x: bounds.minX + 85.12, y: bounds.maxY - 20.41))
        usaaLogoPath.line(to: NSPoint(x: bounds.minX + 82.06, y: bounds.maxY - 20.41))
        usaaLogoPath.close()
        usaaLogoPath.move(to: NSPoint(x: bounds.minX + 106.07, y: bounds.maxY - 21.05))
        usaaLogoPath.curve(to: NSPoint(x: bounds.minX + 102.27, y: bounds.maxY - 20.19), controlPoint1: NSPoint(x: bounds.minX + 106.07, y: bounds.maxY - 21.05), controlPoint2: NSPoint(x: bounds.minX + 104.29, y: bounds.maxY - 20.19))
        usaaLogoPath.curve(to: NSPoint(x: bounds.minX + 96.6, y: bounds.maxY - 24.9), controlPoint1: NSPoint(x: bounds.minX + 99.76, y: bounds.maxY - 20.19), controlPoint2: NSPoint(x: bounds.minX + 96.6, y: bounds.maxY - 21.46))
        usaaLogoPath.curve(to: NSPoint(x: bounds.minX + 99.63, y: bounds.maxY - 29.02), controlPoint1: NSPoint(x: bounds.minX + 96.6, y: bounds.maxY - 27.3), controlPoint2: NSPoint(x: bounds.minX + 98.4, y: bounds.maxY - 28.43))
        usaaLogoPath.curve(to: NSPoint(x: bounds.minX + 101.72, y: bounds.maxY - 30.02), controlPoint1: NSPoint(x: bounds.minX + 100.28, y: bounds.maxY - 29.33), controlPoint2: NSPoint(x: bounds.minX + 101.07, y: bounds.maxY - 29.68))
        usaaLogoPath.curve(to: NSPoint(x: bounds.minX + 103.39, y: bounds.maxY - 32.06), controlPoint1: NSPoint(x: bounds.minX + 102.06, y: bounds.maxY - 30.2), controlPoint2: NSPoint(x: bounds.minX + 103.39, y: bounds.maxY - 30.64))
        usaaLogoPath.curve(to: NSPoint(x: bounds.minX + 100.94, y: bounds.maxY - 34.09), controlPoint1: NSPoint(x: bounds.minX + 103.39, y: bounds.maxY - 33.57), controlPoint2: NSPoint(x: bounds.minX + 101.7, y: bounds.maxY - 34.09))
        usaaLogoPath.curve(to: NSPoint(x: bounds.minX + 96.38, y: bounds.maxY - 32.88), controlPoint1: NSPoint(x: bounds.minX + 98.23, y: bounds.maxY - 34.09), controlPoint2: NSPoint(x: bounds.minX + 96.38, y: bounds.maxY - 32.88))
        usaaLogoPath.line(to: NSPoint(x: bounds.minX + 96.67, y: bounds.maxY - 35.92))
        usaaLogoPath.curve(to: NSPoint(x: bounds.minX + 101.09, y: bounds.maxY - 36.47), controlPoint1: NSPoint(x: bounds.minX + 96.67, y: bounds.maxY - 35.92), controlPoint2: NSPoint(x: bounds.minX + 97.77, y: bounds.maxY - 36.47))
        usaaLogoPath.curve(to: NSPoint(x: bounds.minX + 106.54, y: bounds.maxY - 31.73), controlPoint1: NSPoint(x: bounds.minX + 104.26, y: bounds.maxY - 36.46), controlPoint2: NSPoint(x: bounds.minX + 106.54, y: bounds.maxY - 34.47))
        usaaLogoPath.curve(to: NSPoint(x: bounds.minX + 103.81, y: bounds.maxY - 27.78), controlPoint1: NSPoint(x: bounds.minX + 106.54, y: bounds.maxY - 29.62), controlPoint2: NSPoint(x: bounds.minX + 105.07, y: bounds.maxY - 28.37))
        usaaLogoPath.curve(to: NSPoint(x: bounds.minX + 101.39, y: bounds.maxY - 26.65), controlPoint1: NSPoint(x: bounds.minX + 102.83, y: bounds.maxY - 27.3), controlPoint2: NSPoint(x: bounds.minX + 102.25, y: bounds.maxY - 27.04))
        usaaLogoPath.curve(to: NSPoint(x: bounds.minX + 99.65, y: bounds.maxY - 24.5), controlPoint1: NSPoint(x: bounds.minX + 100.53, y: bounds.maxY - 26.25), controlPoint2: NSPoint(x: bounds.minX + 99.65, y: bounds.maxY - 25.57))
        usaaLogoPath.curve(to: NSPoint(x: bounds.minX + 102.27, y: bounds.maxY - 22.55), controlPoint1: NSPoint(x: bounds.minX + 99.65, y: bounds.maxY - 23.37), controlPoint2: NSPoint(x: bounds.minX + 100.71, y: bounds.maxY - 22.55))
        usaaLogoPath.curve(to: NSPoint(x: bounds.minX + 106.07, y: bounds.maxY - 23.89), controlPoint1: NSPoint(x: bounds.minX + 104.58, y: bounds.maxY - 22.55), controlPoint2: NSPoint(x: bounds.minX + 105.51, y: bounds.maxY - 23.57))
        usaaLogoPath.line(to: NSPoint(x: bounds.minX + 106.07, y: bounds.maxY - 21.05))
        usaaLogoPath.close()
        usaaLogoPath.move(to: NSPoint(x: bounds.minX + 128.7, y: bounds.maxY - 20.39))
        usaaLogoPath.line(to: NSPoint(x: bounds.minX + 125.36, y: bounds.maxY - 20.39))
        usaaLogoPath.line(to: NSPoint(x: bounds.minX + 125.9, y: bounds.maxY - 21.71))
        usaaLogoPath.line(to: NSPoint(x: bounds.minX + 120.71, y: bounds.maxY - 35.25))
        usaaLogoPath.line(to: NSPoint(x: bounds.minX + 115.37, y: bounds.maxY - 20.39))
        usaaLogoPath.line(to: NSPoint(x: bounds.minX + 112.03, y: bounds.maxY - 20.39))
        usaaLogoPath.line(to: NSPoint(x: bounds.minX + 112.56, y: bounds.maxY - 21.71))
        usaaLogoPath.line(to: NSPoint(x: bounds.minX + 107.04, y: bounds.maxY - 36.15))
        usaaLogoPath.line(to: NSPoint(x: bounds.minX + 110.05, y: bounds.maxY - 36.15))
        usaaLogoPath.line(to: NSPoint(x: bounds.minX + 111.02, y: bounds.maxY - 33.4))
        usaaLogoPath.line(to: NSPoint(x: bounds.minX + 116.73, y: bounds.maxY - 33.4))
        usaaLogoPath.line(to: NSPoint(x: bounds.minX + 117.69, y: bounds.maxY - 36.15))
        usaaLogoPath.line(to: NSPoint(x: bounds.minX + 123.39, y: bounds.maxY - 36.15))
        usaaLogoPath.line(to: NSPoint(x: bounds.minX + 124.35, y: bounds.maxY - 33.4))
        usaaLogoPath.line(to: NSPoint(x: bounds.minX + 130.07, y: bounds.maxY - 33.4))
        usaaLogoPath.line(to: NSPoint(x: bounds.minX + 131.03, y: bounds.maxY - 36.15))
        usaaLogoPath.line(to: NSPoint(x: bounds.minX + 134.37, y: bounds.maxY - 36.15))
        usaaLogoPath.line(to: NSPoint(x: bounds.minX + 128.7, y: bounds.maxY - 20.39))
        usaaLogoPath.close()
        usaaLogoPath.move(to: NSPoint(x: bounds.minX + 111.77, y: bounds.maxY - 31.26))
        usaaLogoPath.line(to: NSPoint(x: bounds.minX + 113.99, y: bounds.maxY - 25.09))
        usaaLogoPath.line(to: NSPoint(x: bounds.minX + 115.96, y: bounds.maxY - 31.26))
        usaaLogoPath.line(to: NSPoint(x: bounds.minX + 111.77, y: bounds.maxY - 31.26))
        usaaLogoPath.line(to: NSPoint(x: bounds.minX + 111.77, y: bounds.maxY - 31.26))
        usaaLogoPath.close()
        usaaLogoPath.move(to: NSPoint(x: bounds.minX + 125.11, y: bounds.maxY - 31.26))
        usaaLogoPath.line(to: NSPoint(x: bounds.minX + 127.32, y: bounds.maxY - 25.09))
        usaaLogoPath.line(to: NSPoint(x: bounds.minX + 129.3, y: bounds.maxY - 31.26))
        usaaLogoPath.line(to: NSPoint(x: bounds.minX + 125.11, y: bounds.maxY - 31.26))
        usaaLogoPath.close()
        usaaLogoPath.move(to: NSPoint(x: bounds.minX + 55.62, y: bounds.maxY - 29.22))
        usaaLogoPath.line(to: NSPoint(x: bounds.minX + 55.68, y: bounds.maxY - 31.27))
        usaaLogoPath.curve(to: NSPoint(x: bounds.minX + 56.73, y: bounds.maxY - 30.9), controlPoint1: NSPoint(x: bounds.minX + 55.68, y: bounds.maxY - 31.27), controlPoint2: NSPoint(x: bounds.minX + 56.17, y: bounds.maxY - 30.9))
        usaaLogoPath.curve(to: NSPoint(x: bounds.minX + 57.91, y: bounds.maxY - 31.3), controlPoint1: NSPoint(x: bounds.minX + 57.29, y: bounds.maxY - 30.9), controlPoint2: NSPoint(x: bounds.minX + 57.91, y: bounds.maxY - 31.3))
        usaaLogoPath.line(to: NSPoint(x: bounds.minX + 62.89, y: bounds.maxY - 34.25))
        usaaLogoPath.line(to: NSPoint(x: bounds.minX + 63.32, y: bounds.maxY - 32.4))
        usaaLogoPath.line(to: NSPoint(x: bounds.minX + 57.91, y: bounds.maxY - 29.2))
        usaaLogoPath.curve(to: NSPoint(x: bounds.minX + 56.73, y: bounds.maxY - 28.8), controlPoint1: NSPoint(x: bounds.minX + 57.91, y: bounds.maxY - 29.2), controlPoint2: NSPoint(x: bounds.minX + 57.29, y: bounds.maxY - 28.8))
        usaaLogoPath.curve(to: NSPoint(x: bounds.minX + 55.62, y: bounds.maxY - 29.22), controlPoint1: NSPoint(x: bounds.minX + 56.17, y: bounds.maxY - 28.8), controlPoint2: NSPoint(x: bounds.minX + 55.62, y: bounds.maxY - 29.22))
        usaaLogoPath.close()
        usaaLogoPath.move(to: NSPoint(x: bounds.minX + 55.62, y: bounds.maxY - 26.52))
        usaaLogoPath.line(to: NSPoint(x: bounds.minX + 55.68, y: bounds.maxY - 28.57))
        usaaLogoPath.curve(to: NSPoint(x: bounds.minX + 56.73, y: bounds.maxY - 28.2), controlPoint1: NSPoint(x: bounds.minX + 55.68, y: bounds.maxY - 28.57), controlPoint2: NSPoint(x: bounds.minX + 56.17, y: bounds.maxY - 28.2))
        usaaLogoPath.curve(to: NSPoint(x: bounds.minX + 57.91, y: bounds.maxY - 28.6), controlPoint1: NSPoint(x: bounds.minX + 57.29, y: bounds.maxY - 28.2), controlPoint2: NSPoint(x: bounds.minX + 57.91, y: bounds.maxY - 28.6))
        usaaLogoPath.line(to: NSPoint(x: bounds.minX + 63.43, y: bounds.maxY - 31.87))
        usaaLogoPath.line(to: NSPoint(x: bounds.minX + 63.85, y: bounds.maxY - 30.02))
        usaaLogoPath.line(to: NSPoint(x: bounds.minX + 57.91, y: bounds.maxY - 26.5))
        usaaLogoPath.curve(to: NSPoint(x: bounds.minX + 56.73, y: bounds.maxY - 26.1), controlPoint1: NSPoint(x: bounds.minX + 57.91, y: bounds.maxY - 26.5), controlPoint2: NSPoint(x: bounds.minX + 57.29, y: bounds.maxY - 26.1))
        usaaLogoPath.curve(to: NSPoint(x: bounds.minX + 55.62, y: bounds.maxY - 26.52), controlPoint1: NSPoint(x: bounds.minX + 56.17, y: bounds.maxY - 26.1), controlPoint2: NSPoint(x: bounds.minX + 55.62, y: bounds.maxY - 26.52))
        usaaLogoPath.close()
        usaaLogoPath.move(to: NSPoint(x: bounds.minX + 55.62, y: bounds.maxY - 23.85))
        usaaLogoPath.line(to: NSPoint(x: bounds.minX + 55.68, y: bounds.maxY - 25.9))
        usaaLogoPath.curve(to: NSPoint(x: bounds.minX + 56.73, y: bounds.maxY - 25.53), controlPoint1: NSPoint(x: bounds.minX + 55.68, y: bounds.maxY - 25.9), controlPoint2: NSPoint(x: bounds.minX + 56.17, y: bounds.maxY - 25.53))
        usaaLogoPath.curve(to: NSPoint(x: bounds.minX + 57.91, y: bounds.maxY - 25.93), controlPoint1: NSPoint(x: bounds.minX + 57.29, y: bounds.maxY - 25.53), controlPoint2: NSPoint(x: bounds.minX + 57.91, y: bounds.maxY - 25.93))
        usaaLogoPath.line(to: NSPoint(x: bounds.minX + 63.97, y: bounds.maxY - 29.52))
        usaaLogoPath.line(to: NSPoint(x: bounds.minX + 64.39, y: bounds.maxY - 27.66))
        usaaLogoPath.line(to: NSPoint(x: bounds.minX + 57.91, y: bounds.maxY - 23.83))
        usaaLogoPath.curve(to: NSPoint(x: bounds.minX + 56.73, y: bounds.maxY - 23.43), controlPoint1: NSPoint(x: bounds.minX + 57.91, y: bounds.maxY - 23.83), controlPoint2: NSPoint(x: bounds.minX + 57.29, y: bounds.maxY - 23.43))
        usaaLogoPath.curve(to: NSPoint(x: bounds.minX + 55.62, y: bounds.maxY - 23.85), controlPoint1: NSPoint(x: bounds.minX + 56.17, y: bounds.maxY - 23.43), controlPoint2: NSPoint(x: bounds.minX + 55.62, y: bounds.maxY - 23.85))
        usaaLogoPath.close()
        usaaLogoPath.move(to: NSPoint(x: bounds.minX + 66, y: bounds.maxY - 20.6))
        usaaLogoPath.line(to: NSPoint(x: bounds.minX + 66.55, y: bounds.maxY - 23.02))
        usaaLogoPath.line(to: NSPoint(x: bounds.minX + 74.14, y: bounds.maxY - 27.51))
        usaaLogoPath.curve(to: NSPoint(x: bounds.minX + 75.32, y: bounds.maxY - 27.91), controlPoint1: NSPoint(x: bounds.minX + 74.14, y: bounds.maxY - 27.51), controlPoint2: NSPoint(x: bounds.minX + 74.73, y: bounds.maxY - 27.91))
        usaaLogoPath.curve(to: NSPoint(x: bounds.minX + 76.43, y: bounds.maxY - 27.49), controlPoint1: NSPoint(x: bounds.minX + 75.9, y: bounds.maxY - 27.91), controlPoint2: NSPoint(x: bounds.minX + 76.43, y: bounds.maxY - 27.49))
        usaaLogoPath.line(to: NSPoint(x: bounds.minX + 76.37, y: bounds.maxY - 25.44))
        usaaLogoPath.curve(to: NSPoint(x: bounds.minX + 75.32, y: bounds.maxY - 25.81), controlPoint1: NSPoint(x: bounds.minX + 76.37, y: bounds.maxY - 25.44), controlPoint2: NSPoint(x: bounds.minX + 75.9, y: bounds.maxY - 25.81))
        usaaLogoPath.curve(to: NSPoint(x: bounds.minX + 74.14, y: bounds.maxY - 25.41), controlPoint1: NSPoint(x: bounds.minX + 74.74, y: bounds.maxY - 25.81), controlPoint2: NSPoint(x: bounds.minX + 74.14, y: bounds.maxY - 25.41))
        usaaLogoPath.line(to: NSPoint(x: bounds.minX + 68.27, y: bounds.maxY - 21.93))
        usaaLogoPath.line(to: NSPoint(x: bounds.minX + 67.86, y: bounds.maxY - 20.38))
        usaaLogoPath.curve(to: NSPoint(x: bounds.minX + 67.94, y: bounds.maxY - 20.28), controlPoint1: NSPoint(x: bounds.minX + 67.86, y: bounds.maxY - 20.31), controlPoint2: NSPoint(x: bounds.minX + 67.92, y: bounds.maxY - 20.28))
        usaaLogoPath.line(to: NSPoint(x: bounds.minX + 68.94, y: bounds.maxY - 19.96))
        usaaLogoPath.curve(to: NSPoint(x: bounds.minX + 69.15, y: bounds.maxY - 20.18), controlPoint1: NSPoint(x: bounds.minX + 69.07, y: bounds.maxY - 19.96), controlPoint2: NSPoint(x: bounds.minX + 69.15, y: bounds.maxY - 20.08))
        usaaLogoPath.line(to: NSPoint(x: bounds.minX + 69.2, y: bounds.maxY - 20.29))
        usaaLogoPath.curve(to: NSPoint(x: bounds.minX + 69.4, y: bounds.maxY - 20.23), controlPoint1: NSPoint(x: bounds.minX + 69.24, y: bounds.maxY - 20.31), controlPoint2: NSPoint(x: bounds.minX + 69.39, y: bounds.maxY - 20.23))
        usaaLogoPath.line(to: NSPoint(x: bounds.minX + 69.4, y: bounds.maxY - 19.61))
        usaaLogoPath.curve(to: NSPoint(x: bounds.minX + 68.64, y: bounds.maxY - 18.84), controlPoint1: NSPoint(x: bounds.minX + 69.4, y: bounds.maxY - 19.21), controlPoint2: NSPoint(x: bounds.minX + 69.08, y: bounds.maxY - 18.84))
        usaaLogoPath.line(to: NSPoint(x: bounds.minX + 67.65, y: bounds.maxY - 18.84))
        usaaLogoPath.curve(to: NSPoint(x: bounds.minX + 67.08, y: bounds.maxY - 18.5), controlPoint1: NSPoint(x: bounds.minX + 67.65, y: bounds.maxY - 18.84), controlPoint2: NSPoint(x: bounds.minX + 67.5, y: bounds.maxY - 18.5))
        usaaLogoPath.line(to: NSPoint(x: bounds.minX + 65.2, y: bounds.maxY - 18.5))
        usaaLogoPath.curve(to: NSPoint(x: bounds.minX + 64.58, y: bounds.maxY - 18.98), controlPoint1: NSPoint(x: bounds.minX + 64.7, y: bounds.maxY - 18.5), controlPoint2: NSPoint(x: bounds.minX + 64.58, y: bounds.maxY - 18.98))
        usaaLogoPath.line(to: NSPoint(x: bounds.minX + 63.27, y: bounds.maxY - 24.34))
        usaaLogoPath.line(to: NSPoint(x: bounds.minX + 57.91, y: bounds.maxY - 21.17))
        usaaLogoPath.curve(to: NSPoint(x: bounds.minX + 56.73, y: bounds.maxY - 20.76), controlPoint1: NSPoint(x: bounds.minX + 57.91, y: bounds.maxY - 21.17), controlPoint2: NSPoint(x: bounds.minX + 57.33, y: bounds.maxY - 20.76))
        usaaLogoPath.curve(to: NSPoint(x: bounds.minX + 55.62, y: bounds.maxY - 21.18), controlPoint1: NSPoint(x: bounds.minX + 56.13, y: bounds.maxY - 20.76), controlPoint2: NSPoint(x: bounds.minX + 55.62, y: bounds.maxY - 21.18))
        usaaLogoPath.line(to: NSPoint(x: bounds.minX + 55.68, y: bounds.maxY - 23.23))
        usaaLogoPath.curve(to: NSPoint(x: bounds.minX + 56.73, y: bounds.maxY - 22.86), controlPoint1: NSPoint(x: bounds.minX + 55.68, y: bounds.maxY - 23.23), controlPoint2: NSPoint(x: bounds.minX + 56.12, y: bounds.maxY - 22.86))
        usaaLogoPath.curve(to: NSPoint(x: bounds.minX + 57.91, y: bounds.maxY - 23.27), controlPoint1: NSPoint(x: bounds.minX + 57.33, y: bounds.maxY - 22.86), controlPoint2: NSPoint(x: bounds.minX + 57.91, y: bounds.maxY - 23.27))
        usaaLogoPath.line(to: NSPoint(x: bounds.minX + 64.5, y: bounds.maxY - 27.17))
        usaaLogoPath.line(to: NSPoint(x: bounds.minX + 66, y: bounds.maxY - 20.6))
        usaaLogoPath.close()
        usaaLogoPath.move(to: NSPoint(x: bounds.minX + 66.7, y: bounds.maxY - 23.68))
        usaaLogoPath.line(to: NSPoint(x: bounds.minX + 67.26, y: bounds.maxY - 26.11))
        usaaLogoPath.line(to: NSPoint(x: bounds.minX + 74.14, y: bounds.maxY - 30.18))
        usaaLogoPath.curve(to: NSPoint(x: bounds.minX + 75.32, y: bounds.maxY - 30.59), controlPoint1: NSPoint(x: bounds.minX + 74.14, y: bounds.maxY - 30.18), controlPoint2: NSPoint(x: bounds.minX + 74.76, y: bounds.maxY - 30.59))
        usaaLogoPath.curve(to: NSPoint(x: bounds.minX + 76.43, y: bounds.maxY - 30.16), controlPoint1: NSPoint(x: bounds.minX + 75.89, y: bounds.maxY - 30.59), controlPoint2: NSPoint(x: bounds.minX + 76.43, y: bounds.maxY - 30.16))
        usaaLogoPath.line(to: NSPoint(x: bounds.minX + 76.38, y: bounds.maxY - 28.11))
        usaaLogoPath.curve(to: NSPoint(x: bounds.minX + 75.32, y: bounds.maxY - 28.49), controlPoint1: NSPoint(x: bounds.minX + 76.38, y: bounds.maxY - 28.11), controlPoint2: NSPoint(x: bounds.minX + 75.93, y: bounds.maxY - 28.49))
        usaaLogoPath.curve(to: NSPoint(x: bounds.minX + 74.14, y: bounds.maxY - 28.08), controlPoint1: NSPoint(x: bounds.minX + 74.71, y: bounds.maxY - 28.49), controlPoint2: NSPoint(x: bounds.minX + 74.14, y: bounds.maxY - 28.08))
        usaaLogoPath.line(to: NSPoint(x: bounds.minX + 66.7, y: bounds.maxY - 23.68))
        usaaLogoPath.close()
        usaaLogoPath.move(to: NSPoint(x: bounds.minX + 67.39, y: bounds.maxY - 26.76))
        usaaLogoPath.line(to: NSPoint(x: bounds.minX + 67.94, y: bounds.maxY - 29.19))
        usaaLogoPath.line(to: NSPoint(x: bounds.minX + 74.12, y: bounds.maxY - 32.84))
        usaaLogoPath.curve(to: NSPoint(x: bounds.minX + 75.3, y: bounds.maxY - 33.25), controlPoint1: NSPoint(x: bounds.minX + 74.12, y: bounds.maxY - 32.84), controlPoint2: NSPoint(x: bounds.minX + 74.73, y: bounds.maxY - 33.25))
        usaaLogoPath.curve(to: NSPoint(x: bounds.minX + 76.41, y: bounds.maxY - 32.82), controlPoint1: NSPoint(x: bounds.minX + 75.87, y: bounds.maxY - 33.25), controlPoint2: NSPoint(x: bounds.minX + 76.41, y: bounds.maxY - 32.82))
        usaaLogoPath.line(to: NSPoint(x: bounds.minX + 76.35, y: bounds.maxY - 30.78))
        usaaLogoPath.curve(to: NSPoint(x: bounds.minX + 75.3, y: bounds.maxY - 31.15), controlPoint1: NSPoint(x: bounds.minX + 76.35, y: bounds.maxY - 30.78), controlPoint2: NSPoint(x: bounds.minX + 75.91, y: bounds.maxY - 31.15))
        usaaLogoPath.curve(to: NSPoint(x: bounds.minX + 74.12, y: bounds.maxY - 30.74), controlPoint1: NSPoint(x: bounds.minX + 74.69, y: bounds.maxY - 31.15), controlPoint2: NSPoint(x: bounds.minX + 74.12, y: bounds.maxY - 30.74))
        usaaLogoPath.line(to: NSPoint(x: bounds.minX + 67.39, y: bounds.maxY - 26.76))
        usaaLogoPath.close()
        usaaLogoPath.move(to: NSPoint(x: bounds.minX + 68.1, y: bounds.maxY - 29.87))
        usaaLogoPath.line(to: NSPoint(x: bounds.minX + 68.66, y: bounds.maxY - 32.29))
        usaaLogoPath.line(to: NSPoint(x: bounds.minX + 74.12, y: bounds.maxY - 35.53))
        usaaLogoPath.curve(to: NSPoint(x: bounds.minX + 75.31, y: bounds.maxY - 35.94), controlPoint1: NSPoint(x: bounds.minX + 74.12, y: bounds.maxY - 35.53), controlPoint2: NSPoint(x: bounds.minX + 74.74, y: bounds.maxY - 35.94))
        usaaLogoPath.curve(to: NSPoint(x: bounds.minX + 76.42, y: bounds.maxY - 35.51), controlPoint1: NSPoint(x: bounds.minX + 75.87, y: bounds.maxY - 35.94), controlPoint2: NSPoint(x: bounds.minX + 76.42, y: bounds.maxY - 35.51))
        usaaLogoPath.line(to: NSPoint(x: bounds.minX + 76.36, y: bounds.maxY - 33.46))
        usaaLogoPath.curve(to: NSPoint(x: bounds.minX + 75.31, y: bounds.maxY - 33.84), controlPoint1: NSPoint(x: bounds.minX + 76.36, y: bounds.maxY - 33.46), controlPoint2: NSPoint(x: bounds.minX + 75.92, y: bounds.maxY - 33.84))
        usaaLogoPath.curve(to: NSPoint(x: bounds.minX + 74.12, y: bounds.maxY - 33.43), controlPoint1: NSPoint(x: bounds.minX + 74.69, y: bounds.maxY - 33.84), controlPoint2: NSPoint(x: bounds.minX + 74.12, y: bounds.maxY - 33.43))
        usaaLogoPath.line(to: NSPoint(x: bounds.minX + 68.1, y: bounds.maxY - 29.87))
        usaaLogoPath.close()
        usaaLogoPath.windingRule = .evenOddWindingRule
        let usaaLogoBounds: NSRect = usaaLogoPath.bounds
        NSGraphicsContext.saveGraphicsState()
        usaaLogoPath.addClip()
        usaaLogoGradient.draw(from: NSPoint(x: usaaLogoBounds.midX + 0 * usaaLogoBounds.width / 78.75, y: usaaLogoBounds.midY + -9 * usaaLogoBounds.height / 18),
            to: NSPoint(x: usaaLogoBounds.midX + 0 * usaaLogoBounds.width / 78.75, y: usaaLogoBounds.midY + 9 * usaaLogoBounds.height / 18),
            options: [.drawsBeforeStartingLocation, .drawsAfterEndingLocation])
        NSGraphicsContext.restoreGraphicsState()

        ////// usaaLogo Inner Shadow
        NSGraphicsContext.saveGraphicsState()
        NSRectClip(usaaLogoPath.bounds)
        context.setShadow(offset: NSSize.zero, blur: 0, color: nil)

        context.setAlpha(usaaLogoShadow.shadowColor!.alphaComponent)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        let usaaLogoOpaqueShadow = NSShadow()
        usaaLogoOpaqueShadow.shadowColor = usaaLogoShadow.shadowColor!.withAlphaComponent(1)
        usaaLogoOpaqueShadow.shadowOffset = usaaLogoShadow.shadowOffset
        usaaLogoOpaqueShadow.shadowBlurRadius = usaaLogoShadow.shadowBlurRadius
        usaaLogoOpaqueShadow.set()

        context.setBlendMode(.sourceOut)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        usaaLogoOpaqueShadow.shadowColor!.setFill()
        usaaLogoPath.fill()

        context.endTransparencyLayer()
        context.endTransparencyLayer()
        NSGraphicsContext.restoreGraphicsState()
    }

    public static func drawPncButton(bounds: NSRect = NSRect(x: 0, y: 0, width: 191, height: 56), original: Bool = true, hover: Bool = false, pressed: Bool = false) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext

        //// Color Declarations
        let highlightGradientColor = NSColor(deviceRed: 1, green: 1, blue: 1, alpha: 0.09)
        let highlightGradientColor2 = NSColor(deviceRed: 1, green: 1, blue: 1, alpha: 0)
        let shadow2Color = NSColor(deviceRed: 1, green: 1, blue: 1, alpha: 0.36)
        let logoWhite = NSColor(deviceRed: 1, green: 1, blue: 1, alpha: 1)
        let pncBackground = NSColor(deviceRed: 1, green: 0.459, blue: 0, alpha: 1)

        //// Gradient Declarations
        let highlightGradient = NSGradient(starting: highlightGradientColor, ending: highlightGradientColor2)!

        //// Shadow Declarations
        let outerShadow = NSShadow()
        outerShadow.shadowColor = NSColor.black
        outerShadow.shadowOffset = NSSize(width: 0, height: 0)
        outerShadow.shadowBlurRadius = 0.5
        let innerStroke = NSShadow()
        innerStroke.shadowColor = shadow2Color
        innerStroke.shadowOffset = NSSize(width: 0, height: 0)
        innerStroke.shadowBlurRadius = 0.5

        if (original) {
            //// pnc
            NSGraphicsContext.saveGraphicsState()
            context.translateBy(x: bounds.minX + 95.5, y: bounds.maxY - 28)

            outerShadow.set()
            context.beginTransparencyLayer(auxiliaryInfo: nil)


            //// pncBase Drawing
            let pncBasePath = NSBezierPath(roundedRect: NSRect(x: -88.5, y: -21, width: 177, height: 42), xRadius: 5, yRadius: 5)
            pncBackground.setFill()
            pncBasePath.fill()


            //// pncHighlight Drawing
            let pncHighlightPath = NSBezierPath(roundedRect: NSRect(x: -88.5, y: -21, width: 177, height: 42), xRadius: 5, yRadius: 5)
            highlightGradient.draw(in: pncHighlightPath, angle: -45)

            ////// pncHighlight Inner Shadow
            NSGraphicsContext.saveGraphicsState()
            NSRectClip(pncHighlightPath.bounds)
            context.setShadow(offset: NSSize.zero, blur: 0, color: nil)

            context.setAlpha(innerStroke.shadowColor!.alphaComponent)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            let pncHighlightOpaqueShadow = NSShadow()
            pncHighlightOpaqueShadow.shadowColor = innerStroke.shadowColor!.withAlphaComponent(1)
            pncHighlightOpaqueShadow.shadowOffset = innerStroke.shadowOffset
            pncHighlightOpaqueShadow.shadowBlurRadius = innerStroke.shadowBlurRadius
            pncHighlightOpaqueShadow.set()

            context.setBlendMode(.sourceOut)
            context.beginTransparencyLayer(auxiliaryInfo: nil)

            pncHighlightOpaqueShadow.shadowColor!.setFill()
            pncHighlightPath.fill()

            context.endTransparencyLayer()
            context.endTransparencyLayer()
            NSGraphicsContext.restoreGraphicsState()



            context.endTransparencyLayer()

            NSGraphicsContext.restoreGraphicsState()
        }


        if (hover) {
            //// pncHover
            NSGraphicsContext.saveGraphicsState()
            context.translateBy(x: bounds.minX + 95.5, y: bounds.maxY - 28)
            context.scaleBy(x: 1.05, y: 1.05)

            outerShadow.set()
            context.beginTransparencyLayer(auxiliaryInfo: nil)


            //// pncBase 2 Drawing
            let pncBase2Path = NSBezierPath(roundedRect: NSRect(x: -88.5, y: -21, width: 177, height: 42), xRadius: 5, yRadius: 5)
            pncBackground.setFill()
            pncBase2Path.fill()


            //// pncHighlight 2 Drawing
            let pncHighlight2Path = NSBezierPath(roundedRect: NSRect(x: -88.5, y: -21, width: 177, height: 42), xRadius: 5, yRadius: 5)
            highlightGradient.draw(in: pncHighlight2Path, angle: -45)

            ////// pncHighlight 2 Inner Shadow
            NSGraphicsContext.saveGraphicsState()
            NSRectClip(pncHighlight2Path.bounds)
            context.setShadow(offset: NSSize.zero, blur: 0, color: nil)

            context.setAlpha(innerStroke.shadowColor!.alphaComponent)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            let pncHighlight2OpaqueShadow = NSShadow()
            pncHighlight2OpaqueShadow.shadowColor = innerStroke.shadowColor!.withAlphaComponent(1)
            pncHighlight2OpaqueShadow.shadowOffset = innerStroke.shadowOffset
            pncHighlight2OpaqueShadow.shadowBlurRadius = innerStroke.shadowBlurRadius
            pncHighlight2OpaqueShadow.set()

            context.setBlendMode(.sourceOut)
            context.beginTransparencyLayer(auxiliaryInfo: nil)

            pncHighlight2OpaqueShadow.shadowColor!.setFill()
            pncHighlight2Path.fill()

            context.endTransparencyLayer()
            context.endTransparencyLayer()
            NSGraphicsContext.restoreGraphicsState()



            context.endTransparencyLayer()

            NSGraphicsContext.restoreGraphicsState()
        }


        if (pressed) {
            //// pncPressed
            NSGraphicsContext.saveGraphicsState()
            context.translateBy(x: bounds.minX + 95.5, y: bounds.maxY - 28)

            outerShadow.set()
            context.beginTransparencyLayer(auxiliaryInfo: nil)


            //// pncBase 3 Drawing
            let pncBase3Path = NSBezierPath(roundedRect: NSRect(x: -88.5, y: -21, width: 177, height: 42), xRadius: 5, yRadius: 5)
            pncBackground.setFill()
            pncBase3Path.fill()


            //// pncHighlight 3 Drawing
            let pncHighlight3Path = NSBezierPath(roundedRect: NSRect(x: -88.5, y: -21, width: 177, height: 42), xRadius: 5, yRadius: 5)
            highlightGradient.draw(in: pncHighlight3Path, angle: -45)

            ////// pncHighlight 3 Inner Shadow
            NSGraphicsContext.saveGraphicsState()
            NSRectClip(pncHighlight3Path.bounds)
            context.setShadow(offset: NSSize.zero, blur: 0, color: nil)

            context.setAlpha(innerStroke.shadowColor!.alphaComponent)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            let pncHighlight3OpaqueShadow = NSShadow()
            pncHighlight3OpaqueShadow.shadowColor = innerStroke.shadowColor!.withAlphaComponent(1)
            pncHighlight3OpaqueShadow.shadowOffset = innerStroke.shadowOffset
            pncHighlight3OpaqueShadow.shadowBlurRadius = innerStroke.shadowBlurRadius
            pncHighlight3OpaqueShadow.set()

            context.setBlendMode(.sourceOut)
            context.beginTransparencyLayer(auxiliaryInfo: nil)

            pncHighlight3OpaqueShadow.shadowColor!.setFill()
            pncHighlight3Path.fill()

            context.endTransparencyLayer()
            context.endTransparencyLayer()
            NSGraphicsContext.restoreGraphicsState()



            context.endTransparencyLayer()

            NSGraphicsContext.restoreGraphicsState()
        }


        //// pncLogo Drawing
        let pncLogoPath = NSBezierPath()
        pncLogoPath.move(to: NSPoint(x: bounds.minX + 69.83, y: bounds.maxY - 17.8))
        pncLogoPath.curve(to: NSPoint(x: bounds.minX + 59.85, y: bounds.maxY - 27.78), controlPoint1: NSPoint(x: bounds.minX + 64.3, y: bounds.maxY - 17.8), controlPoint2: NSPoint(x: bounds.minX + 59.85, y: bounds.maxY - 22.25))
        pncLogoPath.curve(to: NSPoint(x: bounds.minX + 69.83, y: bounds.maxY - 37.8), controlPoint1: NSPoint(x: bounds.minX + 59.85, y: bounds.maxY - 33.3), controlPoint2: NSPoint(x: bounds.minX + 64.3, y: bounds.maxY - 37.8))
        pncLogoPath.curve(to: NSPoint(x: bounds.minX + 79.85, y: bounds.maxY - 27.78), controlPoint1: NSPoint(x: bounds.minX + 75.35, y: bounds.maxY - 37.8), controlPoint2: NSPoint(x: bounds.minX + 79.85, y: bounds.maxY - 33.3))
        pncLogoPath.curve(to: NSPoint(x: bounds.minX + 69.83, y: bounds.maxY - 17.8), controlPoint1: NSPoint(x: bounds.minX + 79.85, y: bounds.maxY - 22.25), controlPoint2: NSPoint(x: bounds.minX + 75.35, y: bounds.maxY - 17.8))
        pncLogoPath.close()
        pncLogoPath.move(to: NSPoint(x: bounds.minX + 74.79, y: bounds.maxY - 29.18))
        pncLogoPath.line(to: NSPoint(x: bounds.minX + 72.54, y: bounds.maxY - 29.18))
        pncLogoPath.curve(to: NSPoint(x: bounds.minX + 72.4, y: bounds.maxY - 28.24), controlPoint1: NSPoint(x: bounds.minX + 72.64, y: bounds.maxY - 28.95), controlPoint2: NSPoint(x: bounds.minX + 72.59, y: bounds.maxY - 28.62))
        pncLogoPath.line(to: NSPoint(x: bounds.minX + 71.14, y: bounds.maxY - 26.14))
        pncLogoPath.line(to: NSPoint(x: bounds.minX + 69.03, y: bounds.maxY - 22.44))
        pncLogoPath.curve(to: NSPoint(x: bounds.minX + 67.06, y: bounds.maxY - 20.05), controlPoint1: NSPoint(x: bounds.minX + 69.03, y: bounds.maxY - 22.44), controlPoint2: NSPoint(x: bounds.minX + 68.23, y: bounds.maxY - 20.94))
        pncLogoPath.curve(to: NSPoint(x: bounds.minX + 77.27, y: bounds.maxY - 25.86), controlPoint1: NSPoint(x: bounds.minX + 67.81, y: bounds.maxY - 20.33), controlPoint2: NSPoint(x: bounds.minX + 77.27, y: bounds.maxY - 25.86))
        pncLogoPath.curve(to: NSPoint(x: bounds.minX + 74.79, y: bounds.maxY - 29.18), controlPoint1: NSPoint(x: bounds.minX + 78.82, y: bounds.maxY - 26.79), controlPoint2: NSPoint(x: bounds.minX + 80.18, y: bounds.maxY - 29.13))
        pncLogoPath.close()
        pncLogoPath.move(to: NSPoint(x: bounds.minX + 67.67, y: bounds.maxY - 35.13))
        pncLogoPath.curve(to: NSPoint(x: bounds.minX + 66.03, y: bounds.maxY - 31.34), controlPoint1: NSPoint(x: bounds.minX + 66.13, y: bounds.maxY - 36.02), controlPoint2: NSPoint(x: bounds.minX + 63.36, y: bounds.maxY - 36.02))
        pncLogoPath.curve(to: NSPoint(x: bounds.minX + 67.16, y: bounds.maxY - 29.37), controlPoint1: NSPoint(x: bounds.minX + 66.5, y: bounds.maxY - 30.54), controlPoint2: NSPoint(x: bounds.minX + 67.16, y: bounds.maxY - 29.37))
        pncLogoPath.curve(to: NSPoint(x: bounds.minX + 68.05, y: bounds.maxY - 29.74), controlPoint1: NSPoint(x: bounds.minX + 67.34, y: bounds.maxY - 29.6), controlPoint2: NSPoint(x: bounds.minX + 67.63, y: bounds.maxY - 29.74))
        pncLogoPath.line(to: NSPoint(x: bounds.minX + 70.53, y: bounds.maxY - 29.74))
        pncLogoPath.line(to: NSPoint(x: bounds.minX + 74.79, y: bounds.maxY - 29.74))
        pncLogoPath.curve(to: NSPoint(x: bounds.minX + 77.84, y: bounds.maxY - 29.23), controlPoint1: NSPoint(x: bounds.minX + 74.79, y: bounds.maxY - 29.74), controlPoint2: NSPoint(x: bounds.minX + 76.48, y: bounds.maxY - 29.79))
        pncLogoPath.curve(to: NSPoint(x: bounds.minX + 67.67, y: bounds.maxY - 35.13), controlPoint1: NSPoint(x: bounds.minX + 77.23, y: bounds.maxY - 29.7), controlPoint2: NSPoint(x: bounds.minX + 67.67, y: bounds.maxY - 35.13))
        pncLogoPath.close()
        pncLogoPath.move(to: NSPoint(x: bounds.minX + 64.44, y: bounds.maxY - 22.2))
        pncLogoPath.curve(to: NSPoint(x: bounds.minX + 68.56, y: bounds.maxY - 22.67), controlPoint1: NSPoint(x: bounds.minX + 64.44, y: bounds.maxY - 20.42), controlPoint2: NSPoint(x: bounds.minX + 65.85, y: bounds.maxY - 18.03))
        pncLogoPath.curve(to: NSPoint(x: bounds.minX + 69.69, y: bounds.maxY - 24.64), controlPoint1: NSPoint(x: bounds.minX + 69.03, y: bounds.maxY - 23.51), controlPoint2: NSPoint(x: bounds.minX + 69.69, y: bounds.maxY - 24.64))
        pncLogoPath.curve(to: NSPoint(x: bounds.minX + 68.94, y: bounds.maxY - 25.25), controlPoint1: NSPoint(x: bounds.minX + 69.41, y: bounds.maxY - 24.68), controlPoint2: NSPoint(x: bounds.minX + 69.17, y: bounds.maxY - 24.87))
        pncLogoPath.line(to: NSPoint(x: bounds.minX + 67.72, y: bounds.maxY - 27.4))
        pncLogoPath.line(to: NSPoint(x: bounds.minX + 65.56, y: bounds.maxY - 31.06))
        pncLogoPath.curve(to: NSPoint(x: bounds.minX + 64.49, y: bounds.maxY - 34.01), controlPoint1: NSPoint(x: bounds.minX + 65.56, y: bounds.maxY - 31.06), controlPoint2: NSPoint(x: bounds.minX + 64.67, y: bounds.maxY - 32.51))
        pncLogoPath.curve(to: NSPoint(x: bounds.minX + 64.44, y: bounds.maxY - 22.2), controlPoint1: NSPoint(x: bounds.minX + 64.39, y: bounds.maxY - 33.16), controlPoint2: NSPoint(x: bounds.minX + 64.44, y: bounds.maxY - 22.2))
        pncLogoPath.close()
        pncLogoPath.move(to: NSPoint(x: bounds.minX + 87.2, y: bounds.maxY - 35.64))
        pncLogoPath.line(to: NSPoint(x: bounds.minX + 89.72, y: bounds.maxY - 35.64))
        pncLogoPath.line(to: NSPoint(x: bounds.minX + 89.72, y: bounds.maxY - 28.69))
        pncLogoPath.line(to: NSPoint(x: bounds.minX + 91.07, y: bounds.maxY - 28.69))
        pncLogoPath.curve(to: NSPoint(x: bounds.minX + 99.3, y: bounds.maxY - 24.39), controlPoint1: NSPoint(x: bounds.minX + 94.6, y: bounds.maxY - 28.69), controlPoint2: NSPoint(x: bounds.minX + 99.3, y: bounds.maxY - 28.42))
        pncLogoPath.curve(to: NSPoint(x: bounds.minX + 91.35, y: bounds.maxY - 19.99), controlPoint1: NSPoint(x: bounds.minX + 99.3, y: bounds.maxY - 20.31), controlPoint2: NSPoint(x: bounds.minX + 94.88, y: bounds.maxY - 19.99))
        pncLogoPath.line(to: NSPoint(x: bounds.minX + 84.27, y: bounds.maxY - 19.99))
        pncLogoPath.line(to: NSPoint(x: bounds.minX + 84.27, y: bounds.maxY - 20.4))
        pncLogoPath.curve(to: NSPoint(x: bounds.minX + 87.2, y: bounds.maxY - 22.49), controlPoint1: NSPoint(x: bounds.minX + 86.79, y: bounds.maxY - 20.68), controlPoint2: NSPoint(x: bounds.minX + 87.2, y: bounds.maxY - 21.05))
        pncLogoPath.line(to: NSPoint(x: bounds.minX + 87.2, y: bounds.maxY - 35.64))
        pncLogoPath.close()
        pncLogoPath.move(to: NSPoint(x: bounds.minX + 89.72, y: bounds.maxY - 22.49))
        pncLogoPath.curve(to: NSPoint(x: bounds.minX + 92.23, y: bounds.maxY - 20.91), controlPoint1: NSPoint(x: bounds.minX + 89.72, y: bounds.maxY - 21.1), controlPoint2: NSPoint(x: bounds.minX + 89.86, y: bounds.maxY - 20.91))
        pncLogoPath.curve(to: NSPoint(x: bounds.minX + 96.42, y: bounds.maxY - 24.39), controlPoint1: NSPoint(x: bounds.minX + 94.83, y: bounds.maxY - 20.91), controlPoint2: NSPoint(x: bounds.minX + 96.42, y: bounds.maxY - 22.07))
        pncLogoPath.curve(to: NSPoint(x: bounds.minX + 90.97, y: bounds.maxY - 27.81), controlPoint1: NSPoint(x: bounds.minX + 96.42, y: bounds.maxY - 27.4), controlPoint2: NSPoint(x: bounds.minX + 93.72, y: bounds.maxY - 27.81))
        pncLogoPath.line(to: NSPoint(x: bounds.minX + 89.72, y: bounds.maxY - 27.81))
        pncLogoPath.line(to: NSPoint(x: bounds.minX + 89.72, y: bounds.maxY - 22.49))
        pncLogoPath.close()
        pncLogoPath.move(to: NSPoint(x: bounds.minX + 102, y: bounds.maxY - 22.76))
        pncLogoPath.curve(to: NSPoint(x: bounds.minX + 99.07, y: bounds.maxY - 20.4), controlPoint1: NSPoint(x: bounds.minX + 102, y: bounds.maxY - 20.87), controlPoint2: NSPoint(x: bounds.minX + 101.58, y: bounds.maxY - 20.73))
        pncLogoPath.line(to: NSPoint(x: bounds.minX + 99.07, y: bounds.maxY - 19.99))
        pncLogoPath.line(to: NSPoint(x: bounds.minX + 104.93, y: bounds.maxY - 19.99))
        pncLogoPath.line(to: NSPoint(x: bounds.minX + 114.09, y: bounds.maxY - 32.72))
        pncLogoPath.line(to: NSPoint(x: bounds.minX + 114.14, y: bounds.maxY - 32.72))
        pncLogoPath.line(to: NSPoint(x: bounds.minX + 114.14, y: bounds.maxY - 19.99))
        pncLogoPath.line(to: NSPoint(x: bounds.minX + 115.68, y: bounds.maxY - 19.99))
        pncLogoPath.line(to: NSPoint(x: bounds.minX + 115.68, y: bounds.maxY - 35.64))
        pncLogoPath.line(to: NSPoint(x: bounds.minX + 113.44, y: bounds.maxY - 35.64))
        pncLogoPath.line(to: NSPoint(x: bounds.minX + 103.58, y: bounds.maxY - 22.02))
        pncLogoPath.line(to: NSPoint(x: bounds.minX + 103.53, y: bounds.maxY - 22.02))
        pncLogoPath.line(to: NSPoint(x: bounds.minX + 103.53, y: bounds.maxY - 35.64))
        pncLogoPath.line(to: NSPoint(x: bounds.minX + 102, y: bounds.maxY - 35.64))
        pncLogoPath.line(to: NSPoint(x: bounds.minX + 102, y: bounds.maxY - 22.76))
        pncLogoPath.close()
        pncLogoPath.move(to: NSPoint(x: bounds.minX + 132.14, y: bounds.maxY - 35.23))
        pncLogoPath.curve(to: NSPoint(x: bounds.minX + 126.65, y: bounds.maxY - 35.87), controlPoint1: NSPoint(x: bounds.minX + 130.75, y: bounds.maxY - 35.6), controlPoint2: NSPoint(x: bounds.minX + 129.4, y: bounds.maxY - 35.87))
        pncLogoPath.curve(to: NSPoint(x: bounds.minX + 118.19, y: bounds.maxY - 27.3), controlPoint1: NSPoint(x: bounds.minX + 121.17, y: bounds.maxY - 35.87), controlPoint2: NSPoint(x: bounds.minX + 118.19, y: bounds.maxY - 32.03))
        pncLogoPath.curve(to: NSPoint(x: bounds.minX + 125.96, y: bounds.maxY - 19.75), controlPoint1: NSPoint(x: bounds.minX + 118.19, y: bounds.maxY - 23.09), controlPoint2: NSPoint(x: bounds.minX + 119.96, y: bounds.maxY - 19.75))
        pncLogoPath.curve(to: NSPoint(x: bounds.minX + 132.14, y: bounds.maxY - 23.18), controlPoint1: NSPoint(x: bounds.minX + 130.38, y: bounds.maxY - 19.75), controlPoint2: NSPoint(x: bounds.minX + 131.96, y: bounds.maxY - 21.61))
        pncLogoPath.line(to: NSPoint(x: bounds.minX + 129.31, y: bounds.maxY - 23.18))
        pncLogoPath.curve(to: NSPoint(x: bounds.minX + 125.77, y: bounds.maxY - 20.82), controlPoint1: NSPoint(x: bounds.minX + 129.17, y: bounds.maxY - 22.44), controlPoint2: NSPoint(x: bounds.minX + 128.66, y: bounds.maxY - 20.82))
        pncLogoPath.curve(to: NSPoint(x: bounds.minX + 121.03, y: bounds.maxY - 26.7), controlPoint1: NSPoint(x: bounds.minX + 122.65, y: bounds.maxY - 20.82), controlPoint2: NSPoint(x: bounds.minX + 121.03, y: bounds.maxY - 23.14))
        pncLogoPath.curve(to: NSPoint(x: bounds.minX + 128.28, y: bounds.maxY - 34.85), controlPoint1: NSPoint(x: bounds.minX + 121.03, y: bounds.maxY - 29.99), controlPoint2: NSPoint(x: bounds.minX + 121.86, y: bounds.maxY - 34.85))
        pncLogoPath.curve(to: NSPoint(x: bounds.minX + 132.14, y: bounds.maxY - 34.25), controlPoint1: NSPoint(x: bounds.minX + 130, y: bounds.maxY - 34.85), controlPoint2: NSPoint(x: bounds.minX + 131.82, y: bounds.maxY - 34.35))
        pncLogoPath.line(to: NSPoint(x: bounds.minX + 132.14, y: bounds.maxY - 35.23))
        pncLogoPath.close()
        pncLogoPath.windingRule = .evenOddWindingRule
        logoWhite.setFill()
        pncLogoPath.fill()
    }

    public static func drawSchwabButton(bounds: NSRect = NSRect(x: 0, y: 0, width: 191, height: 56), original: Bool = true, hover: Bool = false, pressed: Bool = false) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext

        //// Color Declarations
        let highlightGradientColor = NSColor(deviceRed: 1, green: 1, blue: 1, alpha: 0.09)
        let highlightGradientColor2 = NSColor(deviceRed: 1, green: 1, blue: 1, alpha: 0)
        let shadow2Color = NSColor(deviceRed: 1, green: 1, blue: 1, alpha: 0.36)
        let logoWhite = NSColor(deviceRed: 1, green: 1, blue: 1, alpha: 1)
        let charlesSchwabBackground = NSColor(deviceRed: 0, green: 0.624, blue: 0.843, alpha: 1)

        //// Gradient Declarations
        let highlightGradient = NSGradient(starting: highlightGradientColor, ending: highlightGradientColor2)!

        //// Shadow Declarations
        let outerShadow = NSShadow()
        outerShadow.shadowColor = NSColor.black
        outerShadow.shadowOffset = NSSize(width: 0, height: 0)
        outerShadow.shadowBlurRadius = 0.5
        let innerStroke = NSShadow()
        innerStroke.shadowColor = shadow2Color
        innerStroke.shadowOffset = NSSize(width: 0, height: 0)
        innerStroke.shadowBlurRadius = 0.5

        if (original) {
            //// charlesSchwab
            NSGraphicsContext.saveGraphicsState()
            context.translateBy(x: bounds.minX + 95.5, y: bounds.maxY - 28)

            outerShadow.set()
            context.beginTransparencyLayer(auxiliaryInfo: nil)


            //// charlesSchwabBase Drawing
            let charlesSchwabBasePath = NSBezierPath(roundedRect: NSRect(x: -88.5, y: -21, width: 177, height: 42), xRadius: 5, yRadius: 5)
            charlesSchwabBackground.setFill()
            charlesSchwabBasePath.fill()


            //// charlesSchwabHighlight Drawing
            let charlesSchwabHighlightPath = NSBezierPath(roundedRect: NSRect(x: -88.5, y: -21, width: 177, height: 42), xRadius: 5, yRadius: 5)
            highlightGradient.draw(in: charlesSchwabHighlightPath, angle: -45)

            ////// charlesSchwabHighlight Inner Shadow
            NSGraphicsContext.saveGraphicsState()
            NSRectClip(charlesSchwabHighlightPath.bounds)
            context.setShadow(offset: NSSize.zero, blur: 0, color: nil)

            context.setAlpha(innerStroke.shadowColor!.alphaComponent)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            let charlesSchwabHighlightOpaqueShadow = NSShadow()
            charlesSchwabHighlightOpaqueShadow.shadowColor = innerStroke.shadowColor!.withAlphaComponent(1)
            charlesSchwabHighlightOpaqueShadow.shadowOffset = innerStroke.shadowOffset
            charlesSchwabHighlightOpaqueShadow.shadowBlurRadius = innerStroke.shadowBlurRadius
            charlesSchwabHighlightOpaqueShadow.set()

            context.setBlendMode(.sourceOut)
            context.beginTransparencyLayer(auxiliaryInfo: nil)

            charlesSchwabHighlightOpaqueShadow.shadowColor!.setFill()
            charlesSchwabHighlightPath.fill()

            context.endTransparencyLayer()
            context.endTransparencyLayer()
            NSGraphicsContext.restoreGraphicsState()



            context.endTransparencyLayer()

            NSGraphicsContext.restoreGraphicsState()
        }


        if (hover) {
            //// charlesSchwabHover
            NSGraphicsContext.saveGraphicsState()
            context.translateBy(x: bounds.minX + 95.5, y: bounds.maxY - 28)
            context.scaleBy(x: 1.05, y: 1.05)

            outerShadow.set()
            context.beginTransparencyLayer(auxiliaryInfo: nil)


            //// charlesSchwabBase 2 Drawing
            let charlesSchwabBase2Path = NSBezierPath(roundedRect: NSRect(x: -88.5, y: -21, width: 177, height: 42), xRadius: 5, yRadius: 5)
            charlesSchwabBackground.setFill()
            charlesSchwabBase2Path.fill()


            //// charlesSchwabHighlight 2 Drawing
            let charlesSchwabHighlight2Path = NSBezierPath(roundedRect: NSRect(x: -88.5, y: -21, width: 177, height: 42), xRadius: 5, yRadius: 5)
            highlightGradient.draw(in: charlesSchwabHighlight2Path, angle: -45)

            ////// charlesSchwabHighlight 2 Inner Shadow
            NSGraphicsContext.saveGraphicsState()
            NSRectClip(charlesSchwabHighlight2Path.bounds)
            context.setShadow(offset: NSSize.zero, blur: 0, color: nil)

            context.setAlpha(innerStroke.shadowColor!.alphaComponent)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            let charlesSchwabHighlight2OpaqueShadow = NSShadow()
            charlesSchwabHighlight2OpaqueShadow.shadowColor = innerStroke.shadowColor!.withAlphaComponent(1)
            charlesSchwabHighlight2OpaqueShadow.shadowOffset = innerStroke.shadowOffset
            charlesSchwabHighlight2OpaqueShadow.shadowBlurRadius = innerStroke.shadowBlurRadius
            charlesSchwabHighlight2OpaqueShadow.set()

            context.setBlendMode(.sourceOut)
            context.beginTransparencyLayer(auxiliaryInfo: nil)

            charlesSchwabHighlight2OpaqueShadow.shadowColor!.setFill()
            charlesSchwabHighlight2Path.fill()

            context.endTransparencyLayer()
            context.endTransparencyLayer()
            NSGraphicsContext.restoreGraphicsState()



            context.endTransparencyLayer()

            NSGraphicsContext.restoreGraphicsState()
        }


        if (pressed) {
            //// charlesSchwabPressed
            NSGraphicsContext.saveGraphicsState()
            context.translateBy(x: bounds.minX + 95.5, y: bounds.maxY - 28)

            outerShadow.set()
            context.beginTransparencyLayer(auxiliaryInfo: nil)


            //// charlesSchwabBase 3 Drawing
            let charlesSchwabBase3Path = NSBezierPath(roundedRect: NSRect(x: -88.5, y: -21, width: 177, height: 42), xRadius: 5, yRadius: 5)
            charlesSchwabBackground.setFill()
            charlesSchwabBase3Path.fill()


            //// charlesSchwabHighlight 3 Drawing
            let charlesSchwabHighlight3Path = NSBezierPath(roundedRect: NSRect(x: -88.5, y: -21, width: 177, height: 42), xRadius: 5, yRadius: 5)
            highlightGradient.draw(in: charlesSchwabHighlight3Path, angle: -45)

            ////// charlesSchwabHighlight 3 Inner Shadow
            NSGraphicsContext.saveGraphicsState()
            NSRectClip(charlesSchwabHighlight3Path.bounds)
            context.setShadow(offset: NSSize.zero, blur: 0, color: nil)

            context.setAlpha(innerStroke.shadowColor!.alphaComponent)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            let charlesSchwabHighlight3OpaqueShadow = NSShadow()
            charlesSchwabHighlight3OpaqueShadow.shadowColor = innerStroke.shadowColor!.withAlphaComponent(1)
            charlesSchwabHighlight3OpaqueShadow.shadowOffset = innerStroke.shadowOffset
            charlesSchwabHighlight3OpaqueShadow.shadowBlurRadius = innerStroke.shadowBlurRadius
            charlesSchwabHighlight3OpaqueShadow.set()

            context.setBlendMode(.sourceOut)
            context.beginTransparencyLayer(auxiliaryInfo: nil)

            charlesSchwabHighlight3OpaqueShadow.shadowColor!.setFill()
            charlesSchwabHighlight3Path.fill()

            context.endTransparencyLayer()
            context.endTransparencyLayer()
            NSGraphicsContext.restoreGraphicsState()



            context.endTransparencyLayer()

            NSGraphicsContext.restoreGraphicsState()
        }


        //// charlesSchwabLogo Drawing
        let charlesSchwabLogoPath = NSBezierPath()
        charlesSchwabLogoPath.move(to: NSPoint(x: bounds.minX + 91.53, y: bounds.maxY - 31.44))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 87.96, y: bounds.maxY - 34.58), controlPoint1: NSPoint(x: bounds.minX + 91.53, y: bounds.maxY - 33.08), controlPoint2: NSPoint(x: bounds.minX + 89.65, y: bounds.maxY - 34.58))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 85.97, y: bounds.maxY - 33.46), controlPoint1: NSPoint(x: bounds.minX + 86.87, y: bounds.maxY - 34.58), controlPoint2: NSPoint(x: bounds.minX + 85.97, y: bounds.maxY - 33.88))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 86.42, y: bounds.maxY - 32.39), controlPoint1: NSPoint(x: bounds.minX + 85.97, y: bounds.maxY - 33.21), controlPoint2: NSPoint(x: bounds.minX + 86.05, y: bounds.maxY - 32.39))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 88.82, y: bounds.maxY - 33.68), controlPoint1: NSPoint(x: bounds.minX + 87.04, y: bounds.maxY - 32.39), controlPoint2: NSPoint(x: bounds.minX + 87.6, y: bounds.maxY - 33.68))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 90.28, y: bounds.maxY - 32.39), controlPoint1: NSPoint(x: bounds.minX + 89.58, y: bounds.maxY - 33.68), controlPoint2: NSPoint(x: bounds.minX + 90.28, y: bounds.maxY - 33.16))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 88.4, y: bounds.maxY - 28.54), controlPoint1: NSPoint(x: bounds.minX + 90.28, y: bounds.maxY - 31.3), controlPoint2: NSPoint(x: bounds.minX + 88.4, y: bounds.maxY - 30.26))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 92.1, y: bounds.maxY - 24.55), controlPoint1: NSPoint(x: bounds.minX + 88.4, y: bounds.maxY - 26.74), controlPoint2: NSPoint(x: bounds.minX + 90.34, y: bounds.maxY - 24.55))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 93.37, y: bounds.maxY - 25.52), controlPoint1: NSPoint(x: bounds.minX + 93, y: bounds.maxY - 24.55), controlPoint2: NSPoint(x: bounds.minX + 93.37, y: bounds.maxY - 25.07))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 92.57, y: bounds.maxY - 26.35), controlPoint1: NSPoint(x: bounds.minX + 93.37, y: bounds.maxY - 25.9), controlPoint2: NSPoint(x: bounds.minX + 93.04, y: bounds.maxY - 26.35))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 90.76, y: bounds.maxY - 25.82), controlPoint1: NSPoint(x: bounds.minX + 91.88, y: bounds.maxY - 26.35), controlPoint2: NSPoint(x: bounds.minX + 91.45, y: bounds.maxY - 25.82))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 89.56, y: bounds.maxY - 27.2), controlPoint1: NSPoint(x: bounds.minX + 90, y: bounds.maxY - 25.82), controlPoint2: NSPoint(x: bounds.minX + 89.56, y: bounds.maxY - 26.33))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 91.53, y: bounds.maxY - 31.44), controlPoint1: NSPoint(x: bounds.minX + 89.56, y: bounds.maxY - 28.49), controlPoint2: NSPoint(x: bounds.minX + 91.53, y: bounds.maxY - 29.67))
        charlesSchwabLogoPath.close()
        charlesSchwabLogoPath.move(to: NSPoint(x: bounds.minX + 55.99, y: bounds.maxY - 31.92))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 52.25, y: bounds.maxY - 34.58), controlPoint1: NSPoint(x: bounds.minX + 55.01, y: bounds.maxY - 33.1), controlPoint2: NSPoint(x: bounds.minX + 53.63, y: bounds.maxY - 34.58))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 51.56, y: bounds.maxY - 33.88), controlPoint1: NSPoint(x: bounds.minX + 51.71, y: bounds.maxY - 34.58), controlPoint2: NSPoint(x: bounds.minX + 51.56, y: bounds.maxY - 34.31))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 54.04, y: bounds.maxY - 26.94), controlPoint1: NSPoint(x: bounds.minX + 51.56, y: bounds.maxY - 32.66), controlPoint2: NSPoint(x: bounds.minX + 54.04, y: bounds.maxY - 28.49))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 53.35, y: bounds.maxY - 26.19), controlPoint1: NSPoint(x: bounds.minX + 54.04, y: bounds.maxY - 26.45), controlPoint2: NSPoint(x: bounds.minX + 53.87, y: bounds.maxY - 26.19))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 47.49, y: bounds.maxY - 34.06), controlPoint1: NSPoint(x: bounds.minX + 51.81, y: bounds.maxY - 26.19), controlPoint2: NSPoint(x: bounds.minX + 48.63, y: bounds.maxY - 30.24))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 46.64, y: bounds.maxY - 34.38), controlPoint1: NSPoint(x: bounds.minX + 47.42, y: bounds.maxY - 34.31), controlPoint2: NSPoint(x: bounds.minX + 47.22, y: bounds.maxY - 34.38))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 45.95, y: bounds.maxY - 34.08), controlPoint1: NSPoint(x: bounds.minX + 46.05, y: bounds.maxY - 34.38), controlPoint2: NSPoint(x: bounds.minX + 45.95, y: bounds.maxY - 34.31))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 49.25, y: bounds.maxY - 25.12), controlPoint1: NSPoint(x: bounds.minX + 45.95, y: bounds.maxY - 33.68), controlPoint2: NSPoint(x: bounds.minX + 48.21, y: bounds.maxY - 28.14))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 50.89, y: bounds.maxY - 20.07), controlPoint1: NSPoint(x: bounds.minX + 50.14, y: bounds.maxY - 22.55), controlPoint2: NSPoint(x: bounds.minX + 50.89, y: bounds.maxY - 20.6))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 50.26, y: bounds.maxY - 19.56), controlPoint1: NSPoint(x: bounds.minX + 50.89, y: bounds.maxY - 19.8), controlPoint2: NSPoint(x: bounds.minX + 50.73, y: bounds.maxY - 19.63))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 49.61, y: bounds.maxY - 19.5), controlPoint1: NSPoint(x: bounds.minX + 50.08, y: bounds.maxY - 19.53), controlPoint2: NSPoint(x: bounds.minX + 49.71, y: bounds.maxY - 19.52))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 49.57, y: bounds.maxY - 19.44), controlPoint1: NSPoint(x: bounds.minX + 49.58, y: bounds.maxY - 19.49), controlPoint2: NSPoint(x: bounds.minX + 49.57, y: bounds.maxY - 19.47))
        charlesSchwabLogoPath.line(to: NSPoint(x: bounds.minX + 49.57, y: bounds.maxY - 19.06))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 49.62, y: bounds.maxY - 19), controlPoint1: NSPoint(x: bounds.minX + 49.57, y: bounds.maxY - 19.02), controlPoint2: NSPoint(x: bounds.minX + 49.59, y: bounds.maxY - 19))
        charlesSchwabLogoPath.line(to: NSPoint(x: bounds.minX + 52.55, y: bounds.maxY - 19))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 52.87, y: bounds.maxY - 19.23), controlPoint1: NSPoint(x: bounds.minX + 52.8, y: bounds.maxY - 19), controlPoint2: NSPoint(x: bounds.minX + 52.87, y: bounds.maxY - 19.05))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 50.79, y: bounds.maxY - 25.15), controlPoint1: NSPoint(x: bounds.minX + 52.87, y: bounds.maxY - 19.4), controlPoint2: NSPoint(x: bounds.minX + 52.2, y: bounds.maxY - 21.45))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 49.5, y: bounds.maxY - 28.72), controlPoint1: NSPoint(x: bounds.minX + 49.8, y: bounds.maxY - 27.74), controlPoint2: NSPoint(x: bounds.minX + 49.28, y: bounds.maxY - 28.72))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 54.29, y: bounds.maxY - 24.55), controlPoint1: NSPoint(x: bounds.minX + 49.75, y: bounds.maxY - 28.72), controlPoint2: NSPoint(x: bounds.minX + 52.2, y: bounds.maxY - 24.55))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 55.68, y: bounds.maxY - 26.32), controlPoint1: NSPoint(x: bounds.minX + 55.13, y: bounds.maxY - 24.55), controlPoint2: NSPoint(x: bounds.minX + 55.68, y: bounds.maxY - 25.1))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 53.69, y: bounds.maxY - 32.66), controlPoint1: NSPoint(x: bounds.minX + 55.68, y: bounds.maxY - 28.29), controlPoint2: NSPoint(x: bounds.minX + 53.69, y: bounds.maxY - 32.21))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 54.04, y: bounds.maxY - 32.94), controlPoint1: NSPoint(x: bounds.minX + 53.69, y: bounds.maxY - 32.86), controlPoint2: NSPoint(x: bounds.minX + 53.79, y: bounds.maxY - 32.94))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 55.68, y: bounds.maxY - 31.57), controlPoint1: NSPoint(x: bounds.minX + 54.41, y: bounds.maxY - 32.94), controlPoint2: NSPoint(x: bounds.minX + 55.26, y: bounds.maxY - 32.01))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 55.76, y: bounds.maxY - 31.57), controlPoint1: NSPoint(x: bounds.minX + 55.7, y: bounds.maxY - 31.54), controlPoint2: NSPoint(x: bounds.minX + 55.74, y: bounds.maxY - 31.55))
        charlesSchwabLogoPath.line(to: NSPoint(x: bounds.minX + 55.99, y: bounds.maxY - 31.85))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 55.99, y: bounds.maxY - 31.92), controlPoint1: NSPoint(x: bounds.minX + 56.01, y: bounds.maxY - 31.87), controlPoint2: NSPoint(x: bounds.minX + 56.01, y: bounds.maxY - 31.9))
        charlesSchwabLogoPath.close()
        charlesSchwabLogoPath.move(to: NSPoint(x: bounds.minX + 45.57, y: bounds.maxY - 32.31))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 41.72, y: bounds.maxY - 34.58), controlPoint1: NSPoint(x: bounds.minX + 45.33, y: bounds.maxY - 32.79), controlPoint2: NSPoint(x: bounds.minX + 43.7, y: bounds.maxY - 34.58))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 39.01, y: bounds.maxY - 31.79), controlPoint1: NSPoint(x: bounds.minX + 39.73, y: bounds.maxY - 34.58), controlPoint2: NSPoint(x: bounds.minX + 39.07, y: bounds.maxY - 33.08))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 46.01, y: bounds.maxY - 24.55), controlPoint1: NSPoint(x: bounds.minX + 38.82, y: bounds.maxY - 27.87), controlPoint2: NSPoint(x: bounds.minX + 43.38, y: bounds.maxY - 24.55))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 47.87, y: bounds.maxY - 26.05), controlPoint1: NSPoint(x: bounds.minX + 47.33, y: bounds.maxY - 24.55), controlPoint2: NSPoint(x: bounds.minX + 47.84, y: bounds.maxY - 25.4))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 47.26, y: bounds.maxY - 26.74), controlPoint1: NSPoint(x: bounds.minX + 47.89, y: bounds.maxY - 26.45), controlPoint2: NSPoint(x: bounds.minX + 47.55, y: bounds.maxY - 26.74))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 45.17, y: bounds.maxY - 25.15), controlPoint1: NSPoint(x: bounds.minX + 46.46, y: bounds.maxY - 26.74), controlPoint2: NSPoint(x: bounds.minX + 46.21, y: bounds.maxY - 25.15))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 40.74, y: bounds.maxY - 31.79), controlPoint1: NSPoint(x: bounds.minX + 43.66, y: bounds.maxY - 25.15), controlPoint2: NSPoint(x: bounds.minX + 40.63, y: bounds.maxY - 29.47))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 42.46, y: bounds.maxY - 33.59), controlPoint1: NSPoint(x: bounds.minX + 40.8, y: bounds.maxY - 33.06), controlPoint2: NSPoint(x: bounds.minX + 41.67, y: bounds.maxY - 33.59))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 44.63, y: bounds.maxY - 32.59), controlPoint1: NSPoint(x: bounds.minX + 43.36, y: bounds.maxY - 33.59), controlPoint2: NSPoint(x: bounds.minX + 44.15, y: bounds.maxY - 32.96))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 45.29, y: bounds.maxY - 32.01), controlPoint1: NSPoint(x: bounds.minX + 44.91, y: bounds.maxY - 32.37), controlPoint2: NSPoint(x: bounds.minX + 45.24, y: bounds.maxY - 32.05))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 45.37, y: bounds.maxY - 32.02), controlPoint1: NSPoint(x: bounds.minX + 45.31, y: bounds.maxY - 31.99), controlPoint2: NSPoint(x: bounds.minX + 45.35, y: bounds.maxY - 32))
        charlesSchwabLogoPath.line(to: NSPoint(x: bounds.minX + 45.56, y: bounds.maxY - 32.25))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 45.57, y: bounds.maxY - 32.31), controlPoint1: NSPoint(x: bounds.minX + 45.58, y: bounds.maxY - 32.27), controlPoint2: NSPoint(x: bounds.minX + 45.58, y: bounds.maxY - 32.29))
        charlesSchwabLogoPath.close()
        charlesSchwabLogoPath.move(to: NSPoint(x: bounds.minX + 67.16, y: bounds.maxY - 27.31))
        charlesSchwabLogoPath.line(to: NSPoint(x: bounds.minX + 67.35, y: bounds.maxY - 27.53))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 67.43, y: bounds.maxY - 27.53), controlPoint1: NSPoint(x: bounds.minX + 67.37, y: bounds.maxY - 27.56), controlPoint2: NSPoint(x: bounds.minX + 67.41, y: bounds.maxY - 27.55))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 67.52, y: bounds.maxY - 27.42), controlPoint1: NSPoint(x: bounds.minX + 67.45, y: bounds.maxY - 27.5), controlPoint2: NSPoint(x: bounds.minX + 67.49, y: bounds.maxY - 27.46))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 69.08, y: bounds.maxY - 25.95), controlPoint1: NSPoint(x: bounds.minX + 67.87, y: bounds.maxY - 26.99), controlPoint2: NSPoint(x: bounds.minX + 68.66, y: bounds.maxY - 25.95))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 69.43, y: bounds.maxY - 26.54), controlPoint1: NSPoint(x: bounds.minX + 69.31, y: bounds.maxY - 25.95), controlPoint2: NSPoint(x: bounds.minX + 69.43, y: bounds.maxY - 26.17))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 67.1, y: bounds.maxY - 34.11), controlPoint1: NSPoint(x: bounds.minX + 69.43, y: bounds.maxY - 27.97), controlPoint2: NSPoint(x: bounds.minX + 67.1, y: bounds.maxY - 33.71))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 67.32, y: bounds.maxY - 34.38), controlPoint1: NSPoint(x: bounds.minX + 67.1, y: bounds.maxY - 34.31), controlPoint2: NSPoint(x: bounds.minX + 67.17, y: bounds.maxY - 34.38))
        charlesSchwabLogoPath.line(to: NSPoint(x: bounds.minX + 68.19, y: bounds.maxY - 34.38))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 68.54, y: bounds.maxY - 34.01), controlPoint1: NSPoint(x: bounds.minX + 68.36, y: bounds.maxY - 34.38), controlPoint2: NSPoint(x: bounds.minX + 68.41, y: bounds.maxY - 34.28))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 69.21, y: bounds.maxY - 32.49), controlPoint1: NSPoint(x: bounds.minX + 68.54, y: bounds.maxY - 34.01), controlPoint2: NSPoint(x: bounds.minX + 68.96, y: bounds.maxY - 32.99))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 72.62, y: bounds.maxY - 26.41), controlPoint1: NSPoint(x: bounds.minX + 71, y: bounds.maxY - 28.81), controlPoint2: NSPoint(x: bounds.minX + 71.91, y: bounds.maxY - 27.1))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 74.68, y: bounds.maxY - 26.4), controlPoint1: NSPoint(x: bounds.minX + 74.15, y: bounds.maxY - 24.92), controlPoint2: NSPoint(x: bounds.minX + 73.95, y: bounds.maxY - 26.36))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 75.48, y: bounds.maxY - 25.31), controlPoint1: NSPoint(x: bounds.minX + 75.17, y: bounds.maxY - 26.43), controlPoint2: NSPoint(x: bounds.minX + 75.48, y: bounds.maxY - 25.89))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 74.67, y: bounds.maxY - 24.46), controlPoint1: NSPoint(x: bounds.minX + 75.48, y: bounds.maxY - 24.65), controlPoint2: NSPoint(x: bounds.minX + 75.01, y: bounds.maxY - 24.46))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 70.52, y: bounds.maxY - 28.84), controlPoint1: NSPoint(x: bounds.minX + 73.25, y: bounds.maxY - 24.46), controlPoint2: NSPoint(x: bounds.minX + 72.28, y: bounds.maxY - 25.76))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 70.22, y: bounds.maxY - 29.24), controlPoint1: NSPoint(x: bounds.minX + 70.37, y: bounds.maxY - 29.09), controlPoint2: NSPoint(x: bounds.minX + 70.3, y: bounds.maxY - 29.24))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 70.1, y: bounds.maxY - 29.07), controlPoint1: NSPoint(x: bounds.minX + 70.17, y: bounds.maxY - 29.24), controlPoint2: NSPoint(x: bounds.minX + 70.1, y: bounds.maxY - 29.22))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 70.92, y: bounds.maxY - 25.27), controlPoint1: NSPoint(x: bounds.minX + 70.1, y: bounds.maxY - 28.82), controlPoint2: NSPoint(x: bounds.minX + 70.92, y: bounds.maxY - 25.85))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 70.22, y: bounds.maxY - 24.55), controlPoint1: NSPoint(x: bounds.minX + 70.92, y: bounds.maxY - 24.75), controlPoint2: NSPoint(x: bounds.minX + 70.67, y: bounds.maxY - 24.55))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 67.16, y: bounds.maxY - 27.25), controlPoint1: NSPoint(x: bounds.minX + 69.37, y: bounds.maxY - 24.55), controlPoint2: NSPoint(x: bounds.minX + 67.68, y: bounds.maxY - 26.39))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 67.16, y: bounds.maxY - 27.31), controlPoint1: NSPoint(x: bounds.minX + 67.15, y: bounds.maxY - 27.27), controlPoint2: NSPoint(x: bounds.minX + 67.15, y: bounds.maxY - 27.3))
        charlesSchwabLogoPath.close()
        charlesSchwabLogoPath.move(to: NSPoint(x: bounds.minX + 65.94, y: bounds.maxY - 24.76))
        charlesSchwabLogoPath.line(to: NSPoint(x: bounds.minX + 65.4, y: bounds.maxY - 24.42))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 65.18, y: bounds.maxY - 24.35), controlPoint1: NSPoint(x: bounds.minX + 65.34, y: bounds.maxY - 24.39), controlPoint2: NSPoint(x: bounds.minX + 65.25, y: bounds.maxY - 24.33))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 64.53, y: bounds.maxY - 24.92), controlPoint1: NSPoint(x: bounds.minX + 64.91, y: bounds.maxY - 24.45), controlPoint2: NSPoint(x: bounds.minX + 64.86, y: bounds.maxY - 24.92))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 63.17, y: bounds.maxY - 24.75), controlPoint1: NSPoint(x: bounds.minX + 64.18, y: bounds.maxY - 24.92), controlPoint2: NSPoint(x: bounds.minX + 63.84, y: bounds.maxY - 24.75))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 56.54, y: bounds.maxY - 32.66), controlPoint1: NSPoint(x: bounds.minX + 58.77, y: bounds.maxY - 24.75), controlPoint2: NSPoint(x: bounds.minX + 56.54, y: bounds.maxY - 30.69))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 58.03, y: bounds.maxY - 34.58), controlPoint1: NSPoint(x: bounds.minX + 56.54, y: bounds.maxY - 33.96), controlPoint2: NSPoint(x: bounds.minX + 57.24, y: bounds.maxY - 34.58))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 61.74, y: bounds.maxY - 31.79), controlPoint1: NSPoint(x: bounds.minX + 59.02, y: bounds.maxY - 34.58), controlPoint2: NSPoint(x: bounds.minX + 60.21, y: bounds.maxY - 34.06))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 62.25, y: bounds.maxY - 31.09), controlPoint1: NSPoint(x: bounds.minX + 62.14, y: bounds.maxY - 31.22), controlPoint2: NSPoint(x: bounds.minX + 62.16, y: bounds.maxY - 31.09))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 62.38, y: bounds.maxY - 31.27), controlPoint1: NSPoint(x: bounds.minX + 62.33, y: bounds.maxY - 31.09), controlPoint2: NSPoint(x: bounds.minX + 62.38, y: bounds.maxY - 31.17))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 61.7, y: bounds.maxY - 33.68), controlPoint1: NSPoint(x: bounds.minX + 62.38, y: bounds.maxY - 31.47), controlPoint2: NSPoint(x: bounds.minX + 61.7, y: bounds.maxY - 32.69))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 62.45, y: bounds.maxY - 34.58), controlPoint1: NSPoint(x: bounds.minX + 61.7, y: bounds.maxY - 34.31), controlPoint2: NSPoint(x: bounds.minX + 61.95, y: bounds.maxY - 34.58))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 65.7, y: bounds.maxY - 31.91), controlPoint1: NSPoint(x: bounds.minX + 63.69, y: bounds.maxY - 34.58), controlPoint2: NSPoint(x: bounds.minX + 65.16, y: bounds.maxY - 32.73))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 65.7, y: bounds.maxY - 31.85), controlPoint1: NSPoint(x: bounds.minX + 65.72, y: bounds.maxY - 31.89), controlPoint2: NSPoint(x: bounds.minX + 65.71, y: bounds.maxY - 31.86))
        charlesSchwabLogoPath.line(to: NSPoint(x: bounds.minX + 65.46, y: bounds.maxY - 31.57))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 65.39, y: bounds.maxY - 31.57), controlPoint1: NSPoint(x: bounds.minX + 65.44, y: bounds.maxY - 31.54), controlPoint2: NSPoint(x: bounds.minX + 65.41, y: bounds.maxY - 31.54))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 63.64, y: bounds.maxY - 33.24), controlPoint1: NSPoint(x: bounds.minX + 64.9, y: bounds.maxY - 32.07), controlPoint2: NSPoint(x: bounds.minX + 64.09, y: bounds.maxY - 33.24))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 63.34, y: bounds.maxY - 32.81), controlPoint1: NSPoint(x: bounds.minX + 63.44, y: bounds.maxY - 33.24), controlPoint2: NSPoint(x: bounds.minX + 63.34, y: bounds.maxY - 33.16))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 66.06, y: bounds.maxY - 25.01), controlPoint1: NSPoint(x: bounds.minX + 63.34, y: bounds.maxY - 31.98), controlPoint2: NSPoint(x: bounds.minX + 66.02, y: bounds.maxY - 25.47))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 65.94, y: bounds.maxY - 24.76), controlPoint1: NSPoint(x: bounds.minX + 66.07, y: bounds.maxY - 24.92), controlPoint2: NSPoint(x: bounds.minX + 66.04, y: bounds.maxY - 24.81))
        charlesSchwabLogoPath.close()
        charlesSchwabLogoPath.move(to: NSPoint(x: bounds.minX + 58.9, y: bounds.maxY - 33.18))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 58.18, y: bounds.maxY - 32.19), controlPoint1: NSPoint(x: bounds.minX + 58.45, y: bounds.maxY - 33.18), controlPoint2: NSPoint(x: bounds.minX + 58.18, y: bounds.maxY - 32.98))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 62.74, y: bounds.maxY - 25.25), controlPoint1: NSPoint(x: bounds.minX + 58.18, y: bounds.maxY - 29.44), controlPoint2: NSPoint(x: bounds.minX + 60.46, y: bounds.maxY - 25.25))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 63.94, y: bounds.maxY - 26.54), controlPoint1: NSPoint(x: bounds.minX + 63.59, y: bounds.maxY - 25.25), controlPoint2: NSPoint(x: bounds.minX + 63.94, y: bounds.maxY - 25.87))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 58.9, y: bounds.maxY - 33.18), controlPoint1: NSPoint(x: bounds.minX + 63.94, y: bounds.maxY - 27.74), controlPoint2: NSPoint(x: bounds.minX + 60.81, y: bounds.maxY - 33.18))
        charlesSchwabLogoPath.close()
        charlesSchwabLogoPath.move(to: NSPoint(x: bounds.minX + 85.37, y: bounds.maxY - 32.24))
        charlesSchwabLogoPath.line(to: NSPoint(x: bounds.minX + 85.17, y: bounds.maxY - 32.01))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 85.09, y: bounds.maxY - 32), controlPoint1: NSPoint(x: bounds.minX + 85.15, y: bounds.maxY - 31.99), controlPoint2: NSPoint(x: bounds.minX + 85.11, y: bounds.maxY - 31.99))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 82.31, y: bounds.maxY - 33.38), controlPoint1: NSPoint(x: bounds.minX + 84.62, y: bounds.maxY - 32.34), controlPoint2: NSPoint(x: bounds.minX + 83.44, y: bounds.maxY - 33.38))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 80.67, y: bounds.maxY - 31.69), controlPoint1: NSPoint(x: bounds.minX + 81.27, y: bounds.maxY - 33.38), controlPoint2: NSPoint(x: bounds.minX + 80.67, y: bounds.maxY - 32.69))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 81.74, y: bounds.maxY - 28.64), controlPoint1: NSPoint(x: bounds.minX + 80.67, y: bounds.maxY - 30.36), controlPoint2: NSPoint(x: bounds.minX + 81.29, y: bounds.maxY - 29.34))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 82.85, y: bounds.maxY - 28.69), controlPoint1: NSPoint(x: bounds.minX + 82.06, y: bounds.maxY - 28.67), controlPoint2: NSPoint(x: bounds.minX + 82.31, y: bounds.maxY - 28.69))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 87.47, y: bounds.maxY - 26.12), controlPoint1: NSPoint(x: bounds.minX + 84.37, y: bounds.maxY - 28.69), controlPoint2: NSPoint(x: bounds.minX + 87.47, y: bounds.maxY - 28.02))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 85.54, y: bounds.maxY - 24.55), controlPoint1: NSPoint(x: bounds.minX + 87.47, y: bounds.maxY - 25.32), controlPoint2: NSPoint(x: bounds.minX + 86.78, y: bounds.maxY - 24.55))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 78.79, y: bounds.maxY - 31.91), controlPoint1: NSPoint(x: bounds.minX + 82.81, y: bounds.maxY - 24.55), controlPoint2: NSPoint(x: bounds.minX + 78.79, y: bounds.maxY - 28.34))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 81.34, y: bounds.maxY - 34.58), controlPoint1: NSPoint(x: bounds.minX + 78.79, y: bounds.maxY - 33.53), controlPoint2: NSPoint(x: bounds.minX + 79.83, y: bounds.maxY - 34.58))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 85.37, y: bounds.maxY - 32.31), controlPoint1: NSPoint(x: bounds.minX + 83.12, y: bounds.maxY - 34.58), controlPoint2: NSPoint(x: bounds.minX + 84.91, y: bounds.maxY - 32.92))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 85.37, y: bounds.maxY - 32.24), controlPoint1: NSPoint(x: bounds.minX + 85.39, y: bounds.maxY - 32.29), controlPoint2: NSPoint(x: bounds.minX + 85.38, y: bounds.maxY - 32.26))
        charlesSchwabLogoPath.close()
        charlesSchwabLogoPath.move(to: NSPoint(x: bounds.minX + 82.06, y: bounds.maxY - 28.09))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 85.21, y: bounds.maxY - 25.05), controlPoint1: NSPoint(x: bounds.minX + 82.36, y: bounds.maxY - 27.52), controlPoint2: NSPoint(x: bounds.minX + 83.9, y: bounds.maxY - 25.05))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 86.08, y: bounds.maxY - 26), controlPoint1: NSPoint(x: bounds.minX + 85.73, y: bounds.maxY - 25.05), controlPoint2: NSPoint(x: bounds.minX + 86.08, y: bounds.maxY - 25.5))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 82.06, y: bounds.maxY - 28.09), controlPoint1: NSPoint(x: bounds.minX + 86.08, y: bounds.maxY - 27.34), controlPoint2: NSPoint(x: bounds.minX + 84.37, y: bounds.maxY - 28.07))
        charlesSchwabLogoPath.close()
        charlesSchwabLogoPath.move(to: NSPoint(x: bounds.minX + 78.07, y: bounds.maxY - 31.95))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 74.85, y: bounds.maxY - 34.58), controlPoint1: NSPoint(x: bounds.minX + 77.26, y: bounds.maxY - 32.97), controlPoint2: NSPoint(x: bounds.minX + 75.99, y: bounds.maxY - 34.58))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 73.7, y: bounds.maxY - 33.28), controlPoint1: NSPoint(x: bounds.minX + 74.06, y: bounds.maxY - 34.58), controlPoint2: NSPoint(x: bounds.minX + 73.66, y: bounds.maxY - 34.13))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 76.54, y: bounds.maxY - 25.15), controlPoint1: NSPoint(x: bounds.minX + 73.76, y: bounds.maxY - 32.03), controlPoint2: NSPoint(x: bounds.minX + 76.35, y: bounds.maxY - 25.63))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 78.38, y: bounds.maxY - 20.09), controlPoint1: NSPoint(x: bounds.minX + 77.55, y: bounds.maxY - 22.58), controlPoint2: NSPoint(x: bounds.minX + 78.36, y: bounds.maxY - 20.61))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 77.78, y: bounds.maxY - 19.57), controlPoint1: NSPoint(x: bounds.minX + 78.4, y: bounds.maxY - 19.81), controlPoint2: NSPoint(x: bounds.minX + 78.25, y: bounds.maxY - 19.64))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 77.13, y: bounds.maxY - 19.51), controlPoint1: NSPoint(x: bounds.minX + 77.58, y: bounds.maxY - 19.54), controlPoint2: NSPoint(x: bounds.minX + 77.23, y: bounds.maxY - 19.53))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 77.09, y: bounds.maxY - 19.46), controlPoint1: NSPoint(x: bounds.minX + 77.11, y: bounds.maxY - 19.51), controlPoint2: NSPoint(x: bounds.minX + 77.09, y: bounds.maxY - 19.48))
        charlesSchwabLogoPath.line(to: NSPoint(x: bounds.minX + 77.11, y: bounds.maxY - 19.07))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 77.17, y: bounds.maxY - 19.01), controlPoint1: NSPoint(x: bounds.minX + 77.11, y: bounds.maxY - 19.04), controlPoint2: NSPoint(x: bounds.minX + 77.14, y: bounds.maxY - 19.01))
        charlesSchwabLogoPath.line(to: NSPoint(x: bounds.minX + 80.1, y: bounds.maxY - 19.01))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 80.41, y: bounds.maxY - 19.24), controlPoint1: NSPoint(x: bounds.minX + 80.34, y: bounds.maxY - 19.01), controlPoint2: NSPoint(x: bounds.minX + 80.42, y: bounds.maxY - 19.06))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 78.14, y: bounds.maxY - 25.2), controlPoint1: NSPoint(x: bounds.minX + 80.4, y: bounds.maxY - 19.41), controlPoint2: NSPoint(x: bounds.minX + 79.57, y: bounds.maxY - 21.44))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 75.56, y: bounds.maxY - 32.76), controlPoint1: NSPoint(x: bounds.minX + 76.89, y: bounds.maxY - 28.48), controlPoint2: NSPoint(x: bounds.minX + 75.59, y: bounds.maxY - 32.11))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 75.89, y: bounds.maxY - 33.14), controlPoint1: NSPoint(x: bounds.minX + 75.55, y: bounds.maxY - 33.04), controlPoint2: NSPoint(x: bounds.minX + 75.64, y: bounds.maxY - 33.14))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 77.74, y: bounds.maxY - 31.57), controlPoint1: NSPoint(x: bounds.minX + 76.3, y: bounds.maxY - 33.14), controlPoint2: NSPoint(x: bounds.minX + 76.83, y: bounds.maxY - 32.59))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 77.82, y: bounds.maxY - 31.57), controlPoint1: NSPoint(x: bounds.minX + 77.77, y: bounds.maxY - 31.54), controlPoint2: NSPoint(x: bounds.minX + 77.81, y: bounds.maxY - 31.55))
        charlesSchwabLogoPath.line(to: NSPoint(x: bounds.minX + 78.07, y: bounds.maxY - 31.88))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 78.07, y: bounds.maxY - 31.95), controlPoint1: NSPoint(x: bounds.minX + 78.07, y: bounds.maxY - 31.88), controlPoint2: NSPoint(x: bounds.minX + 78.1, y: bounds.maxY - 31.91))
        charlesSchwabLogoPath.close()
        charlesSchwabLogoPath.move(to: NSPoint(x: bounds.minX + 143.79, y: bounds.maxY - 25.32))
        charlesSchwabLogoPath.line(to: NSPoint(x: bounds.minX + 143.79, y: bounds.maxY - 25.71))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 144.89, y: bounds.maxY - 27.4), controlPoint1: NSPoint(x: bounds.minX + 144.78, y: bounds.maxY - 25.79), controlPoint2: NSPoint(x: bounds.minX + 144.89, y: bounds.maxY - 25.9))
        charlesSchwabLogoPath.line(to: NSPoint(x: bounds.minX + 144.89, y: bounds.maxY - 32.24))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 143.71, y: bounds.maxY - 33.93), controlPoint1: NSPoint(x: bounds.minX + 144.89, y: bounds.maxY - 33.74), controlPoint2: NSPoint(x: bounds.minX + 144.78, y: bounds.maxY - 33.85))
        charlesSchwabLogoPath.line(to: NSPoint(x: bounds.minX + 143.71, y: bounds.maxY - 34.32))
        charlesSchwabLogoPath.line(to: NSPoint(x: bounds.minX + 147.13, y: bounds.maxY - 34.32))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 149.76, y: bounds.maxY - 33.76), controlPoint1: NSPoint(x: bounds.minX + 148.14, y: bounds.maxY - 34.32), controlPoint2: NSPoint(x: bounds.minX + 149.11, y: bounds.maxY - 34.15))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 151, y: bounds.maxY - 31.67), controlPoint1: NSPoint(x: bounds.minX + 150.52, y: bounds.maxY - 33.31), controlPoint2: NSPoint(x: bounds.minX + 151, y: bounds.maxY - 32.66))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 148.52, y: bounds.maxY - 29.36), controlPoint1: NSPoint(x: bounds.minX + 151, y: bounds.maxY - 30.29), controlPoint2: NSPoint(x: bounds.minX + 149.93, y: bounds.maxY - 29.53))
        charlesSchwabLogoPath.line(to: NSPoint(x: bounds.minX + 148.52, y: bounds.maxY - 29.34))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 150.48, y: bounds.maxY - 27.36), controlPoint1: NSPoint(x: bounds.minX + 149.33, y: bounds.maxY - 29.18), controlPoint2: NSPoint(x: bounds.minX + 150.48, y: bounds.maxY - 28.55))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 149.71, y: bounds.maxY - 25.78), controlPoint1: NSPoint(x: bounds.minX + 150.48, y: bounds.maxY - 26.62), controlPoint2: NSPoint(x: bounds.minX + 150.2, y: bounds.maxY - 26.11))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 147.59, y: bounds.maxY - 25.32), controlPoint1: NSPoint(x: bounds.minX + 149.21, y: bounds.maxY - 25.46), controlPoint2: NSPoint(x: bounds.minX + 148.66, y: bounds.maxY - 25.32))
        charlesSchwabLogoPath.line(to: NSPoint(x: bounds.minX + 143.79, y: bounds.maxY - 25.32))
        charlesSchwabLogoPath.close()
        charlesSchwabLogoPath.move(to: NSPoint(x: bounds.minX + 146.87, y: bounds.maxY - 29.75))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 149.29, y: bounds.maxY - 31.83), controlPoint1: NSPoint(x: bounds.minX + 148.28, y: bounds.maxY - 29.75), controlPoint2: NSPoint(x: bounds.minX + 149.29, y: bounds.maxY - 30.41))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 147.45, y: bounds.maxY - 33.76), controlPoint1: NSPoint(x: bounds.minX + 149.29, y: bounds.maxY - 33.25), controlPoint2: NSPoint(x: bounds.minX + 148.36, y: bounds.maxY - 33.76))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 146.4, y: bounds.maxY - 32.21), controlPoint1: NSPoint(x: bounds.minX + 146.57, y: bounds.maxY - 33.79), controlPoint2: NSPoint(x: bounds.minX + 146.4, y: bounds.maxY - 33.51))
        charlesSchwabLogoPath.line(to: NSPoint(x: bounds.minX + 146.4, y: bounds.maxY - 29.75))
        charlesSchwabLogoPath.line(to: NSPoint(x: bounds.minX + 146.87, y: bounds.maxY - 29.75))
        charlesSchwabLogoPath.close()
        charlesSchwabLogoPath.move(to: NSPoint(x: bounds.minX + 146.4, y: bounds.maxY - 26.54))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 146.52, y: bounds.maxY - 25.92), controlPoint1: NSPoint(x: bounds.minX + 146.4, y: bounds.maxY - 26.21), controlPoint2: NSPoint(x: bounds.minX + 146.4, y: bounds.maxY - 25.97))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 147.15, y: bounds.maxY - 25.85), controlPoint1: NSPoint(x: bounds.minX + 146.6, y: bounds.maxY - 25.88), controlPoint2: NSPoint(x: bounds.minX + 146.79, y: bounds.maxY - 25.85))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 148.88, y: bounds.maxY - 27.54), controlPoint1: NSPoint(x: bounds.minX + 147.99, y: bounds.maxY - 25.85), controlPoint2: NSPoint(x: bounds.minX + 148.88, y: bounds.maxY - 26.26))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 146.96, y: bounds.maxY - 29.25), controlPoint1: NSPoint(x: bounds.minX + 148.88, y: bounds.maxY - 28.7), controlPoint2: NSPoint(x: bounds.minX + 148.14, y: bounds.maxY - 29.25))
        charlesSchwabLogoPath.line(to: NSPoint(x: bounds.minX + 146.4, y: bounds.maxY - 29.25))
        charlesSchwabLogoPath.line(to: NSPoint(x: bounds.minX + 146.4, y: bounds.maxY - 26.54))
        charlesSchwabLogoPath.close()
        charlesSchwabLogoPath.move(to: NSPoint(x: bounds.minX + 138.53, y: bounds.maxY - 25.28))
        charlesSchwabLogoPath.line(to: NSPoint(x: bounds.minX + 135.74, y: bounds.maxY - 32.52))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 134.26, y: bounds.maxY - 33.93), controlPoint1: NSPoint(x: bounds.minX + 135.26, y: bounds.maxY - 33.76), controlPoint2: NSPoint(x: bounds.minX + 135.11, y: bounds.maxY - 33.82))
        charlesSchwabLogoPath.line(to: NSPoint(x: bounds.minX + 134.26, y: bounds.maxY - 34.32))
        charlesSchwabLogoPath.line(to: NSPoint(x: bounds.minX + 137.31, y: bounds.maxY - 34.32))
        charlesSchwabLogoPath.line(to: NSPoint(x: bounds.minX + 137.31, y: bounds.maxY - 33.93))
        charlesSchwabLogoPath.line(to: NSPoint(x: bounds.minX + 136.93, y: bounds.maxY - 33.89))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 136.46, y: bounds.maxY - 32.91), controlPoint1: NSPoint(x: bounds.minX + 136.32, y: bounds.maxY - 33.82), controlPoint2: NSPoint(x: bounds.minX + 136.21, y: bounds.maxY - 33.64))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 137.08, y: bounds.maxY - 31.13), controlPoint1: NSPoint(x: bounds.minX + 136.65, y: bounds.maxY - 32.32), controlPoint2: NSPoint(x: bounds.minX + 136.9, y: bounds.maxY - 31.55))
        charlesSchwabLogoPath.line(to: NSPoint(x: bounds.minX + 139.62, y: bounds.maxY - 31.13))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 140.38, y: bounds.maxY - 33.13), controlPoint1: NSPoint(x: bounds.minX + 139.91, y: bounds.maxY - 31.85), controlPoint2: NSPoint(x: bounds.minX + 140.24, y: bounds.maxY - 32.71))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 139.99, y: bounds.maxY - 33.87), controlPoint1: NSPoint(x: bounds.minX + 140.55, y: bounds.maxY - 33.65), controlPoint2: NSPoint(x: bounds.minX + 140.52, y: bounds.maxY - 33.79))
        charlesSchwabLogoPath.line(to: NSPoint(x: bounds.minX + 139.61, y: bounds.maxY - 33.93))
        charlesSchwabLogoPath.line(to: NSPoint(x: bounds.minX + 139.61, y: bounds.maxY - 34.32))
        charlesSchwabLogoPath.line(to: NSPoint(x: bounds.minX + 143.23, y: bounds.maxY - 34.32))
        charlesSchwabLogoPath.line(to: NSPoint(x: bounds.minX + 143.23, y: bounds.maxY - 33.93))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 141.77, y: bounds.maxY - 32.52), controlPoint1: NSPoint(x: bounds.minX + 142.43, y: bounds.maxY - 33.85), controlPoint2: NSPoint(x: bounds.minX + 142.24, y: bounds.maxY - 33.75))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 140.02, y: bounds.maxY - 27.73), controlPoint1: NSPoint(x: bounds.minX + 141.25, y: bounds.maxY - 31.13), controlPoint2: NSPoint(x: bounds.minX + 140.64, y: bounds.maxY - 29.42))
        charlesSchwabLogoPath.line(to: NSPoint(x: bounds.minX + 139.1, y: bounds.maxY - 25.23))
        charlesSchwabLogoPath.line(to: NSPoint(x: bounds.minX + 138.53, y: bounds.maxY - 25.28))
        charlesSchwabLogoPath.close()
        charlesSchwabLogoPath.move(to: NSPoint(x: bounds.minX + 138.3, y: bounds.maxY - 27.45))
        charlesSchwabLogoPath.line(to: NSPoint(x: bounds.minX + 138.34, y: bounds.maxY - 27.45))
        charlesSchwabLogoPath.line(to: NSPoint(x: bounds.minX + 139.42, y: bounds.maxY - 30.5))
        charlesSchwabLogoPath.line(to: NSPoint(x: bounds.minX + 137.23, y: bounds.maxY - 30.5))
        charlesSchwabLogoPath.line(to: NSPoint(x: bounds.minX + 138.3, y: bounds.maxY - 27.45))
        charlesSchwabLogoPath.close()
        charlesSchwabLogoPath.move(to: NSPoint(x: bounds.minX + 129.61, y: bounds.maxY - 25.43))
        charlesSchwabLogoPath.line(to: NSPoint(x: bounds.minX + 132, y: bounds.maxY - 32.02))
        charlesSchwabLogoPath.line(to: NSPoint(x: bounds.minX + 132.03, y: bounds.maxY - 32.02))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 133.42, y: bounds.maxY - 26.84), controlPoint1: NSPoint(x: bounds.minX + 132.54, y: bounds.maxY - 30.3), controlPoint2: NSPoint(x: bounds.minX + 133.2, y: bounds.maxY - 27.73))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 132.94, y: bounds.maxY - 25.75), controlPoint1: NSPoint(x: bounds.minX + 133.64, y: bounds.maxY - 25.99), controlPoint2: NSPoint(x: bounds.minX + 133.53, y: bounds.maxY - 25.8))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 132.47, y: bounds.maxY - 25.71), controlPoint1: NSPoint(x: bounds.minX + 132.84, y: bounds.maxY - 25.74), controlPoint2: NSPoint(x: bounds.minX + 132.47, y: bounds.maxY - 25.71))
        charlesSchwabLogoPath.line(to: NSPoint(x: bounds.minX + 132.47, y: bounds.maxY - 25.32))
        charlesSchwabLogoPath.line(to: NSPoint(x: bounds.minX + 135.63, y: bounds.maxY - 25.32))
        charlesSchwabLogoPath.line(to: NSPoint(x: bounds.minX + 135.63, y: bounds.maxY - 25.71))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 134.19, y: bounds.maxY - 27.12), controlPoint1: NSPoint(x: bounds.minX + 134.74, y: bounds.maxY - 25.79), controlPoint2: NSPoint(x: bounds.minX + 134.63, y: bounds.maxY - 25.88))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 131.86, y: bounds.maxY - 34.43), controlPoint1: NSPoint(x: bounds.minX + 133.98, y: bounds.maxY - 27.7), controlPoint2: NSPoint(x: bounds.minX + 133, y: bounds.maxY - 30.58))
        charlesSchwabLogoPath.line(to: NSPoint(x: bounds.minX + 131.26, y: bounds.maxY - 34.43))
        charlesSchwabLogoPath.line(to: NSPoint(x: bounds.minX + 128.92, y: bounds.maxY - 27.95))
        charlesSchwabLogoPath.line(to: NSPoint(x: bounds.minX + 128.89, y: bounds.maxY - 27.95))
        charlesSchwabLogoPath.line(to: NSPoint(x: bounds.minX + 126.74, y: bounds.maxY - 34.43))
        charlesSchwabLogoPath.line(to: NSPoint(x: bounds.minX + 126.14, y: bounds.maxY - 34.43))
        charlesSchwabLogoPath.line(to: NSPoint(x: bounds.minX + 123.87, y: bounds.maxY - 27.07))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 122.52, y: bounds.maxY - 25.71), controlPoint1: NSPoint(x: bounds.minX + 123.5, y: bounds.maxY - 25.88), controlPoint2: NSPoint(x: bounds.minX + 123.25, y: bounds.maxY - 25.79))
        charlesSchwabLogoPath.line(to: NSPoint(x: bounds.minX + 122.52, y: bounds.maxY - 25.32))
        charlesSchwabLogoPath.line(to: NSPoint(x: bounds.minX + 126.24, y: bounds.maxY - 25.32))
        charlesSchwabLogoPath.line(to: NSPoint(x: bounds.minX + 126.24, y: bounds.maxY - 25.71))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 125.81, y: bounds.maxY - 25.74), controlPoint1: NSPoint(x: bounds.minX + 126.24, y: bounds.maxY - 25.71), controlPoint2: NSPoint(x: bounds.minX + 125.89, y: bounds.maxY - 25.73))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 125.36, y: bounds.maxY - 26.62), controlPoint1: NSPoint(x: bounds.minX + 125.32, y: bounds.maxY - 25.81), controlPoint2: NSPoint(x: bounds.minX + 125.15, y: bounds.maxY - 25.91))
        charlesSchwabLogoPath.line(to: NSPoint(x: bounds.minX + 126.95, y: bounds.maxY - 32.02))
        charlesSchwabLogoPath.line(to: NSPoint(x: bounds.minX + 126.98, y: bounds.maxY - 32.02))
        charlesSchwabLogoPath.line(to: NSPoint(x: bounds.minX + 129.07, y: bounds.maxY - 25.43))
        charlesSchwabLogoPath.line(to: NSPoint(x: bounds.minX + 129.61, y: bounds.maxY - 25.43))
        charlesSchwabLogoPath.close()
        charlesSchwabLogoPath.move(to: NSPoint(x: bounds.minX + 116.25, y: bounds.maxY - 25.32))
        charlesSchwabLogoPath.line(to: NSPoint(x: bounds.minX + 116.25, y: bounds.maxY - 25.71))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 115.12, y: bounds.maxY - 27.4), controlPoint1: NSPoint(x: bounds.minX + 115.23, y: bounds.maxY - 25.79), controlPoint2: NSPoint(x: bounds.minX + 115.12, y: bounds.maxY - 25.9))
        charlesSchwabLogoPath.line(to: NSPoint(x: bounds.minX + 115.12, y: bounds.maxY - 29.25))
        charlesSchwabLogoPath.line(to: NSPoint(x: bounds.minX + 119.3, y: bounds.maxY - 29.25))
        charlesSchwabLogoPath.line(to: NSPoint(x: bounds.minX + 119.3, y: bounds.maxY - 27.4))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 118.15, y: bounds.maxY - 25.71), controlPoint1: NSPoint(x: bounds.minX + 119.3, y: bounds.maxY - 25.9), controlPoint2: NSPoint(x: bounds.minX + 119.19, y: bounds.maxY - 25.79))
        charlesSchwabLogoPath.line(to: NSPoint(x: bounds.minX + 118.15, y: bounds.maxY - 25.32))
        charlesSchwabLogoPath.line(to: NSPoint(x: bounds.minX + 122.05, y: bounds.maxY - 25.32))
        charlesSchwabLogoPath.line(to: NSPoint(x: bounds.minX + 122.05, y: bounds.maxY - 25.71))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 120.84, y: bounds.maxY - 27.4), controlPoint1: NSPoint(x: bounds.minX + 120.95, y: bounds.maxY - 25.79), controlPoint2: NSPoint(x: bounds.minX + 120.84, y: bounds.maxY - 25.9))
        charlesSchwabLogoPath.line(to: NSPoint(x: bounds.minX + 120.84, y: bounds.maxY - 32.24))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 122.03, y: bounds.maxY - 33.93), controlPoint1: NSPoint(x: bounds.minX + 120.84, y: bounds.maxY - 33.74), controlPoint2: NSPoint(x: bounds.minX + 120.95, y: bounds.maxY - 33.85))
        charlesSchwabLogoPath.line(to: NSPoint(x: bounds.minX + 122.03, y: bounds.maxY - 34.32))
        charlesSchwabLogoPath.line(to: NSPoint(x: bounds.minX + 118.04, y: bounds.maxY - 34.32))
        charlesSchwabLogoPath.line(to: NSPoint(x: bounds.minX + 118.04, y: bounds.maxY - 33.93))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 119.3, y: bounds.maxY - 32.24), controlPoint1: NSPoint(x: bounds.minX + 119.19, y: bounds.maxY - 33.85), controlPoint2: NSPoint(x: bounds.minX + 119.3, y: bounds.maxY - 33.74))
        charlesSchwabLogoPath.line(to: NSPoint(x: bounds.minX + 119.3, y: bounds.maxY - 29.89))
        charlesSchwabLogoPath.line(to: NSPoint(x: bounds.minX + 115.12, y: bounds.maxY - 29.89))
        charlesSchwabLogoPath.line(to: NSPoint(x: bounds.minX + 115.12, y: bounds.maxY - 32.24))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 116.3, y: bounds.maxY - 33.93), controlPoint1: NSPoint(x: bounds.minX + 115.12, y: bounds.maxY - 33.74), controlPoint2: NSPoint(x: bounds.minX + 115.23, y: bounds.maxY - 33.85))
        charlesSchwabLogoPath.line(to: NSPoint(x: bounds.minX + 116.3, y: bounds.maxY - 34.32))
        charlesSchwabLogoPath.line(to: NSPoint(x: bounds.minX + 112.37, y: bounds.maxY - 34.32))
        charlesSchwabLogoPath.line(to: NSPoint(x: bounds.minX + 112.37, y: bounds.maxY - 33.93))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 113.58, y: bounds.maxY - 32.24), controlPoint1: NSPoint(x: bounds.minX + 113.47, y: bounds.maxY - 33.85), controlPoint2: NSPoint(x: bounds.minX + 113.58, y: bounds.maxY - 33.74))
        charlesSchwabLogoPath.line(to: NSPoint(x: bounds.minX + 113.58, y: bounds.maxY - 27.4))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 112.31, y: bounds.maxY - 25.71), controlPoint1: NSPoint(x: bounds.minX + 113.58, y: bounds.maxY - 25.9), controlPoint2: NSPoint(x: bounds.minX + 113.47, y: bounds.maxY - 25.79))
        charlesSchwabLogoPath.line(to: NSPoint(x: bounds.minX + 112.31, y: bounds.maxY - 25.32))
        charlesSchwabLogoPath.line(to: NSPoint(x: bounds.minX + 116.25, y: bounds.maxY - 25.32))
        charlesSchwabLogoPath.close()
        charlesSchwabLogoPath.move(to: NSPoint(x: bounds.minX + 108.46, y: bounds.maxY - 25.67))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 105.19, y: bounds.maxY - 29.61), controlPoint1: NSPoint(x: bounds.minX + 106.21, y: bounds.maxY - 25.67), controlPoint2: NSPoint(x: bounds.minX + 105.19, y: bounds.maxY - 27.56))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 108.46, y: bounds.maxY - 33.97), controlPoint1: NSPoint(x: bounds.minX + 105.19, y: bounds.maxY - 32.19), controlPoint2: NSPoint(x: bounds.minX + 106.45, y: bounds.maxY - 33.97))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 111.35, y: bounds.maxY - 31.73), controlPoint1: NSPoint(x: bounds.minX + 109.95, y: bounds.maxY - 33.97), controlPoint2: NSPoint(x: bounds.minX + 110.64, y: bounds.maxY - 33.2))
        charlesSchwabLogoPath.line(to: NSPoint(x: bounds.minX + 111.74, y: bounds.maxY - 31.81))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 111.05, y: bounds.maxY - 34.11), controlPoint1: NSPoint(x: bounds.minX + 111.57, y: bounds.maxY - 32.48), controlPoint2: NSPoint(x: bounds.minX + 111.27, y: bounds.maxY - 33.58))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 108.46, y: bounds.maxY - 34.52), controlPoint1: NSPoint(x: bounds.minX + 110.66, y: bounds.maxY - 34.22), controlPoint2: NSPoint(x: bounds.minX + 109.43, y: bounds.maxY - 34.52))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 103.4, y: bounds.maxY - 29.97), controlPoint1: NSPoint(x: bounds.minX + 104.86, y: bounds.maxY - 34.52), controlPoint2: NSPoint(x: bounds.minX + 103.4, y: bounds.maxY - 32.16))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 108.71, y: bounds.maxY - 25.11), controlPoint1: NSPoint(x: bounds.minX + 103.4, y: bounds.maxY - 27.07), controlPoint2: NSPoint(x: bounds.minX + 105.63, y: bounds.maxY - 25.11))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 111.19, y: bounds.maxY - 25.47), controlPoint1: NSPoint(x: bounds.minX + 109.89, y: bounds.maxY - 25.11), controlPoint2: NSPoint(x: bounds.minX + 110.8, y: bounds.maxY - 25.39))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 111.43, y: bounds.maxY - 27.66), controlPoint1: NSPoint(x: bounds.minX + 111.3, y: bounds.maxY - 26.25), controlPoint2: NSPoint(x: bounds.minX + 111.35, y: bounds.maxY - 26.86))
        charlesSchwabLogoPath.line(to: NSPoint(x: bounds.minX + 111.05, y: bounds.maxY - 27.72))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 108.46, y: bounds.maxY - 25.67), controlPoint1: NSPoint(x: bounds.minX + 110.61, y: bounds.maxY - 26.14), controlPoint2: NSPoint(x: bounds.minX + 109.74, y: bounds.maxY - 25.67))
        charlesSchwabLogoPath.close()
        charlesSchwabLogoPath.move(to: NSPoint(x: bounds.minX + 101.56, y: bounds.maxY - 27.44))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 99.73, y: bounds.maxY - 25.67), controlPoint1: NSPoint(x: bounds.minX + 101.31, y: bounds.maxY - 26.64), controlPoint2: NSPoint(x: bounds.minX + 100.88, y: bounds.maxY - 25.67))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 98.32, y: bounds.maxY - 27.12), controlPoint1: NSPoint(x: bounds.minX + 98.82, y: bounds.maxY - 25.67), controlPoint2: NSPoint(x: bounds.minX + 98.32, y: bounds.maxY - 26.33))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 99.93, y: bounds.maxY - 28.89), controlPoint1: NSPoint(x: bounds.minX + 98.32, y: bounds.maxY - 27.9), controlPoint2: NSPoint(x: bounds.minX + 98.87, y: bounds.maxY - 28.41))
        charlesSchwabLogoPath.line(to: NSPoint(x: bounds.minX + 100.29, y: bounds.maxY - 29.06))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 102.35, y: bounds.maxY - 31.72), controlPoint1: NSPoint(x: bounds.minX + 101.36, y: bounds.maxY - 29.54), controlPoint2: NSPoint(x: bounds.minX + 102.35, y: bounds.maxY - 30.28))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 99.22, y: bounds.maxY - 34.52), controlPoint1: NSPoint(x: bounds.minX + 102.35, y: bounds.maxY - 33.36), controlPoint2: NSPoint(x: bounds.minX + 101.08, y: bounds.maxY - 34.52))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 97.84, y: bounds.maxY - 34.29), controlPoint1: NSPoint(x: bounds.minX + 98.7, y: bounds.maxY - 34.52), controlPoint2: NSPoint(x: bounds.minX + 98.2, y: bounds.maxY - 34.41))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 97.04, y: bounds.maxY - 34), controlPoint1: NSPoint(x: bounds.minX + 97.46, y: bounds.maxY - 34.16), controlPoint2: NSPoint(x: bounds.minX + 97.21, y: bounds.maxY - 34.05))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 96.63, y: bounds.maxY - 31.85), controlPoint1: NSPoint(x: bounds.minX + 96.94, y: bounds.maxY - 33.64), controlPoint2: NSPoint(x: bounds.minX + 96.77, y: bounds.maxY - 32.7))
        charlesSchwabLogoPath.line(to: NSPoint(x: bounds.minX + 97.04, y: bounds.maxY - 31.72))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 99.48, y: bounds.maxY - 33.97), controlPoint1: NSPoint(x: bounds.minX + 97.32, y: bounds.maxY - 32.44), controlPoint2: NSPoint(x: bounds.minX + 98.06, y: bounds.maxY - 33.97))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 100.92, y: bounds.maxY - 32.41), controlPoint1: NSPoint(x: bounds.minX + 100.37, y: bounds.maxY - 33.97), controlPoint2: NSPoint(x: bounds.minX + 100.92, y: bounds.maxY - 33.27))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 99.47, y: bounds.maxY - 30.54), controlPoint1: NSPoint(x: bounds.minX + 100.92, y: bounds.maxY - 31.63), controlPoint2: NSPoint(x: bounds.minX + 100.55, y: bounds.maxY - 31.08))
        charlesSchwabLogoPath.line(to: NSPoint(x: bounds.minX + 99.02, y: bounds.maxY - 30.32))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 96.96, y: bounds.maxY - 27.76), controlPoint1: NSPoint(x: bounds.minX + 98.12, y: bounds.maxY - 29.85), controlPoint2: NSPoint(x: bounds.minX + 96.96, y: bounds.maxY - 29.11))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 99.89, y: bounds.maxY - 25.11), controlPoint1: NSPoint(x: bounds.minX + 96.96, y: bounds.maxY - 26.3), controlPoint2: NSPoint(x: bounds.minX + 98.05, y: bounds.maxY - 25.11))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 101.14, y: bounds.maxY - 25.31), controlPoint1: NSPoint(x: bounds.minX + 100.26, y: bounds.maxY - 25.11), controlPoint2: NSPoint(x: bounds.minX + 100.76, y: bounds.maxY - 25.17))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 101.72, y: bounds.maxY - 25.49), controlPoint1: NSPoint(x: bounds.minX + 101.36, y: bounds.maxY - 25.39), controlPoint2: NSPoint(x: bounds.minX + 101.56, y: bounds.maxY - 25.42))
        charlesSchwabLogoPath.curve(to: NSPoint(x: bounds.minX + 102, y: bounds.maxY - 27.36), controlPoint1: NSPoint(x: bounds.minX + 101.78, y: bounds.maxY - 25.97), controlPoint2: NSPoint(x: bounds.minX + 101.86, y: bounds.maxY - 26.58))
        charlesSchwabLogoPath.line(to: NSPoint(x: bounds.minX + 101.56, y: bounds.maxY - 27.44))
        charlesSchwabLogoPath.close()
        charlesSchwabLogoPath.windingRule = .evenOddWindingRule
        logoWhite.setFill()
        charlesSchwabLogoPath.fill()
    }

    public static func drawAmexButton(bounds: NSRect = NSRect(x: 0, y: 0, width: 191, height: 56), original: Bool = true, hover: Bool = false, pressed: Bool = false) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext

        //// Color Declarations
        let highlightGradientColor = NSColor(deviceRed: 1, green: 1, blue: 1, alpha: 0.09)
        let highlightGradientColor2 = NSColor(deviceRed: 1, green: 1, blue: 1, alpha: 0)
        let shadow2Color = NSColor(deviceRed: 1, green: 1, blue: 1, alpha: 0.36)
        let logoWhite = NSColor(deviceRed: 1, green: 1, blue: 1, alpha: 1)
        let amexBackground = NSColor(deviceRed: 0.153, green: 0.643, blue: 0.839, alpha: 1)

        //// Gradient Declarations
        let highlightGradient = NSGradient(starting: highlightGradientColor, ending: highlightGradientColor2)!

        //// Shadow Declarations
        let outerShadow = NSShadow()
        outerShadow.shadowColor = NSColor.black
        outerShadow.shadowOffset = NSSize(width: 0, height: 0)
        outerShadow.shadowBlurRadius = 0.5
        let innerStroke = NSShadow()
        innerStroke.shadowColor = shadow2Color
        innerStroke.shadowOffset = NSSize(width: 0, height: 0)
        innerStroke.shadowBlurRadius = 0.5

        if (original) {
            //// amex
            NSGraphicsContext.saveGraphicsState()
            context.translateBy(x: bounds.minX + 95.5, y: bounds.maxY - 28)

            outerShadow.set()
            context.beginTransparencyLayer(auxiliaryInfo: nil)


            //// amexBase Drawing
            let amexBasePath = NSBezierPath(roundedRect: NSRect(x: -88.5, y: -21, width: 177, height: 42), xRadius: 5, yRadius: 5)
            amexBackground.setFill()
            amexBasePath.fill()


            //// amexHighlight Drawing
            let amexHighlightPath = NSBezierPath(roundedRect: NSRect(x: -88.5, y: -21, width: 177, height: 42), xRadius: 5, yRadius: 5)
            highlightGradient.draw(in: amexHighlightPath, angle: -45)

            ////// amexHighlight Inner Shadow
            NSGraphicsContext.saveGraphicsState()
            NSRectClip(amexHighlightPath.bounds)
            context.setShadow(offset: NSSize.zero, blur: 0, color: nil)

            context.setAlpha(innerStroke.shadowColor!.alphaComponent)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            let amexHighlightOpaqueShadow = NSShadow()
            amexHighlightOpaqueShadow.shadowColor = innerStroke.shadowColor!.withAlphaComponent(1)
            amexHighlightOpaqueShadow.shadowOffset = innerStroke.shadowOffset
            amexHighlightOpaqueShadow.shadowBlurRadius = innerStroke.shadowBlurRadius
            amexHighlightOpaqueShadow.set()

            context.setBlendMode(.sourceOut)
            context.beginTransparencyLayer(auxiliaryInfo: nil)

            amexHighlightOpaqueShadow.shadowColor!.setFill()
            amexHighlightPath.fill()

            context.endTransparencyLayer()
            context.endTransparencyLayer()
            NSGraphicsContext.restoreGraphicsState()



            context.endTransparencyLayer()

            NSGraphicsContext.restoreGraphicsState()
        }


        if (hover) {
            //// amexHover
            NSGraphicsContext.saveGraphicsState()
            context.translateBy(x: bounds.minX + 95.5, y: bounds.maxY - 28)
            context.scaleBy(x: 1.05, y: 1.05)

            outerShadow.set()
            context.beginTransparencyLayer(auxiliaryInfo: nil)


            //// amexBase 2 Drawing
            let amexBase2Path = NSBezierPath(roundedRect: NSRect(x: -88.5, y: -21, width: 177, height: 42), xRadius: 5, yRadius: 5)
            amexBackground.setFill()
            amexBase2Path.fill()


            //// amexHighlight 2 Drawing
            let amexHighlight2Path = NSBezierPath(roundedRect: NSRect(x: -88.5, y: -21, width: 177, height: 42), xRadius: 5, yRadius: 5)
            highlightGradient.draw(in: amexHighlight2Path, angle: -45)

            ////// amexHighlight 2 Inner Shadow
            NSGraphicsContext.saveGraphicsState()
            NSRectClip(amexHighlight2Path.bounds)
            context.setShadow(offset: NSSize.zero, blur: 0, color: nil)

            context.setAlpha(innerStroke.shadowColor!.alphaComponent)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            let amexHighlight2OpaqueShadow = NSShadow()
            amexHighlight2OpaqueShadow.shadowColor = innerStroke.shadowColor!.withAlphaComponent(1)
            amexHighlight2OpaqueShadow.shadowOffset = innerStroke.shadowOffset
            amexHighlight2OpaqueShadow.shadowBlurRadius = innerStroke.shadowBlurRadius
            amexHighlight2OpaqueShadow.set()

            context.setBlendMode(.sourceOut)
            context.beginTransparencyLayer(auxiliaryInfo: nil)

            amexHighlight2OpaqueShadow.shadowColor!.setFill()
            amexHighlight2Path.fill()

            context.endTransparencyLayer()
            context.endTransparencyLayer()
            NSGraphicsContext.restoreGraphicsState()



            context.endTransparencyLayer()

            NSGraphicsContext.restoreGraphicsState()
        }


        if (pressed) {
            //// amexPressed
            NSGraphicsContext.saveGraphicsState()
            context.translateBy(x: bounds.minX + 95.5, y: bounds.maxY - 28)

            outerShadow.set()
            context.beginTransparencyLayer(auxiliaryInfo: nil)


            //// amexBase 3 Drawing
            let amexBase3Path = NSBezierPath(roundedRect: NSRect(x: -88.5, y: -21, width: 177, height: 42), xRadius: 5, yRadius: 5)
            amexBackground.setFill()
            amexBase3Path.fill()


            //// amexHighlight 3 Drawing
            let amexHighlight3Path = NSBezierPath(roundedRect: NSRect(x: -88.5, y: -21, width: 177, height: 42), xRadius: 5, yRadius: 5)
            highlightGradient.draw(in: amexHighlight3Path, angle: -45)

            ////// amexHighlight 3 Inner Shadow
            NSGraphicsContext.saveGraphicsState()
            NSRectClip(amexHighlight3Path.bounds)
            context.setShadow(offset: NSSize.zero, blur: 0, color: nil)

            context.setAlpha(innerStroke.shadowColor!.alphaComponent)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            let amexHighlight3OpaqueShadow = NSShadow()
            amexHighlight3OpaqueShadow.shadowColor = innerStroke.shadowColor!.withAlphaComponent(1)
            amexHighlight3OpaqueShadow.shadowOffset = innerStroke.shadowOffset
            amexHighlight3OpaqueShadow.shadowBlurRadius = innerStroke.shadowBlurRadius
            amexHighlight3OpaqueShadow.set()

            context.setBlendMode(.sourceOut)
            context.beginTransparencyLayer(auxiliaryInfo: nil)

            amexHighlight3OpaqueShadow.shadowColor!.setFill()
            amexHighlight3Path.fill()

            context.endTransparencyLayer()
            context.endTransparencyLayer()
            NSGraphicsContext.restoreGraphicsState()



            context.endTransparencyLayer()

            NSGraphicsContext.restoreGraphicsState()
        }


        //// amexLogo Drawing
        let amexLogoPath = NSBezierPath()
        amexLogoPath.move(to: NSPoint(x: bounds.minX + 73.6, y: bounds.maxY - 28.79))
        amexLogoPath.line(to: NSPoint(x: bounds.minX + 71.34, y: bounds.maxY - 23.32))
        amexLogoPath.line(to: NSPoint(x: bounds.minX + 69.09, y: bounds.maxY - 28.79))
        amexLogoPath.line(to: NSPoint(x: bounds.minX + 73.6, y: bounds.maxY - 28.79))
        amexLogoPath.line(to: NSPoint(x: bounds.minX + 73.6, y: bounds.maxY - 28.79))
        amexLogoPath.line(to: NSPoint(x: bounds.minX + 73.6, y: bounds.maxY - 28.79))
        amexLogoPath.close()
        amexLogoPath.move(to: NSPoint(x: bounds.minX + 97.73, y: bounds.maxY - 34.4))
        amexLogoPath.line(to: NSPoint(x: bounds.minX + 94.21, y: bounds.maxY - 34.4))
        amexLogoPath.line(to: NSPoint(x: bounds.minX + 94.21, y: bounds.maxY - 24.58))
        amexLogoPath.line(to: NSPoint(x: bounds.minX + 89.85, y: bounds.maxY - 34.4))
        amexLogoPath.line(to: NSPoint(x: bounds.minX + 87.1, y: bounds.maxY - 34.4))
        amexLogoPath.line(to: NSPoint(x: bounds.minX + 82.44, y: bounds.maxY - 24.58))
        amexLogoPath.line(to: NSPoint(x: bounds.minX + 82.44, y: bounds.maxY - 34.72))
        amexLogoPath.line(to: NSPoint(x: bounds.minX + 76.07, y: bounds.maxY - 34.72))
        amexLogoPath.line(to: NSPoint(x: bounds.minX + 74.8, y: bounds.maxY - 31.65))
        amexLogoPath.line(to: NSPoint(x: bounds.minX + 67.91, y: bounds.maxY - 31.65))
        amexLogoPath.line(to: NSPoint(x: bounds.minX + 66.63, y: bounds.maxY - 34.72))
        amexLogoPath.line(to: NSPoint(x: bounds.minX + 63.04, y: bounds.maxY - 34.72))
        amexLogoPath.line(to: NSPoint(x: bounds.minX + 68.96, y: bounds.maxY - 20.99))
        amexLogoPath.line(to: NSPoint(x: bounds.minX + 73.87, y: bounds.maxY - 20.99))
        amexLogoPath.line(to: NSPoint(x: bounds.minX + 79.5, y: bounds.maxY - 33.99))
        amexLogoPath.line(to: NSPoint(x: bounds.minX + 79.5, y: bounds.maxY - 20.99))
        amexLogoPath.line(to: NSPoint(x: bounds.minX + 84.53, y: bounds.maxY - 20.99))
        amexLogoPath.line(to: NSPoint(x: bounds.minX + 88.56, y: bounds.maxY - 29.88))
        amexLogoPath.line(to: NSPoint(x: bounds.minX + 93.19, y: bounds.maxY - 20.99))
        amexLogoPath.line(to: NSPoint(x: bounds.minX + 97.73, y: bounds.maxY - 20.99))
        amexLogoPath.line(to: NSPoint(x: bounds.minX + 97.73, y: bounds.maxY - 34.4))
        amexLogoPath.line(to: NSPoint(x: bounds.minX + 97.73, y: bounds.maxY - 34.4))
        amexLogoPath.line(to: NSPoint(x: bounds.minX + 97.73, y: bounds.maxY - 34.4))
        amexLogoPath.close()
        amexLogoPath.move(to: NSPoint(x: bounds.minX + 100.12, y: bounds.maxY - 34.37))
        amexLogoPath.line(to: NSPoint(x: bounds.minX + 100.12, y: bounds.maxY - 20.99))
        amexLogoPath.line(to: NSPoint(x: bounds.minX + 111.16, y: bounds.maxY - 20.99))
        amexLogoPath.line(to: NSPoint(x: bounds.minX + 114.66, y: bounds.maxY - 20.99))
        amexLogoPath.line(to: NSPoint(x: bounds.minX + 118.32, y: bounds.maxY - 25.29))
        amexLogoPath.line(to: NSPoint(x: bounds.minX + 122.36, y: bounds.maxY - 20.99))
        amexLogoPath.line(to: NSPoint(x: bounds.minX + 126.38, y: bounds.maxY - 20.99))
        amexLogoPath.line(to: NSPoint(x: bounds.minX + 120.42, y: bounds.maxY - 27.67))
        amexLogoPath.line(to: NSPoint(x: bounds.minX + 126.38, y: bounds.maxY - 34.11))
        amexLogoPath.line(to: NSPoint(x: bounds.minX + 122.16, y: bounds.maxY - 34.11))
        amexLogoPath.line(to: NSPoint(x: bounds.minX + 118.32, y: bounds.maxY - 30.07))
        amexLogoPath.line(to: NSPoint(x: bounds.minX + 114.24, y: bounds.maxY - 34.37))
        amexLogoPath.line(to: NSPoint(x: bounds.minX + 100.12, y: bounds.maxY - 34.37))
        amexLogoPath.close()
        amexLogoPath.move(to: NSPoint(x: bounds.minX + 116.17, y: bounds.maxY - 27.67))
        amexLogoPath.line(to: NSPoint(x: bounds.minX + 110.81, y: bounds.maxY - 21.78))
        amexLogoPath.line(to: NSPoint(x: bounds.minX + 110.81, y: bounds.maxY - 23.85))
        amexLogoPath.line(to: NSPoint(x: bounds.minX + 103.42, y: bounds.maxY - 23.85))
        amexLogoPath.line(to: NSPoint(x: bounds.minX + 103.42, y: bounds.maxY - 26.32))
        amexLogoPath.line(to: NSPoint(x: bounds.minX + 110.63, y: bounds.maxY - 26.32))
        amexLogoPath.line(to: NSPoint(x: bounds.minX + 110.63, y: bounds.maxY - 29.14))
        amexLogoPath.line(to: NSPoint(x: bounds.minX + 103.42, y: bounds.maxY - 29.14))
        amexLogoPath.line(to: NSPoint(x: bounds.minX + 103.42, y: bounds.maxY - 31.88))
        amexLogoPath.line(to: NSPoint(x: bounds.minX + 110.83, y: bounds.maxY - 31.88))
        amexLogoPath.line(to: NSPoint(x: bounds.minX + 110.83, y: bounds.maxY - 33.33))
        amexLogoPath.line(to: NSPoint(x: bounds.minX + 116.17, y: bounds.maxY - 27.67))
        amexLogoPath.close()
        amexLogoPath.move(to: NSPoint(x: bounds.minX + 72.77, y: bounds.maxY - 34.36))
        amexLogoPath.line(to: NSPoint(x: bounds.minX + 74.05, y: bounds.maxY - 37.41))
        amexLogoPath.line(to: NSPoint(x: bounds.minX + 115.31, y: bounds.maxY - 37.41))
        amexLogoPath.line(to: NSPoint(x: bounds.minX + 118.34, y: bounds.maxY - 34.15))
        amexLogoPath.line(to: NSPoint(x: bounds.minX + 121, y: bounds.maxY - 37.14))
        amexLogoPath.line(to: NSPoint(x: bounds.minX + 133, y: bounds.maxY - 37.14))
        amexLogoPath.line(to: NSPoint(x: bounds.minX + 124.29, y: bounds.maxY - 27.71))
        amexLogoPath.line(to: NSPoint(x: bounds.minX + 132.81, y: bounds.maxY - 18))
        amexLogoPath.line(to: NSPoint(x: bounds.minX + 121, y: bounds.maxY - 18))
        amexLogoPath.line(to: NSPoint(x: bounds.minX + 118.44, y: bounds.maxY - 20.92))
        amexLogoPath.line(to: NSPoint(x: bounds.minX + 116, y: bounds.maxY - 18.27))
        amexLogoPath.line(to: NSPoint(x: bounds.minX + 90.24, y: bounds.maxY - 18.27))
        amexLogoPath.line(to: NSPoint(x: bounds.minX + 88.55, y: bounds.maxY - 22.51))
        amexLogoPath.line(to: NSPoint(x: bounds.minX + 86.5, y: bounds.maxY - 18.27))
        amexLogoPath.line(to: NSPoint(x: bounds.minX + 67.1, y: bounds.maxY - 18.27))
        amexLogoPath.line(to: NSPoint(x: bounds.minX + 59, y: bounds.maxY - 37.41))
        amexLogoPath.line(to: NSPoint(x: bounds.minX + 69, y: bounds.maxY - 37.41))
        amexLogoPath.line(to: NSPoint(x: bounds.minX + 70.27, y: bounds.maxY - 34.36))
        amexLogoPath.line(to: NSPoint(x: bounds.minX + 72.77, y: bounds.maxY - 34.36))
        amexLogoPath.close()
        amexLogoPath.windingRule = .evenOddWindingRule
        logoWhite.setFill()
        amexLogoPath.fill()
    }

    public static func drawCapitalOneButton(bounds: NSRect = NSRect(x: 0, y: 0, width: 191, height: 56), original: Bool = true, hover: Bool = false, pressed: Bool = false) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext

        //// Color Declarations
        let highlightGradientColor = NSColor(deviceRed: 1, green: 1, blue: 1, alpha: 0.09)
        let highlightGradientColor2 = NSColor(deviceRed: 1, green: 1, blue: 1, alpha: 0)
        let shadow2Color = NSColor(deviceRed: 1, green: 1, blue: 1, alpha: 0.36)
        let logoWhite = NSColor(deviceRed: 1, green: 1, blue: 1, alpha: 1)
        let capitalOneBackground = NSColor(deviceRed: 0.792, green: 0.18, blue: 0.18, alpha: 1)

        //// Gradient Declarations
        let highlightGradient = NSGradient(starting: highlightGradientColor, ending: highlightGradientColor2)!

        //// Shadow Declarations
        let outerShadow = NSShadow()
        outerShadow.shadowColor = NSColor.black
        outerShadow.shadowOffset = NSSize(width: 0, height: 0)
        outerShadow.shadowBlurRadius = 0.5
        let innerStroke = NSShadow()
        innerStroke.shadowColor = shadow2Color
        innerStroke.shadowOffset = NSSize(width: 0, height: 0)
        innerStroke.shadowBlurRadius = 0.5

        if (original) {
            //// capitalOne
            NSGraphicsContext.saveGraphicsState()
            context.translateBy(x: bounds.minX + 95.5, y: bounds.maxY - 28)

            outerShadow.set()
            context.beginTransparencyLayer(auxiliaryInfo: nil)


            //// capitalOneBase Drawing
            let capitalOneBasePath = NSBezierPath(roundedRect: NSRect(x: -88.5, y: -21, width: 177, height: 42), xRadius: 5, yRadius: 5)
            capitalOneBackground.setFill()
            capitalOneBasePath.fill()


            //// capitalOneHighlight Drawing
            let capitalOneHighlightPath = NSBezierPath(roundedRect: NSRect(x: -88.5, y: -21, width: 177, height: 42), xRadius: 5, yRadius: 5)
            highlightGradient.draw(in: capitalOneHighlightPath, angle: -45)

            ////// capitalOneHighlight Inner Shadow
            NSGraphicsContext.saveGraphicsState()
            NSRectClip(capitalOneHighlightPath.bounds)
            context.setShadow(offset: NSSize.zero, blur: 0, color: nil)

            context.setAlpha(innerStroke.shadowColor!.alphaComponent)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            let capitalOneHighlightOpaqueShadow = NSShadow()
            capitalOneHighlightOpaqueShadow.shadowColor = innerStroke.shadowColor!.withAlphaComponent(1)
            capitalOneHighlightOpaqueShadow.shadowOffset = innerStroke.shadowOffset
            capitalOneHighlightOpaqueShadow.shadowBlurRadius = innerStroke.shadowBlurRadius
            capitalOneHighlightOpaqueShadow.set()

            context.setBlendMode(.sourceOut)
            context.beginTransparencyLayer(auxiliaryInfo: nil)

            capitalOneHighlightOpaqueShadow.shadowColor!.setFill()
            capitalOneHighlightPath.fill()

            context.endTransparencyLayer()
            context.endTransparencyLayer()
            NSGraphicsContext.restoreGraphicsState()



            context.endTransparencyLayer()

            NSGraphicsContext.restoreGraphicsState()
        }


        if (hover) {
            //// capitalOneHover
            NSGraphicsContext.saveGraphicsState()
            context.translateBy(x: bounds.minX + 95.5, y: bounds.maxY - 28)
            context.scaleBy(x: 1.05, y: 1.05)

            outerShadow.set()
            context.beginTransparencyLayer(auxiliaryInfo: nil)


            //// capitalOneBase 2 Drawing
            let capitalOneBase2Path = NSBezierPath(roundedRect: NSRect(x: -88.5, y: -21, width: 177, height: 42), xRadius: 5, yRadius: 5)
            capitalOneBackground.setFill()
            capitalOneBase2Path.fill()


            //// capitalOneHighlight 2 Drawing
            let capitalOneHighlight2Path = NSBezierPath(roundedRect: NSRect(x: -88.5, y: -21, width: 177, height: 42), xRadius: 5, yRadius: 5)
            highlightGradient.draw(in: capitalOneHighlight2Path, angle: -45)

            ////// capitalOneHighlight 2 Inner Shadow
            NSGraphicsContext.saveGraphicsState()
            NSRectClip(capitalOneHighlight2Path.bounds)
            context.setShadow(offset: NSSize.zero, blur: 0, color: nil)

            context.setAlpha(innerStroke.shadowColor!.alphaComponent)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            let capitalOneHighlight2OpaqueShadow = NSShadow()
            capitalOneHighlight2OpaqueShadow.shadowColor = innerStroke.shadowColor!.withAlphaComponent(1)
            capitalOneHighlight2OpaqueShadow.shadowOffset = innerStroke.shadowOffset
            capitalOneHighlight2OpaqueShadow.shadowBlurRadius = innerStroke.shadowBlurRadius
            capitalOneHighlight2OpaqueShadow.set()

            context.setBlendMode(.sourceOut)
            context.beginTransparencyLayer(auxiliaryInfo: nil)

            capitalOneHighlight2OpaqueShadow.shadowColor!.setFill()
            capitalOneHighlight2Path.fill()

            context.endTransparencyLayer()
            context.endTransparencyLayer()
            NSGraphicsContext.restoreGraphicsState()



            context.endTransparencyLayer()

            NSGraphicsContext.restoreGraphicsState()
        }


        if (pressed) {
            //// capitalOnePressed
            NSGraphicsContext.saveGraphicsState()
            context.translateBy(x: bounds.minX + 95.5, y: bounds.maxY - 28)

            outerShadow.set()
            context.beginTransparencyLayer(auxiliaryInfo: nil)


            //// capitalOneBase 3 Drawing
            let capitalOneBase3Path = NSBezierPath(roundedRect: NSRect(x: -88.5, y: -21, width: 177, height: 42), xRadius: 5, yRadius: 5)
            capitalOneBackground.setFill()
            capitalOneBase3Path.fill()


            //// capitalOneHighlight 3 Drawing
            let capitalOneHighlight3Path = NSBezierPath(roundedRect: NSRect(x: -88.5, y: -21, width: 177, height: 42), xRadius: 5, yRadius: 5)
            highlightGradient.draw(in: capitalOneHighlight3Path, angle: -45)

            ////// capitalOneHighlight 3 Inner Shadow
            NSGraphicsContext.saveGraphicsState()
            NSRectClip(capitalOneHighlight3Path.bounds)
            context.setShadow(offset: NSSize.zero, blur: 0, color: nil)

            context.setAlpha(innerStroke.shadowColor!.alphaComponent)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            let capitalOneHighlight3OpaqueShadow = NSShadow()
            capitalOneHighlight3OpaqueShadow.shadowColor = innerStroke.shadowColor!.withAlphaComponent(1)
            capitalOneHighlight3OpaqueShadow.shadowOffset = innerStroke.shadowOffset
            capitalOneHighlight3OpaqueShadow.shadowBlurRadius = innerStroke.shadowBlurRadius
            capitalOneHighlight3OpaqueShadow.set()

            context.setBlendMode(.sourceOut)
            context.beginTransparencyLayer(auxiliaryInfo: nil)

            capitalOneHighlight3OpaqueShadow.shadowColor!.setFill()
            capitalOneHighlight3Path.fill()

            context.endTransparencyLayer()
            context.endTransparencyLayer()
            NSGraphicsContext.restoreGraphicsState()



            context.endTransparencyLayer()

            NSGraphicsContext.restoreGraphicsState()
        }


        //// capitalOneLogo Drawing
        let capitalOneLogoPath = NSBezierPath()
        capitalOneLogoPath.move(to: NSPoint(x: bounds.minX + 65.98, y: bounds.maxY - 35.78))
        capitalOneLogoPath.line(to: NSPoint(x: bounds.minX + 70.04, y: bounds.maxY - 35.78))
        capitalOneLogoPath.line(to: NSPoint(x: bounds.minX + 70.73, y: bounds.maxY - 31.55))
        capitalOneLogoPath.curve(to: NSPoint(x: bounds.minX + 74, y: bounds.maxY - 32.87), controlPoint1: NSPoint(x: bounds.minX + 71.37, y: bounds.maxY - 32.4), controlPoint2: NSPoint(x: bounds.minX + 72.42, y: bounds.maxY - 32.87))
        capitalOneLogoPath.curve(to: NSPoint(x: bounds.minX + 79.71, y: bounds.maxY - 28.46), controlPoint1: NSPoint(x: bounds.minX + 76.86, y: bounds.maxY - 32.87), controlPoint2: NSPoint(x: bounds.minX + 79.18, y: bounds.maxY - 31.19))
        capitalOneLogoPath.curve(to: NSPoint(x: bounds.minX + 75.65, y: bounds.maxY - 24), controlPoint1: NSPoint(x: bounds.minX + 80.22, y: bounds.maxY - 25.78), controlPoint2: NSPoint(x: bounds.minX + 78.63, y: bounds.maxY - 24))
        capitalOneLogoPath.curve(to: NSPoint(x: bounds.minX + 71.62, y: bounds.maxY - 25.29), controlPoint1: NSPoint(x: bounds.minX + 74.1, y: bounds.maxY - 24.01), controlPoint2: NSPoint(x: bounds.minX + 72.68, y: bounds.maxY - 24.37))
        capitalOneLogoPath.line(to: NSPoint(x: bounds.minX + 71.84, y: bounds.maxY - 24.16))
        capitalOneLogoPath.line(to: NSPoint(x: bounds.minX + 67.88, y: bounds.maxY - 24.16))
        capitalOneLogoPath.line(to: NSPoint(x: bounds.minX + 65.98, y: bounds.maxY - 35.78))
        capitalOneLogoPath.line(to: NSPoint(x: bounds.minX + 65.98, y: bounds.maxY - 35.78))
        capitalOneLogoPath.close()
        capitalOneLogoPath.move(to: NSPoint(x: bounds.minX + 75.54, y: bounds.maxY - 28.41))
        capitalOneLogoPath.curve(to: NSPoint(x: bounds.minX + 73.06, y: bounds.maxY - 30.46), controlPoint1: NSPoint(x: bounds.minX + 75.3, y: bounds.maxY - 29.7), controlPoint2: NSPoint(x: bounds.minX + 74.34, y: bounds.maxY - 30.46))
        capitalOneLogoPath.curve(to: NSPoint(x: bounds.minX + 71.28, y: bounds.maxY - 28.41), controlPoint1: NSPoint(x: bounds.minX + 71.71, y: bounds.maxY - 30.46), controlPoint2: NSPoint(x: bounds.minX + 71.03, y: bounds.maxY - 29.74))
        capitalOneLogoPath.curve(to: NSPoint(x: bounds.minX + 73.8, y: bounds.maxY - 26.26), controlPoint1: NSPoint(x: bounds.minX + 71.55, y: bounds.maxY - 26.99), controlPoint2: NSPoint(x: bounds.minX + 72.42, y: bounds.maxY - 26.26))
        capitalOneLogoPath.curve(to: NSPoint(x: bounds.minX + 75.54, y: bounds.maxY - 28.41), controlPoint1: NSPoint(x: bounds.minX + 75.18, y: bounds.maxY - 26.26), controlPoint2: NSPoint(x: bounds.minX + 75.81, y: bounds.maxY - 27))
        capitalOneLogoPath.line(to: NSPoint(x: bounds.minX + 75.54, y: bounds.maxY - 28.41))
        capitalOneLogoPath.close()
        capitalOneLogoPath.move(to: NSPoint(x: bounds.minX + 81, y: bounds.maxY - 24.11))
        capitalOneLogoPath.line(to: NSPoint(x: bounds.minX + 85.41, y: bounds.maxY - 24.11))
        capitalOneLogoPath.line(to: NSPoint(x: bounds.minX + 83.97, y: bounds.maxY - 32.68))
        capitalOneLogoPath.line(to: NSPoint(x: bounds.minX + 79.55, y: bounds.maxY - 32.68))
        capitalOneLogoPath.line(to: NSPoint(x: bounds.minX + 81, y: bounds.maxY - 24.11))
        capitalOneLogoPath.close()
        capitalOneLogoPath.move(to: NSPoint(x: bounds.minX + 86.24, y: bounds.maxY - 32.7))
        capitalOneLogoPath.line(to: NSPoint(x: bounds.minX + 87.53, y: bounds.maxY - 25.74))
        capitalOneLogoPath.line(to: NSPoint(x: bounds.minX + 85.92, y: bounds.maxY - 25.74))
        capitalOneLogoPath.line(to: NSPoint(x: bounds.minX + 86.24, y: bounds.maxY - 24.06))
        capitalOneLogoPath.line(to: NSPoint(x: bounds.minX + 87.85, y: bounds.maxY - 24.06))
        capitalOneLogoPath.line(to: NSPoint(x: bounds.minX + 88.15, y: bounds.maxY - 22.12))
        capitalOneLogoPath.line(to: NSPoint(x: bounds.minX + 92.8, y: bounds.maxY - 21.07))
        capitalOneLogoPath.line(to: NSPoint(x: bounds.minX + 92.24, y: bounds.maxY - 24.06))
        capitalOneLogoPath.line(to: NSPoint(x: bounds.minX + 94.5, y: bounds.maxY - 24.06))
        capitalOneLogoPath.line(to: NSPoint(x: bounds.minX + 94.18, y: bounds.maxY - 25.74))
        capitalOneLogoPath.line(to: NSPoint(x: bounds.minX + 91.94, y: bounds.maxY - 25.74))
        capitalOneLogoPath.line(to: NSPoint(x: bounds.minX + 90.56, y: bounds.maxY - 32.68))
        capitalOneLogoPath.line(to: NSPoint(x: bounds.minX + 86.24, y: bounds.maxY - 32.7))
        capitalOneLogoPath.line(to: NSPoint(x: bounds.minX + 86.24, y: bounds.maxY - 32.7))
        capitalOneLogoPath.close()
        capitalOneLogoPath.move(to: NSPoint(x: bounds.minX + 107.64, y: bounds.maxY - 20.61))
        capitalOneLogoPath.line(to: NSPoint(x: bounds.minX + 112.18, y: bounds.maxY - 20.61))
        capitalOneLogoPath.line(to: NSPoint(x: bounds.minX + 110.08, y: bounds.maxY - 32.68))
        capitalOneLogoPath.line(to: NSPoint(x: bounds.minX + 105.54, y: bounds.maxY - 32.68))
        capitalOneLogoPath.line(to: NSPoint(x: bounds.minX + 107.64, y: bounds.maxY - 20.61))
        capitalOneLogoPath.close()
        capitalOneLogoPath.move(to: NSPoint(x: bounds.minX + 52.49, y: bounds.maxY - 29.75))
        capitalOneLogoPath.curve(to: NSPoint(x: bounds.minX + 49.27, y: bounds.maxY - 30.17), controlPoint1: NSPoint(x: bounds.minX + 51.53, y: bounds.maxY - 30.07), controlPoint2: NSPoint(x: bounds.minX + 50.32, y: bounds.maxY - 30.17))
        capitalOneLogoPath.curve(to: NSPoint(x: bounds.minX + 45.25, y: bounds.maxY - 26.88), controlPoint1: NSPoint(x: bounds.minX + 46.56, y: bounds.maxY - 30.17), controlPoint2: NSPoint(x: bounds.minX + 44.8, y: bounds.maxY - 29.28))
        capitalOneLogoPath.curve(to: NSPoint(x: bounds.minX + 50.72, y: bounds.maxY - 23.54), controlPoint1: NSPoint(x: bounds.minX + 45.64, y: bounds.maxY - 24.83), controlPoint2: NSPoint(x: bounds.minX + 48.33, y: bounds.maxY - 23.53))
        capitalOneLogoPath.curve(to: NSPoint(x: bounds.minX + 54.12, y: bounds.maxY - 24.39), controlPoint1: NSPoint(x: bounds.minX + 51.94, y: bounds.maxY - 23.53), controlPoint2: NSPoint(x: bounds.minX + 53.18, y: bounds.maxY - 23.89))
        capitalOneLogoPath.line(to: NSPoint(x: bounds.minX + 54.57, y: bounds.maxY - 21.27))
        capitalOneLogoPath.curve(to: NSPoint(x: bounds.minX + 50.44, y: bounds.maxY - 20.53), controlPoint1: NSPoint(x: bounds.minX + 53.5, y: bounds.maxY - 20.79), controlPoint2: NSPoint(x: bounds.minX + 52.11, y: bounds.maxY - 20.52))
        capitalOneLogoPath.curve(to: NSPoint(x: bounds.minX + 40.1, y: bounds.maxY - 26.91), controlPoint1: NSPoint(x: bounds.minX + 45.44, y: bounds.maxY - 20.54), controlPoint2: NSPoint(x: bounds.minX + 40.79, y: bounds.maxY - 23.02))
        capitalOneLogoPath.curve(to: NSPoint(x: bounds.minX + 47.77, y: bounds.maxY - 33.14), controlPoint1: NSPoint(x: bounds.minX + 39.38, y: bounds.maxY - 30.96), controlPoint2: NSPoint(x: bounds.minX + 42.78, y: bounds.maxY - 33.14))
        capitalOneLogoPath.curve(to: NSPoint(x: bounds.minX + 51.96, y: bounds.maxY - 32.83), controlPoint1: NSPoint(x: bounds.minX + 49.13, y: bounds.maxY - 33.14), controlPoint2: NSPoint(x: bounds.minX + 50.58, y: bounds.maxY - 33.05))
        capitalOneLogoPath.line(to: NSPoint(x: bounds.minX + 52.49, y: bounds.maxY - 29.75))
        capitalOneLogoPath.close()
        capitalOneLogoPath.move(to: NSPoint(x: bounds.minX + 61.58, y: bounds.maxY - 29.85))
        capitalOneLogoPath.curve(to: NSPoint(x: bounds.minX + 58.84, y: bounds.maxY - 31.11), controlPoint1: NSPoint(x: bounds.minX + 61.17, y: bounds.maxY - 30.86), controlPoint2: NSPoint(x: bounds.minX + 59.59, y: bounds.maxY - 31.12))
        capitalOneLogoPath.curve(to: NSPoint(x: bounds.minX + 57.71, y: bounds.maxY - 30.3), controlPoint1: NSPoint(x: bounds.minX + 57.96, y: bounds.maxY - 31.11), controlPoint2: NSPoint(x: bounds.minX + 57.6, y: bounds.maxY - 30.89))
        capitalOneLogoPath.curve(to: NSPoint(x: bounds.minX + 59.13, y: bounds.maxY - 29.38), controlPoint1: NSPoint(x: bounds.minX + 57.8, y: bounds.maxY - 29.79), controlPoint2: NSPoint(x: bounds.minX + 58.2, y: bounds.maxY - 29.56))
        capitalOneLogoPath.curve(to: NSPoint(x: bounds.minX + 61.77, y: bounds.maxY - 28.88), controlPoint1: NSPoint(x: bounds.minX + 60.05, y: bounds.maxY - 29.2), controlPoint2: NSPoint(x: bounds.minX + 61.02, y: bounds.maxY - 29.19))
        capitalOneLogoPath.line(to: NSPoint(x: bounds.minX + 61.58, y: bounds.maxY - 29.85))
        capitalOneLogoPath.close()
        capitalOneLogoPath.move(to: NSPoint(x: bounds.minX + 66.06, y: bounds.maxY - 27.8))
        capitalOneLogoPath.curve(to: NSPoint(x: bounds.minX + 65.89, y: bounds.maxY - 24.86), controlPoint1: NSPoint(x: bounds.minX + 66.29, y: bounds.maxY - 26.65), controlPoint2: NSPoint(x: bounds.minX + 66.5, y: bounds.maxY - 25.54))
        capitalOneLogoPath.curve(to: NSPoint(x: bounds.minX + 61.03, y: bounds.maxY - 23.98), controlPoint1: NSPoint(x: bounds.minX + 65.2, y: bounds.maxY - 24.11), controlPoint2: NSPoint(x: bounds.minX + 63.14, y: bounds.maxY - 23.88))
        capitalOneLogoPath.curve(to: NSPoint(x: bounds.minX + 55.96, y: bounds.maxY - 24.54), controlPoint1: NSPoint(x: bounds.minX + 58.25, y: bounds.maxY - 24.09), controlPoint2: NSPoint(x: bounds.minX + 56.76, y: bounds.maxY - 24.3))
        capitalOneLogoPath.line(to: NSPoint(x: bounds.minX + 55.34, y: bounds.maxY - 26.81))
        capitalOneLogoPath.curve(to: NSPoint(x: bounds.minX + 60.54, y: bounds.maxY - 26.05), controlPoint1: NSPoint(x: bounds.minX + 56.67, y: bounds.maxY - 26.35), controlPoint2: NSPoint(x: bounds.minX + 59.58, y: bounds.maxY - 25.97))
        capitalOneLogoPath.curve(to: NSPoint(x: bounds.minX + 62.13, y: bounds.maxY - 26.74), controlPoint1: NSPoint(x: bounds.minX + 61.57, y: bounds.maxY - 26.13), controlPoint2: NSPoint(x: bounds.minX + 62.22, y: bounds.maxY - 26.25))
        capitalOneLogoPath.curve(to: NSPoint(x: bounds.minX + 59.35, y: bounds.maxY - 27.93), controlPoint1: NSPoint(x: bounds.minX + 62.13, y: bounds.maxY - 26.74), controlPoint2: NSPoint(x: bounds.minX + 62.39, y: bounds.maxY - 27.57))
        capitalOneLogoPath.curve(to: NSPoint(x: bounds.minX + 57.48, y: bounds.maxY - 28.12), controlPoint1: NSPoint(x: bounds.minX + 58.84, y: bounds.maxY - 28), controlPoint2: NSPoint(x: bounds.minX + 58.21, y: bounds.maxY - 28.1))
        capitalOneLogoPath.curve(to: NSPoint(x: bounds.minX + 53.22, y: bounds.maxY - 30.5), controlPoint1: NSPoint(x: bounds.minX + 55.6, y: bounds.maxY - 28.19), controlPoint2: NSPoint(x: bounds.minX + 53.49, y: bounds.maxY - 29.09))
        capitalOneLogoPath.curve(to: NSPoint(x: bounds.minX + 57.07, y: bounds.maxY - 32.9), controlPoint1: NSPoint(x: bounds.minX + 52.94, y: bounds.maxY - 31.99), controlPoint2: NSPoint(x: bounds.minX + 54.34, y: bounds.maxY - 33))
        capitalOneLogoPath.curve(to: NSPoint(x: bounds.minX + 61.13, y: bounds.maxY - 31.76), controlPoint1: NSPoint(x: bounds.minX + 58.57, y: bounds.maxY - 32.84), controlPoint2: NSPoint(x: bounds.minX + 59.87, y: bounds.maxY - 32.53))
        capitalOneLogoPath.curve(to: NSPoint(x: bounds.minX + 61.24, y: bounds.maxY - 32.77), controlPoint1: NSPoint(x: bounds.minX + 61.12, y: bounds.maxY - 32.07), controlPoint2: NSPoint(x: bounds.minX + 61.2, y: bounds.maxY - 32.5))
        capitalOneLogoPath.line(to: NSPoint(x: bounds.minX + 65.79, y: bounds.maxY - 32.79))
        capitalOneLogoPath.line(to: NSPoint(x: bounds.minX + 65.74, y: bounds.maxY - 32.47))
        capitalOneLogoPath.curve(to: NSPoint(x: bounds.minX + 65.45, y: bounds.maxY - 30.99), controlPoint1: NSPoint(x: bounds.minX + 65.36, y: bounds.maxY - 32.33), controlPoint2: NSPoint(x: bounds.minX + 65.31, y: bounds.maxY - 31.74))
        capitalOneLogoPath.line(to: NSPoint(x: bounds.minX + 66.06, y: bounds.maxY - 27.8))
        capitalOneLogoPath.line(to: NSPoint(x: bounds.minX + 66.06, y: bounds.maxY - 27.8))
        capitalOneLogoPath.close()
        capitalOneLogoPath.move(to: NSPoint(x: bounds.minX + 83.71, y: bounds.maxY - 23.35))
        capitalOneLogoPath.curve(to: NSPoint(x: bounds.minX + 81.32, y: bounds.maxY - 22.15), controlPoint1: NSPoint(x: bounds.minX + 82.42, y: bounds.maxY - 23.41), controlPoint2: NSPoint(x: bounds.minX + 81.35, y: bounds.maxY - 22.87))
        capitalOneLogoPath.curve(to: NSPoint(x: bounds.minX + 83.59, y: bounds.maxY - 20.74), controlPoint1: NSPoint(x: bounds.minX + 81.29, y: bounds.maxY - 21.43), controlPoint2: NSPoint(x: bounds.minX + 82.3, y: bounds.maxY - 20.8))
        capitalOneLogoPath.curve(to: NSPoint(x: bounds.minX + 85.98, y: bounds.maxY - 21.94), controlPoint1: NSPoint(x: bounds.minX + 84.87, y: bounds.maxY - 20.68), controlPoint2: NSPoint(x: bounds.minX + 85.95, y: bounds.maxY - 21.22))
        capitalOneLogoPath.curve(to: NSPoint(x: bounds.minX + 83.71, y: bounds.maxY - 23.35), controlPoint1: NSPoint(x: bounds.minX + 86.01, y: bounds.maxY - 22.66), controlPoint2: NSPoint(x: bounds.minX + 84.99, y: bounds.maxY - 23.29))
        capitalOneLogoPath.close()
        capitalOneLogoPath.move(to: NSPoint(x: bounds.minX + 100.71, y: bounds.maxY - 29.64))
        capitalOneLogoPath.curve(to: NSPoint(x: bounds.minX + 98.01, y: bounds.maxY - 31.11), controlPoint1: NSPoint(x: bounds.minX + 100.32, y: bounds.maxY - 30.86), controlPoint2: NSPoint(x: bounds.minX + 98.76, y: bounds.maxY - 31.12))
        capitalOneLogoPath.curve(to: NSPoint(x: bounds.minX + 96.87, y: bounds.maxY - 30.3), controlPoint1: NSPoint(x: bounds.minX + 97.12, y: bounds.maxY - 31.11), controlPoint2: NSPoint(x: bounds.minX + 96.76, y: bounds.maxY - 30.89))
        capitalOneLogoPath.curve(to: NSPoint(x: bounds.minX + 98.29, y: bounds.maxY - 29.38), controlPoint1: NSPoint(x: bounds.minX + 96.97, y: bounds.maxY - 29.79), controlPoint2: NSPoint(x: bounds.minX + 97.36, y: bounds.maxY - 29.56))
        capitalOneLogoPath.curve(to: NSPoint(x: bounds.minX + 100.93, y: bounds.maxY - 28.88), controlPoint1: NSPoint(x: bounds.minX + 99.21, y: bounds.maxY - 29.2), controlPoint2: NSPoint(x: bounds.minX + 100.19, y: bounds.maxY - 29.18))
        capitalOneLogoPath.line(to: NSPoint(x: bounds.minX + 100.71, y: bounds.maxY - 29.64))
        capitalOneLogoPath.line(to: NSPoint(x: bounds.minX + 100.71, y: bounds.maxY - 29.64))
        capitalOneLogoPath.close()
        capitalOneLogoPath.move(to: NSPoint(x: bounds.minX + 105.23, y: bounds.maxY - 27.81))
        capitalOneLogoPath.curve(to: NSPoint(x: bounds.minX + 105.06, y: bounds.maxY - 24.86), controlPoint1: NSPoint(x: bounds.minX + 105.45, y: bounds.maxY - 26.65), controlPoint2: NSPoint(x: bounds.minX + 105.67, y: bounds.maxY - 25.54))
        capitalOneLogoPath.curve(to: NSPoint(x: bounds.minX + 100.19, y: bounds.maxY - 23.98), controlPoint1: NSPoint(x: bounds.minX + 104.36, y: bounds.maxY - 24.11), controlPoint2: NSPoint(x: bounds.minX + 102.3, y: bounds.maxY - 23.88))
        capitalOneLogoPath.curve(to: NSPoint(x: bounds.minX + 95.13, y: bounds.maxY - 24.54), controlPoint1: NSPoint(x: bounds.minX + 97.42, y: bounds.maxY - 24.09), controlPoint2: NSPoint(x: bounds.minX + 95.93, y: bounds.maxY - 24.3))
        capitalOneLogoPath.line(to: NSPoint(x: bounds.minX + 94.5, y: bounds.maxY - 26.81))
        capitalOneLogoPath.curve(to: NSPoint(x: bounds.minX + 99.71, y: bounds.maxY - 26.05), controlPoint1: NSPoint(x: bounds.minX + 95.84, y: bounds.maxY - 26.35), controlPoint2: NSPoint(x: bounds.minX + 98.75, y: bounds.maxY - 25.97))
        capitalOneLogoPath.curve(to: NSPoint(x: bounds.minX + 101.29, y: bounds.maxY - 26.74), controlPoint1: NSPoint(x: bounds.minX + 100.73, y: bounds.maxY - 26.13), controlPoint2: NSPoint(x: bounds.minX + 101.39, y: bounds.maxY - 26.25))
        capitalOneLogoPath.curve(to: NSPoint(x: bounds.minX + 98.52, y: bounds.maxY - 27.93), controlPoint1: NSPoint(x: bounds.minX + 101.29, y: bounds.maxY - 26.74), controlPoint2: NSPoint(x: bounds.minX + 101.56, y: bounds.maxY - 27.57))
        capitalOneLogoPath.curve(to: NSPoint(x: bounds.minX + 96.64, y: bounds.maxY - 28.12), controlPoint1: NSPoint(x: bounds.minX + 98, y: bounds.maxY - 28), controlPoint2: NSPoint(x: bounds.minX + 97.38, y: bounds.maxY - 28.1))
        capitalOneLogoPath.curve(to: NSPoint(x: bounds.minX + 92.39, y: bounds.maxY - 30.5), controlPoint1: NSPoint(x: bounds.minX + 94.76, y: bounds.maxY - 28.19), controlPoint2: NSPoint(x: bounds.minX + 92.66, y: bounds.maxY - 29.09))
        capitalOneLogoPath.curve(to: NSPoint(x: bounds.minX + 96.23, y: bounds.maxY - 32.9), controlPoint1: NSPoint(x: bounds.minX + 92.1, y: bounds.maxY - 31.99), controlPoint2: NSPoint(x: bounds.minX + 93.51, y: bounds.maxY - 33))
        capitalOneLogoPath.curve(to: NSPoint(x: bounds.minX + 100.3, y: bounds.maxY - 31.76), controlPoint1: NSPoint(x: bounds.minX + 97.73, y: bounds.maxY - 32.84), controlPoint2: NSPoint(x: bounds.minX + 99.03, y: bounds.maxY - 32.53))
        capitalOneLogoPath.curve(to: NSPoint(x: bounds.minX + 100.4, y: bounds.maxY - 32.77), controlPoint1: NSPoint(x: bounds.minX + 100.29, y: bounds.maxY - 32.07), controlPoint2: NSPoint(x: bounds.minX + 100.36, y: bounds.maxY - 32.5))
        capitalOneLogoPath.line(to: NSPoint(x: bounds.minX + 104.96, y: bounds.maxY - 32.79))
        capitalOneLogoPath.line(to: NSPoint(x: bounds.minX + 104.91, y: bounds.maxY - 32.46))
        capitalOneLogoPath.curve(to: NSPoint(x: bounds.minX + 104.62, y: bounds.maxY - 30.99), controlPoint1: NSPoint(x: bounds.minX + 104.53, y: bounds.maxY - 32.33), controlPoint2: NSPoint(x: bounds.minX + 104.48, y: bounds.maxY - 31.74))
        capitalOneLogoPath.line(to: NSPoint(x: bounds.minX + 105.23, y: bounds.maxY - 27.81))
        capitalOneLogoPath.line(to: NSPoint(x: bounds.minX + 105.23, y: bounds.maxY - 27.81))
        capitalOneLogoPath.close()
        capitalOneLogoPath.move(to: NSPoint(x: bounds.minX + 146.42, y: bounds.maxY - 27.07))
        capitalOneLogoPath.curve(to: NSPoint(x: bounds.minX + 141.32, y: bounds.maxY - 30.27), controlPoint1: NSPoint(x: bounds.minX + 145.7, y: bounds.maxY - 30.29), controlPoint2: NSPoint(x: bounds.minX + 141.32, y: bounds.maxY - 30.27))
        capitalOneLogoPath.curve(to: NSPoint(x: bounds.minX + 145.31, y: bounds.maxY - 25.59), controlPoint1: NSPoint(x: bounds.minX + 141.85, y: bounds.maxY - 28.35), controlPoint2: NSPoint(x: bounds.minX + 143.27, y: bounds.maxY - 25.85))
        capitalOneLogoPath.curve(to: NSPoint(x: bounds.minX + 146.42, y: bounds.maxY - 27.07), controlPoint1: NSPoint(x: bounds.minX + 146.49, y: bounds.maxY - 25.43), controlPoint2: NSPoint(x: bounds.minX + 146.43, y: bounds.maxY - 27.03))
        capitalOneLogoPath.close()
        capitalOneLogoPath.move(to: NSPoint(x: bounds.minX + 127.1, y: bounds.maxY - 27.4))
        capitalOneLogoPath.curve(to: NSPoint(x: bounds.minX + 124.97, y: bounds.maxY - 32.64), controlPoint1: NSPoint(x: bounds.minX + 126.89, y: bounds.maxY - 29.8), controlPoint2: NSPoint(x: bounds.minX + 126.29, y: bounds.maxY - 31.16))
        capitalOneLogoPath.curve(to: NSPoint(x: bounds.minX + 121.04, y: bounds.maxY - 34.59), controlPoint1: NSPoint(x: bounds.minX + 123.76, y: bounds.maxY - 34.01), controlPoint2: NSPoint(x: bounds.minX + 122.57, y: bounds.maxY - 34.59))
        capitalOneLogoPath.curve(to: NSPoint(x: bounds.minX + 116.72, y: bounds.maxY - 28.55), controlPoint1: NSPoint(x: bounds.minX + 117.96, y: bounds.maxY - 34.58), controlPoint2: NSPoint(x: bounds.minX + 116.37, y: bounds.maxY - 32.5))
        capitalOneLogoPath.curve(to: NSPoint(x: bounds.minX + 119.5, y: bounds.maxY - 22.11), controlPoint1: NSPoint(x: bounds.minX + 116.95, y: bounds.maxY - 26.01), controlPoint2: NSPoint(x: bounds.minX + 117.87, y: bounds.maxY - 23.65))
        capitalOneLogoPath.curve(to: NSPoint(x: bounds.minX + 123.02, y: bounds.maxY - 20.71), controlPoint1: NSPoint(x: bounds.minX + 120.55, y: bounds.maxY - 21.11), controlPoint2: NSPoint(x: bounds.minX + 121.54, y: bounds.maxY - 20.71))
        capitalOneLogoPath.curve(to: NSPoint(x: bounds.minX + 127.1, y: bounds.maxY - 27.4), controlPoint1: NSPoint(x: bounds.minX + 125.88, y: bounds.maxY - 20.73), controlPoint2: NSPoint(x: bounds.minX + 127.44, y: bounds.maxY - 23.66))
        capitalOneLogoPath.close()
        capitalOneLogoPath.move(to: NSPoint(x: bounds.minX + 145.64, y: bounds.maxY - 25.02))
        capitalOneLogoPath.curve(to: NSPoint(x: bounds.minX + 141.45, y: bounds.maxY - 27.1), controlPoint1: NSPoint(x: bounds.minX + 144.28, y: bounds.maxY - 25.08), controlPoint2: NSPoint(x: bounds.minX + 142.92, y: bounds.maxY - 25.54))
        capitalOneLogoPath.curve(to: NSPoint(x: bounds.minX + 139.28, y: bounds.maxY - 31.95), controlPoint1: NSPoint(x: bounds.minX + 139.99, y: bounds.maxY - 28.67), controlPoint2: NSPoint(x: bounds.minX + 139.41, y: bounds.maxY - 30.47))
        capitalOneLogoPath.curve(to: NSPoint(x: bounds.minX + 139.3, y: bounds.maxY - 32.74), controlPoint1: NSPoint(x: bounds.minX + 139.25, y: bounds.maxY - 32.22), controlPoint2: NSPoint(x: bounds.minX + 139.26, y: bounds.maxY - 32.49))
        capitalOneLogoPath.curve(to: NSPoint(x: bounds.minX + 137.7, y: bounds.maxY - 34), controlPoint1: NSPoint(x: bounds.minX + 138.47, y: bounds.maxY - 33.63), controlPoint2: NSPoint(x: bounds.minX + 137.97, y: bounds.maxY - 34))
        capitalOneLogoPath.curve(to: NSPoint(x: bounds.minX + 137.23, y: bounds.maxY - 33.47), controlPoint1: NSPoint(x: bounds.minX + 137.44, y: bounds.maxY - 34), controlPoint2: NSPoint(x: bounds.minX + 137.21, y: bounds.maxY - 33.7))
        capitalOneLogoPath.curve(to: NSPoint(x: bounds.minX + 137.87, y: bounds.maxY - 31.06), controlPoint1: NSPoint(x: bounds.minX + 137.25, y: bounds.maxY - 33.19), controlPoint2: NSPoint(x: bounds.minX + 137.63, y: bounds.maxY - 32.17))
        capitalOneLogoPath.curve(to: NSPoint(x: bounds.minX + 138.91, y: bounds.maxY - 26.74), controlPoint1: NSPoint(x: bounds.minX + 137.87, y: bounds.maxY - 31.06), controlPoint2: NSPoint(x: bounds.minX + 138.89, y: bounds.maxY - 27.04))
        capitalOneLogoPath.curve(to: NSPoint(x: bounds.minX + 138.06, y: bounds.maxY - 25.09), controlPoint1: NSPoint(x: bounds.minX + 138.97, y: bounds.maxY - 26.19), controlPoint2: NSPoint(x: bounds.minX + 138.91, y: bounds.maxY - 25.05))
        capitalOneLogoPath.curve(to: NSPoint(x: bounds.minX + 132, y: bounds.maxY - 29.34), controlPoint1: NSPoint(x: bounds.minX + 138.06, y: bounds.maxY - 25.09), controlPoint2: NSPoint(x: bounds.minX + 136.61, y: bounds.maxY - 24.51))
        capitalOneLogoPath.curve(to: NSPoint(x: bounds.minX + 132.75, y: bounds.maxY - 25.95), controlPoint1: NSPoint(x: bounds.minX + 132.39, y: bounds.maxY - 27.52), controlPoint2: NSPoint(x: bounds.minX + 132.75, y: bounds.maxY - 25.95))
        capitalOneLogoPath.curve(to: NSPoint(x: bounds.minX + 132.32, y: bounds.maxY - 25.29), controlPoint1: NSPoint(x: bounds.minX + 133.14, y: bounds.maxY - 24.86), controlPoint2: NSPoint(x: bounds.minX + 132.32, y: bounds.maxY - 25.29))
        capitalOneLogoPath.curve(to: NSPoint(x: bounds.minX + 129.47, y: bounds.maxY - 26.17), controlPoint1: NSPoint(x: bounds.minX + 131.42, y: bounds.maxY - 25.6), controlPoint2: NSPoint(x: bounds.minX + 130.03, y: bounds.maxY - 26.01))
        capitalOneLogoPath.curve(to: NSPoint(x: bounds.minX + 123.23, y: bounds.maxY - 20), controlPoint1: NSPoint(x: bounds.minX + 129.47, y: bounds.maxY - 23.07), controlPoint2: NSPoint(x: bounds.minX + 127.42, y: bounds.maxY - 20.02))
        capitalOneLogoPath.curve(to: NSPoint(x: bounds.minX + 116.38, y: bounds.maxY - 23.56), controlPoint1: NSPoint(x: bounds.minX + 120.47, y: bounds.maxY - 19.99), controlPoint2: NSPoint(x: bounds.minX + 118.06, y: bounds.maxY - 21.26))
        capitalOneLogoPath.curve(to: NSPoint(x: bounds.minX + 114.42, y: bounds.maxY - 28.42), controlPoint1: NSPoint(x: bounds.minX + 115.31, y: bounds.maxY - 25.05), controlPoint2: NSPoint(x: bounds.minX + 114.57, y: bounds.maxY - 26.7))
        capitalOneLogoPath.curve(to: NSPoint(x: bounds.minX + 120.57, y: bounds.maxY - 35.32), controlPoint1: NSPoint(x: bounds.minX + 114.05, y: bounds.maxY - 32.51), controlPoint2: NSPoint(x: bounds.minX + 116.22, y: bounds.maxY - 35.38))
        capitalOneLogoPath.curve(to: NSPoint(x: bounds.minX + 126.9, y: bounds.maxY - 32.56), controlPoint1: NSPoint(x: bounds.minX + 123.15, y: bounds.maxY - 35.29), controlPoint2: NSPoint(x: bounds.minX + 125.09, y: bounds.maxY - 34.49))
        capitalOneLogoPath.curve(to: NSPoint(x: bounds.minX + 129.44, y: bounds.maxY - 26.82), controlPoint1: NSPoint(x: bounds.minX + 128.32, y: bounds.maxY - 31.05), controlPoint2: NSPoint(x: bounds.minX + 129.24, y: bounds.maxY - 28.98))
        capitalOneLogoPath.curve(to: NSPoint(x: bounds.minX + 130.49, y: bounds.maxY - 26.66), controlPoint1: NSPoint(x: bounds.minX + 130, y: bounds.maxY - 26.5), controlPoint2: NSPoint(x: bounds.minX + 130.49, y: bounds.maxY - 26.66))
        capitalOneLogoPath.curve(to: NSPoint(x: bounds.minX + 130.9, y: bounds.maxY - 27.17), controlPoint1: NSPoint(x: bounds.minX + 130.76, y: bounds.maxY - 26.66), controlPoint2: NSPoint(x: bounds.minX + 130.93, y: bounds.maxY - 26.87))
        capitalOneLogoPath.curve(to: NSPoint(x: bounds.minX + 129.18, y: bounds.maxY - 35.05), controlPoint1: NSPoint(x: bounds.minX + 130.88, y: bounds.maxY - 27.36), controlPoint2: NSPoint(x: bounds.minX + 129.22, y: bounds.maxY - 34.84))
        capitalOneLogoPath.curve(to: NSPoint(x: bounds.minX + 130.77, y: bounds.maxY - 35.02), controlPoint1: NSPoint(x: bounds.minX + 129.18, y: bounds.maxY - 35.05), controlPoint2: NSPoint(x: bounds.minX + 130.15, y: bounds.maxY - 35.02))
        capitalOneLogoPath.curve(to: NSPoint(x: bounds.minX + 131.65, y: bounds.maxY - 31.03), controlPoint1: NSPoint(x: bounds.minX + 130.94, y: bounds.maxY - 35.02), controlPoint2: NSPoint(x: bounds.minX + 131.24, y: bounds.maxY - 33.11))
        capitalOneLogoPath.curve(to: NSPoint(x: bounds.minX + 131.75, y: bounds.maxY - 30.59), controlPoint1: NSPoint(x: bounds.minX + 131.68, y: bounds.maxY - 30.88), controlPoint2: NSPoint(x: bounds.minX + 131.71, y: bounds.maxY - 30.74))
        capitalOneLogoPath.curve(to: NSPoint(x: bounds.minX + 136.65, y: bounds.maxY - 26.52), controlPoint1: NSPoint(x: bounds.minX + 133.62, y: bounds.maxY - 28.41), controlPoint2: NSPoint(x: bounds.minX + 135.97, y: bounds.maxY - 26.52))
        capitalOneLogoPath.curve(to: NSPoint(x: bounds.minX + 137.16, y: bounds.maxY - 27.4), controlPoint1: NSPoint(x: bounds.minX + 136.93, y: bounds.maxY - 26.53), controlPoint2: NSPoint(x: bounds.minX + 137.33, y: bounds.maxY - 26.77))
        capitalOneLogoPath.curve(to: NSPoint(x: bounds.minX + 135.37, y: bounds.maxY - 34.14), controlPoint1: NSPoint(x: bounds.minX + 137.13, y: bounds.maxY - 27.54), controlPoint2: NSPoint(x: bounds.minX + 135.39, y: bounds.maxY - 33.76))
        capitalOneLogoPath.curve(to: NSPoint(x: bounds.minX + 136.38, y: bounds.maxY - 35.32), controlPoint1: NSPoint(x: bounds.minX + 135.33, y: bounds.maxY - 35.05), controlPoint2: NSPoint(x: bounds.minX + 135.91, y: bounds.maxY - 35.31))
        capitalOneLogoPath.curve(to: NSPoint(x: bounds.minX + 139.43, y: bounds.maxY - 33.25), controlPoint1: NSPoint(x: bounds.minX + 137.21, y: bounds.maxY - 35.32), controlPoint2: NSPoint(x: bounds.minX + 138.03, y: bounds.maxY - 34.86))
        capitalOneLogoPath.curve(to: NSPoint(x: bounds.minX + 142.41, y: bounds.maxY - 35.32), controlPoint1: NSPoint(x: bounds.minX + 139.87, y: bounds.maxY - 34.51), controlPoint2: NSPoint(x: bounds.minX + 141.11, y: bounds.maxY - 35.31))
        capitalOneLogoPath.curve(to: NSPoint(x: bounds.minX + 146.97, y: bounds.maxY - 32.58), controlPoint1: NSPoint(x: bounds.minX + 143.96, y: bounds.maxY - 35.32), controlPoint2: NSPoint(x: bounds.minX + 145.51, y: bounds.maxY - 34.59))
        capitalOneLogoPath.line(to: NSPoint(x: bounds.minX + 146.7, y: bounds.maxY - 32.12))
        capitalOneLogoPath.curve(to: NSPoint(x: bounds.minX + 143.1, y: bounds.maxY - 34.26), controlPoint1: NSPoint(x: bounds.minX + 145.41, y: bounds.maxY - 33.57), controlPoint2: NSPoint(x: bounds.minX + 144.77, y: bounds.maxY - 34.26))
        capitalOneLogoPath.curve(to: NSPoint(x: bounds.minX + 140.99, y: bounds.maxY - 32.03), controlPoint1: NSPoint(x: bounds.minX + 141.65, y: bounds.maxY - 34.26), controlPoint2: NSPoint(x: bounds.minX + 140.87, y: bounds.maxY - 33.31))
        capitalOneLogoPath.curve(to: NSPoint(x: bounds.minX + 141.16, y: bounds.maxY - 30.8), controlPoint1: NSPoint(x: bounds.minX + 141.02, y: bounds.maxY - 31.61), controlPoint2: NSPoint(x: bounds.minX + 141.16, y: bounds.maxY - 30.8))
        capitalOneLogoPath.curve(to: NSPoint(x: bounds.minX + 147.99, y: bounds.maxY - 27.07), controlPoint1: NSPoint(x: bounds.minX + 145.18, y: bounds.maxY - 30.56), controlPoint2: NSPoint(x: bounds.minX + 147.59, y: bounds.maxY - 29.84))
        capitalOneLogoPath.curve(to: NSPoint(x: bounds.minX + 145.64, y: bounds.maxY - 25.02), controlPoint1: NSPoint(x: bounds.minX + 148.13, y: bounds.maxY - 26.04), controlPoint2: NSPoint(x: bounds.minX + 147.22, y: bounds.maxY - 24.96))
        capitalOneLogoPath.close()
        capitalOneLogoPath.windingRule = .evenOddWindingRule
        logoWhite.setFill()
        capitalOneLogoPath.fill()
    }

    public static func drawEtradeButton(bounds: NSRect = NSRect(x: 0, y: 0, width: 191, height: 56), original: Bool = true, hover: Bool = false, pressed: Bool = false) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext

        //// Color Declarations
        let highlightGradientColor = NSColor(deviceRed: 1, green: 1, blue: 1, alpha: 0.09)
        let highlightGradientColor2 = NSColor(deviceRed: 1, green: 1, blue: 1, alpha: 0)
        let shadow2Color = NSColor(deviceRed: 1, green: 1, blue: 1, alpha: 0.36)
        let logoWhite = NSColor(deviceRed: 1, green: 1, blue: 1, alpha: 1)
        let etradeBackground = NSColor(deviceRed: 0.188, green: 0.255, blue: 0.357, alpha: 1)
        let etradeLogoStarLeftFill = NSColor(deviceRed: 0.388, green: 0.306, blue: 0.627, alpha: 1)
        let etradeLogoStarRightFill = NSColor(deviceRed: 0.6, green: 0.792, blue: 0.235, alpha: 1)

        //// Gradient Declarations
        let highlightGradient = NSGradient(starting: highlightGradientColor, ending: highlightGradientColor2)!

        //// Shadow Declarations
        let outerShadow = NSShadow()
        outerShadow.shadowColor = NSColor.black
        outerShadow.shadowOffset = NSSize(width: 0, height: 0)
        outerShadow.shadowBlurRadius = 0.5
        let innerStroke = NSShadow()
        innerStroke.shadowColor = shadow2Color
        innerStroke.shadowOffset = NSSize(width: 0, height: 0)
        innerStroke.shadowBlurRadius = 0.5

        if (original) {
            //// etrade
            NSGraphicsContext.saveGraphicsState()
            context.translateBy(x: bounds.minX + 95.5, y: bounds.maxY - 28)

            outerShadow.set()
            context.beginTransparencyLayer(auxiliaryInfo: nil)


            //// etradeBase Drawing
            let etradeBasePath = NSBezierPath(roundedRect: NSRect(x: -88.5, y: -21, width: 177, height: 42), xRadius: 5, yRadius: 5)
            etradeBackground.setFill()
            etradeBasePath.fill()


            //// etradeHighlight Drawing
            let etradeHighlightPath = NSBezierPath(roundedRect: NSRect(x: -88.5, y: -21, width: 177, height: 42), xRadius: 5, yRadius: 5)
            highlightGradient.draw(in: etradeHighlightPath, angle: -45)

            ////// etradeHighlight Inner Shadow
            NSGraphicsContext.saveGraphicsState()
            NSRectClip(etradeHighlightPath.bounds)
            context.setShadow(offset: NSSize.zero, blur: 0, color: nil)

            context.setAlpha(innerStroke.shadowColor!.alphaComponent)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            let etradeHighlightOpaqueShadow = NSShadow()
            etradeHighlightOpaqueShadow.shadowColor = innerStroke.shadowColor!.withAlphaComponent(1)
            etradeHighlightOpaqueShadow.shadowOffset = innerStroke.shadowOffset
            etradeHighlightOpaqueShadow.shadowBlurRadius = innerStroke.shadowBlurRadius
            etradeHighlightOpaqueShadow.set()

            context.setBlendMode(.sourceOut)
            context.beginTransparencyLayer(auxiliaryInfo: nil)

            etradeHighlightOpaqueShadow.shadowColor!.setFill()
            etradeHighlightPath.fill()

            context.endTransparencyLayer()
            context.endTransparencyLayer()
            NSGraphicsContext.restoreGraphicsState()



            context.endTransparencyLayer()

            NSGraphicsContext.restoreGraphicsState()
        }


        if (hover) {
            //// etradeHover
            NSGraphicsContext.saveGraphicsState()
            context.translateBy(x: bounds.minX + 95.5, y: bounds.maxY - 28)
            context.scaleBy(x: 1.05, y: 1.05)

            outerShadow.set()
            context.beginTransparencyLayer(auxiliaryInfo: nil)


            //// etradeBase 2 Drawing
            let etradeBase2Path = NSBezierPath(roundedRect: NSRect(x: -88.5, y: -21, width: 177, height: 42), xRadius: 5, yRadius: 5)
            etradeBackground.setFill()
            etradeBase2Path.fill()


            //// etradeHighlight 2 Drawing
            let etradeHighlight2Path = NSBezierPath(roundedRect: NSRect(x: -88.5, y: -21, width: 177, height: 42), xRadius: 5, yRadius: 5)
            highlightGradient.draw(in: etradeHighlight2Path, angle: -45)

            ////// etradeHighlight 2 Inner Shadow
            NSGraphicsContext.saveGraphicsState()
            NSRectClip(etradeHighlight2Path.bounds)
            context.setShadow(offset: NSSize.zero, blur: 0, color: nil)

            context.setAlpha(innerStroke.shadowColor!.alphaComponent)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            let etradeHighlight2OpaqueShadow = NSShadow()
            etradeHighlight2OpaqueShadow.shadowColor = innerStroke.shadowColor!.withAlphaComponent(1)
            etradeHighlight2OpaqueShadow.shadowOffset = innerStroke.shadowOffset
            etradeHighlight2OpaqueShadow.shadowBlurRadius = innerStroke.shadowBlurRadius
            etradeHighlight2OpaqueShadow.set()

            context.setBlendMode(.sourceOut)
            context.beginTransparencyLayer(auxiliaryInfo: nil)

            etradeHighlight2OpaqueShadow.shadowColor!.setFill()
            etradeHighlight2Path.fill()

            context.endTransparencyLayer()
            context.endTransparencyLayer()
            NSGraphicsContext.restoreGraphicsState()



            context.endTransparencyLayer()

            NSGraphicsContext.restoreGraphicsState()
        }


        if (pressed) {
            //// etradePressed
            NSGraphicsContext.saveGraphicsState()
            context.translateBy(x: bounds.minX + 95.5, y: bounds.maxY - 28)

            outerShadow.set()
            context.beginTransparencyLayer(auxiliaryInfo: nil)


            //// etradeBase 3 Drawing
            let etradeBase3Path = NSBezierPath(roundedRect: NSRect(x: -88.5, y: -21, width: 177, height: 42), xRadius: 5, yRadius: 5)
            etradeBackground.setFill()
            etradeBase3Path.fill()


            //// etradeHighlight 3 Drawing
            let etradeHighlight3Path = NSBezierPath(roundedRect: NSRect(x: -88.5, y: -21, width: 177, height: 42), xRadius: 5, yRadius: 5)
            highlightGradient.draw(in: etradeHighlight3Path, angle: -45)

            ////// etradeHighlight 3 Inner Shadow
            NSGraphicsContext.saveGraphicsState()
            NSRectClip(etradeHighlight3Path.bounds)
            context.setShadow(offset: NSSize.zero, blur: 0, color: nil)

            context.setAlpha(innerStroke.shadowColor!.alphaComponent)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            let etradeHighlight3OpaqueShadow = NSShadow()
            etradeHighlight3OpaqueShadow.shadowColor = innerStroke.shadowColor!.withAlphaComponent(1)
            etradeHighlight3OpaqueShadow.shadowOffset = innerStroke.shadowOffset
            etradeHighlight3OpaqueShadow.shadowBlurRadius = innerStroke.shadowBlurRadius
            etradeHighlight3OpaqueShadow.set()

            context.setBlendMode(.sourceOut)
            context.beginTransparencyLayer(auxiliaryInfo: nil)

            etradeHighlight3OpaqueShadow.shadowColor!.setFill()
            etradeHighlight3Path.fill()

            context.endTransparencyLayer()
            context.endTransparencyLayer()
            NSGraphicsContext.restoreGraphicsState()



            context.endTransparencyLayer()

            NSGraphicsContext.restoreGraphicsState()
        }


        //// etradeLogo
        //// starLeft Drawing
        let starLeftPath = NSBezierPath()
        starLeftPath.move(to: NSPoint(x: bounds.minX + 58.95, y: bounds.maxY - 21.99))
        starLeftPath.curve(to: NSPoint(x: bounds.minX + 61.63, y: bounds.maxY - 20.38), controlPoint1: NSPoint(x: bounds.minX + 59.84, y: bounds.maxY - 21.46), controlPoint2: NSPoint(x: bounds.minX + 60.74, y: bounds.maxY - 20.92))
        starLeftPath.curve(to: NSPoint(x: bounds.minX + 63.99, y: bounds.maxY - 24.56), controlPoint1: NSPoint(x: bounds.minX + 62.41, y: bounds.maxY - 21.77), controlPoint2: NSPoint(x: bounds.minX + 63.2, y: bounds.maxY - 23.17))
        starLeftPath.curve(to: NSPoint(x: bounds.minX + 65.82, y: bounds.maxY - 27.79), controlPoint1: NSPoint(x: bounds.minX + 64.61, y: bounds.maxY - 25.63), controlPoint2: NSPoint(x: bounds.minX + 65.22, y: bounds.maxY - 26.71))
        starLeftPath.curve(to: NSPoint(x: bounds.minX + 63.97, y: bounds.maxY - 31.06), controlPoint1: NSPoint(x: bounds.minX + 65.21, y: bounds.maxY - 28.88), controlPoint2: NSPoint(x: bounds.minX + 64.6, y: bounds.maxY - 29.97))
        starLeftPath.curve(to: NSPoint(x: bounds.minX + 61.63, y: bounds.maxY - 35.21), controlPoint1: NSPoint(x: bounds.minX + 63.19, y: bounds.maxY - 32.44), controlPoint2: NSPoint(x: bounds.minX + 62.41, y: bounds.maxY - 33.82))
        starLeftPath.curve(to: NSPoint(x: bounds.minX + 58.95, y: bounds.maxY - 33.64), controlPoint1: NSPoint(x: bounds.minX + 60.74, y: bounds.maxY - 34.68), controlPoint2: NSPoint(x: bounds.minX + 59.85, y: bounds.maxY - 34.16))
        starLeftPath.curve(to: NSPoint(x: bounds.minX + 61.35, y: bounds.maxY - 29.36), controlPoint1: NSPoint(x: bounds.minX + 59.72, y: bounds.maxY - 32.2), controlPoint2: NSPoint(x: bounds.minX + 60.56, y: bounds.maxY - 30.8))
        starLeftPath.curve(to: NSPoint(x: bounds.minX + 56.55, y: bounds.maxY - 29.36), controlPoint1: NSPoint(x: bounds.minX + 59.75, y: bounds.maxY - 29.36), controlPoint2: NSPoint(x: bounds.minX + 58.14, y: bounds.maxY - 29.36))
        starLeftPath.curve(to: NSPoint(x: bounds.minX + 56.54, y: bounds.maxY - 26.25), controlPoint1: NSPoint(x: bounds.minX + 56.55, y: bounds.maxY - 28.32), controlPoint2: NSPoint(x: bounds.minX + 56.55, y: bounds.maxY - 27.29))
        starLeftPath.line(to: NSPoint(x: bounds.minX + 61.35, y: bounds.maxY - 26.25))
        starLeftPath.curve(to: NSPoint(x: bounds.minX + 58.95, y: bounds.maxY - 21.99), controlPoint1: NSPoint(x: bounds.minX + 60.54, y: bounds.maxY - 24.83), controlPoint2: NSPoint(x: bounds.minX + 59.73, y: bounds.maxY - 23.42))
        starLeftPath.line(to: NSPoint(x: bounds.minX + 58.95, y: bounds.maxY - 21.99))
        starLeftPath.close()
        starLeftPath.windingRule = .evenOddWindingRule
        etradeLogoStarLeftFill.setFill()
        starLeftPath.fill()


        //// starRight Drawing
        let starRightPath = NSBezierPath()
        starRightPath.move(to: NSPoint(x: bounds.minX + 66.35, y: bounds.maxY - 20.38))
        starRightPath.curve(to: NSPoint(x: bounds.minX + 69.04, y: bounds.maxY - 22.02), controlPoint1: NSPoint(x: bounds.minX + 67.25, y: bounds.maxY - 20.93), controlPoint2: NSPoint(x: bounds.minX + 68.15, y: bounds.maxY - 21.46))
        starRightPath.curve(to: NSPoint(x: bounds.minX + 66.61, y: bounds.maxY - 26.25), controlPoint1: NSPoint(x: bounds.minX + 68.22, y: bounds.maxY - 23.42), controlPoint2: NSPoint(x: bounds.minX + 67.44, y: bounds.maxY - 24.85))
        starRightPath.curve(to: NSPoint(x: bounds.minX + 71.43, y: bounds.maxY - 26.25), controlPoint1: NSPoint(x: bounds.minX + 68.21, y: bounds.maxY - 26.25), controlPoint2: NSPoint(x: bounds.minX + 69.82, y: bounds.maxY - 26.25))
        starRightPath.curve(to: NSPoint(x: bounds.minX + 71.45, y: bounds.maxY - 29.35), controlPoint1: NSPoint(x: bounds.minX + 71.45, y: bounds.maxY - 27.28), controlPoint2: NSPoint(x: bounds.minX + 71.45, y: bounds.maxY - 28.32))
        starRightPath.curve(to: NSPoint(x: bounds.minX + 66.61, y: bounds.maxY - 29.36), controlPoint1: NSPoint(x: bounds.minX + 69.84, y: bounds.maxY - 29.37), controlPoint2: NSPoint(x: bounds.minX + 68.22, y: bounds.maxY - 29.36))
        starRightPath.curve(to: NSPoint(x: bounds.minX + 69.03, y: bounds.maxY - 33.63), controlPoint1: NSPoint(x: bounds.minX + 67.42, y: bounds.maxY - 30.78), controlPoint2: NSPoint(x: bounds.minX + 68.23, y: bounds.maxY - 32.2))
        starRightPath.curve(to: NSPoint(x: bounds.minX + 66.35, y: bounds.maxY - 35.2), controlPoint1: NSPoint(x: bounds.minX + 68.14, y: bounds.maxY - 34.15), controlPoint2: NSPoint(x: bounds.minX + 67.25, y: bounds.maxY - 34.68))
        starRightPath.curve(to: NSPoint(x: bounds.minX + 63.97, y: bounds.maxY - 31.06), controlPoint1: NSPoint(x: bounds.minX + 65.55, y: bounds.maxY - 33.82), controlPoint2: NSPoint(x: bounds.minX + 64.78, y: bounds.maxY - 32.43))
        starRightPath.curve(to: NSPoint(x: bounds.minX + 65.82, y: bounds.maxY - 27.79), controlPoint1: NSPoint(x: bounds.minX + 64.6, y: bounds.maxY - 29.97), controlPoint2: NSPoint(x: bounds.minX + 65.21, y: bounds.maxY - 28.88))
        starRightPath.curve(to: NSPoint(x: bounds.minX + 63.99, y: bounds.maxY - 24.56), controlPoint1: NSPoint(x: bounds.minX + 65.22, y: bounds.maxY - 26.71), controlPoint2: NSPoint(x: bounds.minX + 64.61, y: bounds.maxY - 25.63))
        starRightPath.curve(to: NSPoint(x: bounds.minX + 66.35, y: bounds.maxY - 20.38), controlPoint1: NSPoint(x: bounds.minX + 64.78, y: bounds.maxY - 23.16), controlPoint2: NSPoint(x: bounds.minX + 65.57, y: bounds.maxY - 21.78))
        starRightPath.line(to: NSPoint(x: bounds.minX + 66.35, y: bounds.maxY - 20.38))
        starRightPath.close()
        starRightPath.windingRule = .evenOddWindingRule
        etradeLogoStarRightFill.setFill()
        starRightPath.fill()


        //// text Drawing
        let textPath = NSBezierPath()
        textPath.move(to: NSPoint(x: bounds.minX + 44, y: bounds.maxY - 22.12))
        textPath.curve(to: NSPoint(x: bounds.minX + 56.33, y: bounds.maxY - 22.06), controlPoint1: NSPoint(x: bounds.minX + 48.11, y: bounds.maxY - 22.01), controlPoint2: NSPoint(x: bounds.minX + 52.22, y: bounds.maxY - 22.16))
        textPath.curve(to: NSPoint(x: bounds.minX + 56.34, y: bounds.maxY - 24.18), controlPoint1: NSPoint(x: bounds.minX + 56.33, y: bounds.maxY - 22.77), controlPoint2: NSPoint(x: bounds.minX + 56.34, y: bounds.maxY - 23.48))
        textPath.curve(to: NSPoint(x: bounds.minX + 46.83, y: bounds.maxY - 24.18), controlPoint1: NSPoint(x: bounds.minX + 53.17, y: bounds.maxY - 24.19), controlPoint2: NSPoint(x: bounds.minX + 50, y: bounds.maxY - 24.19))
        textPath.curve(to: NSPoint(x: bounds.minX + 46.84, y: bounds.maxY - 26.72), controlPoint1: NSPoint(x: bounds.minX + 46.83, y: bounds.maxY - 25.03), controlPoint2: NSPoint(x: bounds.minX + 46.83, y: bounds.maxY - 25.87))
        textPath.curve(to: NSPoint(x: bounds.minX + 53.37, y: bounds.maxY - 26.71), controlPoint1: NSPoint(x: bounds.minX + 49.02, y: bounds.maxY - 26.71), controlPoint2: NSPoint(x: bounds.minX + 51.19, y: bounds.maxY - 26.72))
        textPath.curve(to: NSPoint(x: bounds.minX + 53.37, y: bounds.maxY - 28.76), controlPoint1: NSPoint(x: bounds.minX + 53.37, y: bounds.maxY - 27.39), controlPoint2: NSPoint(x: bounds.minX + 53.37, y: bounds.maxY - 28.08))
        textPath.curve(to: NSPoint(x: bounds.minX + 46.83, y: bounds.maxY - 28.75), controlPoint1: NSPoint(x: bounds.minX + 51.19, y: bounds.maxY - 28.75), controlPoint2: NSPoint(x: bounds.minX + 49.01, y: bounds.maxY - 28.76))
        textPath.curve(to: NSPoint(x: bounds.minX + 46.83, y: bounds.maxY - 31.46), controlPoint1: NSPoint(x: bounds.minX + 46.83, y: bounds.maxY - 29.66), controlPoint2: NSPoint(x: bounds.minX + 46.83, y: bounds.maxY - 30.56))
        textPath.curve(to: NSPoint(x: bounds.minX + 56.56, y: bounds.maxY - 31.46), controlPoint1: NSPoint(x: bounds.minX + 50.07, y: bounds.maxY - 31.45), controlPoint2: NSPoint(x: bounds.minX + 53.31, y: bounds.maxY - 31.46))
        textPath.line(to: NSPoint(x: bounds.minX + 56.56, y: bounds.maxY - 33.62))
        textPath.curve(to: NSPoint(x: bounds.minX + 44, y: bounds.maxY - 33.61), controlPoint1: NSPoint(x: bounds.minX + 52.37, y: bounds.maxY - 33.61), controlPoint2: NSPoint(x: bounds.minX + 48.18, y: bounds.maxY - 33.63))
        textPath.line(to: NSPoint(x: bounds.minX + 44, y: bounds.maxY - 22.12))
        textPath.close()
        textPath.move(to: NSPoint(x: bounds.minX + 71.38, y: bounds.maxY - 22.12))
        textPath.curve(to: NSPoint(x: bounds.minX + 85.43, y: bounds.maxY - 22.08), controlPoint1: NSPoint(x: bounds.minX + 76.07, y: bounds.maxY - 22.06), controlPoint2: NSPoint(x: bounds.minX + 80.75, y: bounds.maxY - 22.06))
        textPath.curve(to: NSPoint(x: bounds.minX + 85.42, y: bounds.maxY - 24.29), controlPoint1: NSPoint(x: bounds.minX + 85.43, y: bounds.maxY - 22.82), controlPoint2: NSPoint(x: bounds.minX + 85.43, y: bounds.maxY - 23.55))
        textPath.curve(to: NSPoint(x: bounds.minX + 79.82, y: bounds.maxY - 24.29), controlPoint1: NSPoint(x: bounds.minX + 83.55, y: bounds.maxY - 24.28), controlPoint2: NSPoint(x: bounds.minX + 81.69, y: bounds.maxY - 24.28))
        textPath.curve(to: NSPoint(x: bounds.minX + 79.87, y: bounds.maxY - 33.64), controlPoint1: NSPoint(x: bounds.minX + 79.87, y: bounds.maxY - 27.41), controlPoint2: NSPoint(x: bounds.minX + 79.82, y: bounds.maxY - 30.52))
        textPath.curve(to: NSPoint(x: bounds.minX + 76.99, y: bounds.maxY - 33.65), controlPoint1: NSPoint(x: bounds.minX + 78.91, y: bounds.maxY - 33.65), controlPoint2: NSPoint(x: bounds.minX + 77.95, y: bounds.maxY - 33.64))
        textPath.curve(to: NSPoint(x: bounds.minX + 76.99, y: bounds.maxY - 24.28), controlPoint1: NSPoint(x: bounds.minX + 76.99, y: bounds.maxY - 30.53), controlPoint2: NSPoint(x: bounds.minX + 76.99, y: bounds.maxY - 27.4))
        textPath.curve(to: NSPoint(x: bounds.minX + 71.45, y: bounds.maxY - 24.29), controlPoint1: NSPoint(x: bounds.minX + 75.14, y: bounds.maxY - 24.29), controlPoint2: NSPoint(x: bounds.minX + 73.3, y: bounds.maxY - 24.28))
        textPath.curve(to: NSPoint(x: bounds.minX + 71.38, y: bounds.maxY - 22.12), controlPoint1: NSPoint(x: bounds.minX + 71.4, y: bounds.maxY - 23.57), controlPoint2: NSPoint(x: bounds.minX + 71.39, y: bounds.maxY - 22.84))
        textPath.close()
        textPath.move(to: NSPoint(x: bounds.minX + 87.04, y: bounds.maxY - 22.06))
        textPath.curve(to: NSPoint(x: bounds.minX + 93.97, y: bounds.maxY - 22.11), controlPoint1: NSPoint(x: bounds.minX + 89.35, y: bounds.maxY - 22.16), controlPoint2: NSPoint(x: bounds.minX + 91.66, y: bounds.maxY - 22.01))
        textPath.curve(to: NSPoint(x: bounds.minX + 99.19, y: bounds.maxY - 22.83), controlPoint1: NSPoint(x: bounds.minX + 95.71, y: bounds.maxY - 22.19), controlPoint2: NSPoint(x: bounds.minX + 97.65, y: bounds.maxY - 21.79))
        textPath.curve(to: NSPoint(x: bounds.minX + 100.22, y: bounds.maxY - 27.99), controlPoint1: NSPoint(x: bounds.minX + 100.89, y: bounds.maxY - 23.88), controlPoint2: NSPoint(x: bounds.minX + 101.24, y: bounds.maxY - 26.36))
        textPath.curve(to: NSPoint(x: bounds.minX + 98.18, y: bounds.maxY - 29.39), controlPoint1: NSPoint(x: bounds.minX + 99.76, y: bounds.maxY - 28.71), controlPoint2: NSPoint(x: bounds.minX + 98.95, y: bounds.maxY - 29.08))
        textPath.curve(to: NSPoint(x: bounds.minX + 101.1, y: bounds.maxY - 33.64), controlPoint1: NSPoint(x: bounds.minX + 99.17, y: bounds.maxY - 30.79), controlPoint2: NSPoint(x: bounds.minX + 100.11, y: bounds.maxY - 32.23))
        textPath.curve(to: NSPoint(x: bounds.minX + 97.92, y: bounds.maxY - 33.59), controlPoint1: NSPoint(x: bounds.minX + 100.04, y: bounds.maxY - 33.62), controlPoint2: NSPoint(x: bounds.minX + 98.98, y: bounds.maxY - 33.71))
        textPath.curve(to: NSPoint(x: bounds.minX + 95.11, y: bounds.maxY - 29.55), controlPoint1: NSPoint(x: bounds.minX + 96.94, y: bounds.maxY - 32.28), controlPoint2: NSPoint(x: bounds.minX + 96.07, y: bounds.maxY - 30.88))
        textPath.curve(to: NSPoint(x: bounds.minX + 89.83, y: bounds.maxY - 29.56), controlPoint1: NSPoint(x: bounds.minX + 93.35, y: bounds.maxY - 29.56), controlPoint2: NSPoint(x: bounds.minX + 91.59, y: bounds.maxY - 29.55))
        textPath.curve(to: NSPoint(x: bounds.minX + 89.84, y: bounds.maxY - 33.65), controlPoint1: NSPoint(x: bounds.minX + 89.83, y: bounds.maxY - 30.92), controlPoint2: NSPoint(x: bounds.minX + 89.83, y: bounds.maxY - 32.28))
        textPath.curve(to: NSPoint(x: bounds.minX + 87.04, y: bounds.maxY - 33.65), controlPoint1: NSPoint(x: bounds.minX + 88.9, y: bounds.maxY - 33.64), controlPoint2: NSPoint(x: bounds.minX + 87.97, y: bounds.maxY - 33.64))
        textPath.curve(to: NSPoint(x: bounds.minX + 87.04, y: bounds.maxY - 22.06), controlPoint1: NSPoint(x: bounds.minX + 87.04, y: bounds.maxY - 29.79), controlPoint2: NSPoint(x: bounds.minX + 87.03, y: bounds.maxY - 25.93))
        textPath.close()
        textPath.move(to: NSPoint(x: bounds.minX + 101.75, y: bounds.maxY - 33.65))
        textPath.curve(to: NSPoint(x: bounds.minX + 108.58, y: bounds.maxY - 22.11), controlPoint1: NSPoint(x: bounds.minX + 104.04, y: bounds.maxY - 29.82), controlPoint2: NSPoint(x: bounds.minX + 106.29, y: bounds.maxY - 25.95))
        textPath.curve(to: NSPoint(x: bounds.minX + 111.37, y: bounds.maxY - 22.11), controlPoint1: NSPoint(x: bounds.minX + 109.51, y: bounds.maxY - 22.12), controlPoint2: NSPoint(x: bounds.minX + 110.44, y: bounds.maxY - 22.12))
        textPath.curve(to: NSPoint(x: bounds.minX + 118.3, y: bounds.maxY - 33.66), controlPoint1: NSPoint(x: bounds.minX + 113.68, y: bounds.maxY - 25.96), controlPoint2: NSPoint(x: bounds.minX + 116.01, y: bounds.maxY - 29.8))
        textPath.curve(to: NSPoint(x: bounds.minX + 115.12, y: bounds.maxY - 33.66), controlPoint1: NSPoint(x: bounds.minX + 117.24, y: bounds.maxY - 33.65), controlPoint2: NSPoint(x: bounds.minX + 116.18, y: bounds.maxY - 33.65))
        textPath.curve(to: NSPoint(x: bounds.minX + 113.67, y: bounds.maxY - 31.36), controlPoint1: NSPoint(x: bounds.minX + 114.64, y: bounds.maxY - 32.89), controlPoint2: NSPoint(x: bounds.minX + 114.15, y: bounds.maxY - 32.13))
        textPath.curve(to: NSPoint(x: bounds.minX + 105.99, y: bounds.maxY - 31.36), controlPoint1: NSPoint(x: bounds.minX + 111.11, y: bounds.maxY - 31.37), controlPoint2: NSPoint(x: bounds.minX + 108.55, y: bounds.maxY - 31.36))
        textPath.curve(to: NSPoint(x: bounds.minX + 104.58, y: bounds.maxY - 33.66), controlPoint1: NSPoint(x: bounds.minX + 105.53, y: bounds.maxY - 32.13), controlPoint2: NSPoint(x: bounds.minX + 105.06, y: bounds.maxY - 32.89))
        textPath.curve(to: NSPoint(x: bounds.minX + 101.75, y: bounds.maxY - 33.65), controlPoint1: NSPoint(x: bounds.minX + 103.64, y: bounds.maxY - 33.65), controlPoint2: NSPoint(x: bounds.minX + 102.69, y: bounds.maxY - 33.65))
        textPath.close()
        textPath.move(to: NSPoint(x: bounds.minX + 119.05, y: bounds.maxY - 22.07))
        textPath.curve(to: NSPoint(x: bounds.minX + 127.66, y: bounds.maxY - 22.15), controlPoint1: NSPoint(x: bounds.minX + 121.92, y: bounds.maxY - 22.18), controlPoint2: NSPoint(x: bounds.minX + 124.79, y: bounds.maxY - 21.97))
        textPath.curve(to: NSPoint(x: bounds.minX + 132.76, y: bounds.maxY - 24.84), controlPoint1: NSPoint(x: bounds.minX + 129.62, y: bounds.maxY - 22.28), controlPoint2: NSPoint(x: bounds.minX + 131.76, y: bounds.maxY - 23.03))
        textPath.curve(to: NSPoint(x: bounds.minX + 131.51, y: bounds.maxY - 32.15), controlPoint1: NSPoint(x: bounds.minX + 134, y: bounds.maxY - 27.18), controlPoint2: NSPoint(x: bounds.minX + 133.68, y: bounds.maxY - 30.46))
        textPath.curve(to: NSPoint(x: bounds.minX + 126.56, y: bounds.maxY - 33.64), controlPoint1: NSPoint(x: bounds.minX + 130.15, y: bounds.maxY - 33.33), controlPoint2: NSPoint(x: bounds.minX + 128.3, y: bounds.maxY - 33.62))
        textPath.curve(to: NSPoint(x: bounds.minX + 119.03, y: bounds.maxY - 33.65), controlPoint1: NSPoint(x: bounds.minX + 124.05, y: bounds.maxY - 33.65), controlPoint2: NSPoint(x: bounds.minX + 121.54, y: bounds.maxY - 33.63))
        textPath.curve(to: NSPoint(x: bounds.minX + 119.05, y: bounds.maxY - 22.07), controlPoint1: NSPoint(x: bounds.minX + 119.05, y: bounds.maxY - 29.79), controlPoint2: NSPoint(x: bounds.minX + 119.03, y: bounds.maxY - 25.93))
        textPath.close()
        textPath.move(to: NSPoint(x: bounds.minX + 135.28, y: bounds.maxY - 22.12))
        textPath.curve(to: NSPoint(x: bounds.minX + 147.58, y: bounds.maxY - 22.07), controlPoint1: NSPoint(x: bounds.minX + 139.38, y: bounds.maxY - 22.05), controlPoint2: NSPoint(x: bounds.minX + 143.48, y: bounds.maxY - 22.12))
        textPath.curve(to: NSPoint(x: bounds.minX + 147.58, y: bounds.maxY - 24.2), controlPoint1: NSPoint(x: bounds.minX + 147.58, y: bounds.maxY - 22.78), controlPoint2: NSPoint(x: bounds.minX + 147.58, y: bounds.maxY - 23.49))
        textPath.curve(to: NSPoint(x: bounds.minX + 138.08, y: bounds.maxY - 24.18), controlPoint1: NSPoint(x: bounds.minX + 144.41, y: bounds.maxY - 24.17), controlPoint2: NSPoint(x: bounds.minX + 141.25, y: bounds.maxY - 24.19))
        textPath.curve(to: NSPoint(x: bounds.minX + 138.08, y: bounds.maxY - 26.71), controlPoint1: NSPoint(x: bounds.minX + 138.08, y: bounds.maxY - 25.02), controlPoint2: NSPoint(x: bounds.minX + 138.08, y: bounds.maxY - 25.87))
        textPath.curve(to: NSPoint(x: bounds.minX + 144.6, y: bounds.maxY - 26.7), controlPoint1: NSPoint(x: bounds.minX + 140.26, y: bounds.maxY - 26.72), controlPoint2: NSPoint(x: bounds.minX + 142.43, y: bounds.maxY - 26.72))
        textPath.curve(to: NSPoint(x: bounds.minX + 144.61, y: bounds.maxY - 28.76), controlPoint1: NSPoint(x: bounds.minX + 144.61, y: bounds.maxY - 27.39), controlPoint2: NSPoint(x: bounds.minX + 144.61, y: bounds.maxY - 28.08))
        textPath.curve(to: NSPoint(x: bounds.minX + 138.08, y: bounds.maxY - 28.75), controlPoint1: NSPoint(x: bounds.minX + 142.43, y: bounds.maxY - 28.75), controlPoint2: NSPoint(x: bounds.minX + 140.26, y: bounds.maxY - 28.76))
        textPath.curve(to: NSPoint(x: bounds.minX + 138.08, y: bounds.maxY - 31.46), controlPoint1: NSPoint(x: bounds.minX + 138.08, y: bounds.maxY - 29.66), controlPoint2: NSPoint(x: bounds.minX + 138.08, y: bounds.maxY - 30.56))
        textPath.curve(to: NSPoint(x: bounds.minX + 147.79, y: bounds.maxY - 31.46), controlPoint1: NSPoint(x: bounds.minX + 141.32, y: bounds.maxY - 31.45), controlPoint2: NSPoint(x: bounds.minX + 144.55, y: bounds.maxY - 31.46))
        textPath.curve(to: NSPoint(x: bounds.minX + 147.79, y: bounds.maxY - 33.62), controlPoint1: NSPoint(x: bounds.minX + 147.79, y: bounds.maxY - 32.18), controlPoint2: NSPoint(x: bounds.minX + 147.79, y: bounds.maxY - 32.9))
        textPath.curve(to: NSPoint(x: bounds.minX + 135.28, y: bounds.maxY - 33.62), controlPoint1: NSPoint(x: bounds.minX + 143.62, y: bounds.maxY - 33.62), controlPoint2: NSPoint(x: bounds.minX + 139.45, y: bounds.maxY - 33.62))
        textPath.curve(to: NSPoint(x: bounds.minX + 135.28, y: bounds.maxY - 22.12), controlPoint1: NSPoint(x: bounds.minX + 135.29, y: bounds.maxY - 29.79), controlPoint2: NSPoint(x: bounds.minX + 135.28, y: bounds.maxY - 25.95))
        textPath.close()
        textPath.move(to: NSPoint(x: bounds.minX + 121.88, y: bounds.maxY - 24.29))
        textPath.curve(to: NSPoint(x: bounds.minX + 127.12, y: bounds.maxY - 24.3), controlPoint1: NSPoint(x: bounds.minX + 123.62, y: bounds.maxY - 24.29), controlPoint2: NSPoint(x: bounds.minX + 125.37, y: bounds.maxY - 24.26))
        textPath.curve(to: NSPoint(x: bounds.minX + 130.25, y: bounds.maxY - 25.93), controlPoint1: NSPoint(x: bounds.minX + 128.32, y: bounds.maxY - 24.33), controlPoint2: NSPoint(x: bounds.minX + 129.67, y: bounds.maxY - 24.79))
        textPath.curve(to: NSPoint(x: bounds.minX + 130.23, y: bounds.maxY - 29.82), controlPoint1: NSPoint(x: bounds.minX + 130.83, y: bounds.maxY - 27.14), controlPoint2: NSPoint(x: bounds.minX + 130.82, y: bounds.maxY - 28.62))
        textPath.curve(to: NSPoint(x: bounds.minX + 127.1, y: bounds.maxY - 31.3), controlPoint1: NSPoint(x: bounds.minX + 129.62, y: bounds.maxY - 30.93), controlPoint2: NSPoint(x: bounds.minX + 128.25, y: bounds.maxY - 31.19))
        textPath.curve(to: NSPoint(x: bounds.minX + 121.88, y: bounds.maxY - 31.35), controlPoint1: NSPoint(x: bounds.minX + 125.36, y: bounds.maxY - 31.41), controlPoint2: NSPoint(x: bounds.minX + 123.62, y: bounds.maxY - 31.32))
        textPath.line(to: NSPoint(x: bounds.minX + 121.88, y: bounds.maxY - 24.29))
        textPath.close()
        textPath.move(to: NSPoint(x: bounds.minX + 107.2, y: bounds.maxY - 29.18))
        textPath.curve(to: NSPoint(x: bounds.minX + 109.91, y: bounds.maxY - 24.5), controlPoint1: NSPoint(x: bounds.minX + 108.09, y: bounds.maxY - 27.62), controlPoint2: NSPoint(x: bounds.minX + 108.99, y: bounds.maxY - 26.06))
        textPath.curve(to: NSPoint(x: bounds.minX + 112.51, y: bounds.maxY - 29.18), controlPoint1: NSPoint(x: bounds.minX + 110.77, y: bounds.maxY - 26.06), controlPoint2: NSPoint(x: bounds.minX + 111.64, y: bounds.maxY - 27.63))
        textPath.curve(to: NSPoint(x: bounds.minX + 107.2, y: bounds.maxY - 29.18), controlPoint1: NSPoint(x: bounds.minX + 110.74, y: bounds.maxY - 29.18), controlPoint2: NSPoint(x: bounds.minX + 108.97, y: bounds.maxY - 29.18))
        textPath.close()
        textPath.move(to: NSPoint(x: bounds.minX + 89.83, y: bounds.maxY - 24.31))
        textPath.curve(to: NSPoint(x: bounds.minX + 96.16, y: bounds.maxY - 24.31), controlPoint1: NSPoint(x: bounds.minX + 91.94, y: bounds.maxY - 24.32), controlPoint2: NSPoint(x: bounds.minX + 94.05, y: bounds.maxY - 24.3))
        textPath.curve(to: NSPoint(x: bounds.minX + 97.9, y: bounds.maxY - 25.19), controlPoint1: NSPoint(x: bounds.minX + 96.83, y: bounds.maxY - 24.3), controlPoint2: NSPoint(x: bounds.minX + 97.57, y: bounds.maxY - 24.56))
        textPath.curve(to: NSPoint(x: bounds.minX + 97.5, y: bounds.maxY - 26.94), controlPoint1: NSPoint(x: bounds.minX + 98.1, y: bounds.maxY - 25.78), controlPoint2: NSPoint(x: bounds.minX + 98.06, y: bounds.maxY - 26.56))
        textPath.curve(to: NSPoint(x: bounds.minX + 95.61, y: bounds.maxY - 27.35), controlPoint1: NSPoint(x: bounds.minX + 96.97, y: bounds.maxY - 27.37), controlPoint2: NSPoint(x: bounds.minX + 96.25, y: bounds.maxY - 27.32))
        textPath.curve(to: NSPoint(x: bounds.minX + 89.83, y: bounds.maxY - 27.34), controlPoint1: NSPoint(x: bounds.minX + 93.68, y: bounds.maxY - 27.34), controlPoint2: NSPoint(x: bounds.minX + 91.76, y: bounds.maxY - 27.34))
        textPath.line(to: NSPoint(x: bounds.minX + 89.83, y: bounds.maxY - 24.31))
        textPath.close()
        textPath.windingRule = .evenOddWindingRule
        logoWhite.setFill()
        textPath.fill()
    }

    public static func drawScottradeButton(bounds: NSRect = NSRect(x: 0, y: 0, width: 191, height: 56), original: Bool = true, hover: Bool = false, pressed: Bool = false) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext

        //// Color Declarations
        let highlightGradientColor = NSColor(deviceRed: 1, green: 1, blue: 1, alpha: 0.09)
        let highlightGradientColor2 = NSColor(deviceRed: 1, green: 1, blue: 1, alpha: 0)
        let shadow2Color = NSColor(deviceRed: 1, green: 1, blue: 1, alpha: 0.36)
        let logoWhite = NSColor(deviceRed: 1, green: 1, blue: 1, alpha: 1)
        let scottradeBackground = NSColor(deviceRed: 0.341, green: 0.145, blue: 0.482, alpha: 1)

        //// Gradient Declarations
        let highlightGradient = NSGradient(starting: highlightGradientColor, ending: highlightGradientColor2)!

        //// Shadow Declarations
        let outerShadow = NSShadow()
        outerShadow.shadowColor = NSColor.black
        outerShadow.shadowOffset = NSSize(width: 0, height: 0)
        outerShadow.shadowBlurRadius = 0.5
        let innerStroke = NSShadow()
        innerStroke.shadowColor = shadow2Color
        innerStroke.shadowOffset = NSSize(width: 0, height: 0)
        innerStroke.shadowBlurRadius = 0.5

        if (original) {
            //// scottrade
            NSGraphicsContext.saveGraphicsState()
            context.translateBy(x: bounds.minX + 95.5, y: bounds.maxY - 28)

            outerShadow.set()
            context.beginTransparencyLayer(auxiliaryInfo: nil)


            //// scottradeBase Drawing
            let scottradeBasePath = NSBezierPath(roundedRect: NSRect(x: -88.5, y: -21, width: 177, height: 42), xRadius: 5, yRadius: 5)
            scottradeBackground.setFill()
            scottradeBasePath.fill()


            //// scottradeHighlight Drawing
            let scottradeHighlightPath = NSBezierPath(roundedRect: NSRect(x: -88.5, y: -21, width: 177, height: 42), xRadius: 5, yRadius: 5)
            highlightGradient.draw(in: scottradeHighlightPath, angle: -45)

            ////// scottradeHighlight Inner Shadow
            NSGraphicsContext.saveGraphicsState()
            NSRectClip(scottradeHighlightPath.bounds)
            context.setShadow(offset: NSSize.zero, blur: 0, color: nil)

            context.setAlpha(innerStroke.shadowColor!.alphaComponent)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            let scottradeHighlightOpaqueShadow = NSShadow()
            scottradeHighlightOpaqueShadow.shadowColor = innerStroke.shadowColor!.withAlphaComponent(1)
            scottradeHighlightOpaqueShadow.shadowOffset = innerStroke.shadowOffset
            scottradeHighlightOpaqueShadow.shadowBlurRadius = innerStroke.shadowBlurRadius
            scottradeHighlightOpaqueShadow.set()

            context.setBlendMode(.sourceOut)
            context.beginTransparencyLayer(auxiliaryInfo: nil)

            scottradeHighlightOpaqueShadow.shadowColor!.setFill()
            scottradeHighlightPath.fill()

            context.endTransparencyLayer()
            context.endTransparencyLayer()
            NSGraphicsContext.restoreGraphicsState()



            context.endTransparencyLayer()

            NSGraphicsContext.restoreGraphicsState()
        }


        if (hover) {
            //// scottradeHover
            NSGraphicsContext.saveGraphicsState()
            context.translateBy(x: bounds.minX + 95.5, y: bounds.maxY - 28)
            context.scaleBy(x: 1.05, y: 1.05)

            outerShadow.set()
            context.beginTransparencyLayer(auxiliaryInfo: nil)


            //// scottradeBase 2 Drawing
            let scottradeBase2Path = NSBezierPath(roundedRect: NSRect(x: -88.5, y: -21, width: 177, height: 42), xRadius: 5, yRadius: 5)
            scottradeBackground.setFill()
            scottradeBase2Path.fill()


            //// scottradeHighlight 2 Drawing
            let scottradeHighlight2Path = NSBezierPath(roundedRect: NSRect(x: -88.5, y: -21, width: 177, height: 42), xRadius: 5, yRadius: 5)
            highlightGradient.draw(in: scottradeHighlight2Path, angle: -45)

            ////// scottradeHighlight 2 Inner Shadow
            NSGraphicsContext.saveGraphicsState()
            NSRectClip(scottradeHighlight2Path.bounds)
            context.setShadow(offset: NSSize.zero, blur: 0, color: nil)

            context.setAlpha(innerStroke.shadowColor!.alphaComponent)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            let scottradeHighlight2OpaqueShadow = NSShadow()
            scottradeHighlight2OpaqueShadow.shadowColor = innerStroke.shadowColor!.withAlphaComponent(1)
            scottradeHighlight2OpaqueShadow.shadowOffset = innerStroke.shadowOffset
            scottradeHighlight2OpaqueShadow.shadowBlurRadius = innerStroke.shadowBlurRadius
            scottradeHighlight2OpaqueShadow.set()

            context.setBlendMode(.sourceOut)
            context.beginTransparencyLayer(auxiliaryInfo: nil)

            scottradeHighlight2OpaqueShadow.shadowColor!.setFill()
            scottradeHighlight2Path.fill()

            context.endTransparencyLayer()
            context.endTransparencyLayer()
            NSGraphicsContext.restoreGraphicsState()



            context.endTransparencyLayer()

            NSGraphicsContext.restoreGraphicsState()
        }


        if (pressed) {
            //// scottradePressed
            NSGraphicsContext.saveGraphicsState()
            context.translateBy(x: bounds.minX + 95.5, y: bounds.maxY - 28)

            outerShadow.set()
            context.beginTransparencyLayer(auxiliaryInfo: nil)


            //// scottradeBase 3 Drawing
            let scottradeBase3Path = NSBezierPath(roundedRect: NSRect(x: -88.5, y: -21, width: 177, height: 42), xRadius: 5, yRadius: 5)
            scottradeBackground.setFill()
            scottradeBase3Path.fill()


            //// scottradeHighlight 3 Drawing
            let scottradeHighlight3Path = NSBezierPath(roundedRect: NSRect(x: -88.5, y: -21, width: 177, height: 42), xRadius: 5, yRadius: 5)
            highlightGradient.draw(in: scottradeHighlight3Path, angle: -45)

            ////// scottradeHighlight 3 Inner Shadow
            NSGraphicsContext.saveGraphicsState()
            NSRectClip(scottradeHighlight3Path.bounds)
            context.setShadow(offset: NSSize.zero, blur: 0, color: nil)

            context.setAlpha(innerStroke.shadowColor!.alphaComponent)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            let scottradeHighlight3OpaqueShadow = NSShadow()
            scottradeHighlight3OpaqueShadow.shadowColor = innerStroke.shadowColor!.withAlphaComponent(1)
            scottradeHighlight3OpaqueShadow.shadowOffset = innerStroke.shadowOffset
            scottradeHighlight3OpaqueShadow.shadowBlurRadius = innerStroke.shadowBlurRadius
            scottradeHighlight3OpaqueShadow.set()

            context.setBlendMode(.sourceOut)
            context.beginTransparencyLayer(auxiliaryInfo: nil)

            scottradeHighlight3OpaqueShadow.shadowColor!.setFill()
            scottradeHighlight3Path.fill()

            context.endTransparencyLayer()
            context.endTransparencyLayer()
            NSGraphicsContext.restoreGraphicsState()



            context.endTransparencyLayer()

            NSGraphicsContext.restoreGraphicsState()
        }


        //// scottradeLogo
        //// path11857 Drawing
        let path11857Path = NSBezierPath()
        path11857Path.move(to: NSPoint(x: bounds.minX + 103.12, y: bounds.maxY - 26.48))
        path11857Path.curve(to: NSPoint(x: bounds.minX + 103.4, y: bounds.maxY - 25.1), controlPoint1: NSPoint(x: bounds.minX + 103.23, y: bounds.maxY - 26.04), controlPoint2: NSPoint(x: bounds.minX + 103.34, y: bounds.maxY - 25.59))
        path11857Path.line(to: NSPoint(x: bounds.minX + 100.44, y: bounds.maxY - 25.1))
        path11857Path.curve(to: NSPoint(x: bounds.minX + 98.05, y: bounds.maxY - 36.22), controlPoint1: NSPoint(x: bounds.minX + 99.64, y: bounds.maxY - 28.8), controlPoint2: NSPoint(x: bounds.minX + 98.86, y: bounds.maxY - 32.53))
        path11857Path.curve(to: NSPoint(x: bounds.minX + 101.17, y: bounds.maxY - 36.26), controlPoint1: NSPoint(x: bounds.minX + 98.79, y: bounds.maxY - 36.26), controlPoint2: NSPoint(x: bounds.minX + 100.24, y: bounds.maxY - 36.16))
        path11857Path.curve(to: NSPoint(x: bounds.minX + 102.02, y: bounds.maxY - 32.29), controlPoint1: NSPoint(x: bounds.minX + 101.45, y: bounds.maxY - 35.15), controlPoint2: NSPoint(x: bounds.minX + 101.72, y: bounds.maxY - 33.73))
        path11857Path.curve(to: NSPoint(x: bounds.minX + 105.84, y: bounds.maxY - 27.66), controlPoint1: NSPoint(x: bounds.minX + 102.54, y: bounds.maxY - 29.79), controlPoint2: NSPoint(x: bounds.minX + 102.75, y: bounds.maxY - 27.34))
        path11857Path.curve(to: NSPoint(x: bounds.minX + 106.45, y: bounds.maxY - 24.9), controlPoint1: NSPoint(x: bounds.minX + 106.05, y: bounds.maxY - 26.75), controlPoint2: NSPoint(x: bounds.minX + 106.22, y: bounds.maxY - 25.8))
        path11857Path.curve(to: NSPoint(x: bounds.minX + 103.12, y: bounds.maxY - 26.48), controlPoint1: NSPoint(x: bounds.minX + 104.79, y: bounds.maxY - 24.85), controlPoint2: NSPoint(x: bounds.minX + 103.82, y: bounds.maxY - 25.71))
        path11857Path.close()
        path11857Path.move(to: NSPoint(x: bounds.minX + 74.72, y: bounds.maxY - 25.83))
        path11857Path.curve(to: NSPoint(x: bounds.minX + 71.07, y: bounds.maxY - 24.94), controlPoint1: NSPoint(x: bounds.minX + 73.92, y: bounds.maxY - 24.99), controlPoint2: NSPoint(x: bounds.minX + 72.4, y: bounds.maxY - 24.86))
        path11857Path.curve(to: NSPoint(x: bounds.minX + 65.96, y: bounds.maxY - 30.01), controlPoint1: NSPoint(x: bounds.minX + 67.81, y: bounds.maxY - 25.15), controlPoint2: NSPoint(x: bounds.minX + 66.67, y: bounds.maxY - 27.02))
        path11857Path.curve(to: NSPoint(x: bounds.minX + 65.59, y: bounds.maxY - 34.6), controlPoint1: NSPoint(x: bounds.minX + 65.62, y: bounds.maxY - 31.45), controlPoint2: NSPoint(x: bounds.minX + 65.19, y: bounds.maxY - 33.25))
        path11857Path.curve(to: NSPoint(x: bounds.minX + 73.02, y: bounds.maxY - 35.21), controlPoint1: NSPoint(x: bounds.minX + 66.39, y: bounds.maxY - 37.23), controlPoint2: NSPoint(x: bounds.minX + 71.31, y: bounds.maxY - 36.7))
        path11857Path.curve(to: NSPoint(x: bounds.minX + 74.6, y: bounds.maxY - 32.16), controlPoint1: NSPoint(x: bounds.minX + 73.86, y: bounds.maxY - 34.46), controlPoint2: NSPoint(x: bounds.minX + 74.27, y: bounds.maxY - 33.54))
        path11857Path.curve(to: NSPoint(x: bounds.minX + 71.48, y: bounds.maxY - 32.12), controlPoint1: NSPoint(x: bounds.minX + 73.82, y: bounds.maxY - 32.07), controlPoint2: NSPoint(x: bounds.minX + 72.19, y: bounds.maxY - 32.16))
        path11857Path.curve(to: NSPoint(x: bounds.minX + 69.69, y: bounds.maxY - 34.48), controlPoint1: NSPoint(x: bounds.minX + 71.18, y: bounds.maxY - 33.18), controlPoint2: NSPoint(x: bounds.minX + 70.96, y: bounds.maxY - 34.39))
        path11857Path.curve(to: NSPoint(x: bounds.minX + 68.92, y: bounds.maxY - 30.66), controlPoint1: NSPoint(x: bounds.minX + 67.93, y: bounds.maxY - 34.59), controlPoint2: NSPoint(x: bounds.minX + 68.62, y: bounds.maxY - 32.13))
        path11857Path.curve(to: NSPoint(x: bounds.minX + 70.58, y: bounds.maxY - 26.97), controlPoint1: NSPoint(x: bounds.minX + 69.24, y: bounds.maxY - 29.08), controlPoint2: NSPoint(x: bounds.minX + 69.51, y: bounds.maxY - 27.37))
        path11857Path.curve(to: NSPoint(x: bounds.minX + 72.12, y: bounds.maxY - 29.08), controlPoint1: NSPoint(x: bounds.minX + 72.13, y: bounds.maxY - 26.39), controlPoint2: NSPoint(x: bounds.minX + 72.52, y: bounds.maxY - 27.84))
        path11857Path.line(to: NSPoint(x: bounds.minX + 75.25, y: bounds.maxY - 29.08))
        path11857Path.curve(to: NSPoint(x: bounds.minX + 74.72, y: bounds.maxY - 25.83), controlPoint1: NSPoint(x: bounds.minX + 75.58, y: bounds.maxY - 27.88), controlPoint2: NSPoint(x: bounds.minX + 75.38, y: bounds.maxY - 26.53))
        path11857Path.close()
        path11857Path.move(to: NSPoint(x: bounds.minX + 61.62, y: bounds.maxY - 19.91))
        path11857Path.curve(to: NSPoint(x: bounds.minX + 56.99, y: bounds.maxY - 22.14), controlPoint1: NSPoint(x: bounds.minX + 59.59, y: bounds.maxY - 20.04), controlPoint2: NSPoint(x: bounds.minX + 57.94, y: bounds.maxY - 20.79))
        path11857Path.curve(to: NSPoint(x: bounds.minX + 55.98, y: bounds.maxY - 25.87), controlPoint1: NSPoint(x: bounds.minX + 56.35, y: bounds.maxY - 23.07), controlPoint2: NSPoint(x: bounds.minX + 55.81, y: bounds.maxY - 24.4))
        path11857Path.curve(to: NSPoint(x: bounds.minX + 58.66, y: bounds.maxY - 29.2), controlPoint1: NSPoint(x: bounds.minX + 56.16, y: bounds.maxY - 27.48), controlPoint2: NSPoint(x: bounds.minX + 57.47, y: bounds.maxY - 28.42))
        path11857Path.curve(to: NSPoint(x: bounds.minX + 61.21, y: bounds.maxY - 31.63), controlPoint1: NSPoint(x: bounds.minX + 59.61, y: bounds.maxY - 29.84), controlPoint2: NSPoint(x: bounds.minX + 61.01, y: bounds.maxY - 30.55))
        path11857Path.curve(to: NSPoint(x: bounds.minX + 60, y: bounds.maxY - 33.95), controlPoint1: NSPoint(x: bounds.minX + 61.4, y: bounds.maxY - 32.63), controlPoint2: NSPoint(x: bounds.minX + 60.79, y: bounds.maxY - 33.62))
        path11857Path.curve(to: NSPoint(x: bounds.minX + 57.72, y: bounds.maxY - 33.5), controlPoint1: NSPoint(x: bounds.minX + 59.22, y: bounds.maxY - 34.27), controlPoint2: NSPoint(x: bounds.minX + 58.09, y: bounds.maxY - 34.17))
        path11857Path.curve(to: NSPoint(x: bounds.minX + 57.76, y: bounds.maxY - 31.27), controlPoint1: NSPoint(x: bounds.minX + 57.39, y: bounds.maxY - 32.9), controlPoint2: NSPoint(x: bounds.minX + 57.67, y: bounds.maxY - 31.95))
        path11857Path.line(to: NSPoint(x: bounds.minX + 54.39, y: bounds.maxY - 31.27))
        path11857Path.curve(to: NSPoint(x: bounds.minX + 54.36, y: bounds.maxY - 34.96), controlPoint1: NSPoint(x: bounds.minX + 54.04, y: bounds.maxY - 32.51), controlPoint2: NSPoint(x: bounds.minX + 53.84, y: bounds.maxY - 33.96))
        path11857Path.curve(to: NSPoint(x: bounds.minX + 61.58, y: bounds.maxY - 35.94), controlPoint1: NSPoint(x: bounds.minX + 55.39, y: bounds.maxY - 36.97), controlPoint2: NSPoint(x: bounds.minX + 59.66, y: bounds.maxY - 36.68))
        path11857Path.curve(to: NSPoint(x: bounds.minX + 64.82, y: bounds.maxY - 31.23), controlPoint1: NSPoint(x: bounds.minX + 63.46, y: bounds.maxY - 35.21), controlPoint2: NSPoint(x: bounds.minX + 64.67, y: bounds.maxY - 33.38))
        path11857Path.curve(to: NSPoint(x: bounds.minX + 63.44, y: bounds.maxY - 27.98), controlPoint1: NSPoint(x: bounds.minX + 64.93, y: bounds.maxY - 29.69), controlPoint2: NSPoint(x: bounds.minX + 64.23, y: bounds.maxY - 28.67))
        path11857Path.curve(to: NSPoint(x: bounds.minX + 59.71, y: bounds.maxY - 25.06), controlPoint1: NSPoint(x: bounds.minX + 62.38, y: bounds.maxY - 27.05), controlPoint2: NSPoint(x: bounds.minX + 60.26, y: bounds.maxY - 26.36))
        path11857Path.curve(to: NSPoint(x: bounds.minX + 60.12, y: bounds.maxY - 22.87), controlPoint1: NSPoint(x: bounds.minX + 59.43, y: bounds.maxY - 24.41), controlPoint2: NSPoint(x: bounds.minX + 59.57, y: bounds.maxY - 23.45))
        path11857Path.curve(to: NSPoint(x: bounds.minX + 62.22, y: bounds.maxY - 22.39), controlPoint1: NSPoint(x: bounds.minX + 60.46, y: bounds.maxY - 22.51), controlPoint2: NSPoint(x: bounds.minX + 61.45, y: bounds.maxY - 22.07))
        path11857Path.curve(to: NSPoint(x: bounds.minX + 62.75, y: bounds.maxY - 24.74), controlPoint1: NSPoint(x: bounds.minX + 62.95, y: bounds.maxY - 22.68), controlPoint2: NSPoint(x: bounds.minX + 62.96, y: bounds.maxY - 23.92))
        path11857Path.line(to: NSPoint(x: bounds.minX + 66.04, y: bounds.maxY - 24.74))
        path11857Path.curve(to: NSPoint(x: bounds.minX + 61.62, y: bounds.maxY - 19.91), controlPoint1: NSPoint(x: bounds.minX + 67.16, y: bounds.maxY - 21.19), controlPoint2: NSPoint(x: bounds.minX + 65.11, y: bounds.maxY - 19.69))
        path11857Path.close()
        path11857Path.move(to: NSPoint(x: bounds.minX + 95.09, y: bounds.maxY - 20.84))
        path11857Path.curve(to: NSPoint(x: bounds.minX + 94.19, y: bounds.maxY - 25.1), controlPoint1: NSPoint(x: bounds.minX + 94.81, y: bounds.maxY - 22.28), controlPoint2: NSPoint(x: bounds.minX + 94.56, y: bounds.maxY - 23.75))
        path11857Path.curve(to: NSPoint(x: bounds.minX + 90.95, y: bounds.maxY - 25.06), controlPoint1: NSPoint(x: bounds.minX + 93.13, y: bounds.maxY - 25.08), controlPoint2: NSPoint(x: bounds.minX + 91.95, y: bounds.maxY - 25.16))
        path11857Path.curve(to: NSPoint(x: bounds.minX + 91.56, y: bounds.maxY - 22.1), controlPoint1: NSPoint(x: bounds.minX + 91.15, y: bounds.maxY - 24.07), controlPoint2: NSPoint(x: bounds.minX + 91.35, y: bounds.maxY - 23.09))
        path11857Path.curve(to: NSPoint(x: bounds.minX + 88.15, y: bounds.maxY - 23.36), controlPoint1: NSPoint(x: bounds.minX + 90.4, y: bounds.maxY - 22.49), controlPoint2: NSPoint(x: bounds.minX + 89.29, y: bounds.maxY - 22.95))
        path11857Path.curve(to: NSPoint(x: bounds.minX + 87.79, y: bounds.maxY - 25.1), controlPoint1: NSPoint(x: bounds.minX + 88.05, y: bounds.maxY - 23.96), controlPoint2: NSPoint(x: bounds.minX + 87.93, y: bounds.maxY - 24.55))
        path11857Path.line(to: NSPoint(x: bounds.minX + 86.53, y: bounds.maxY - 25.1))
        path11857Path.curve(to: NSPoint(x: bounds.minX + 86.12, y: bounds.maxY - 27.05), controlPoint1: NSPoint(x: bounds.minX + 86.41, y: bounds.maxY - 25.77), controlPoint2: NSPoint(x: bounds.minX + 86.22, y: bounds.maxY - 26.36))
        path11857Path.line(to: NSPoint(x: bounds.minX + 87.38, y: bounds.maxY - 27.05))
        path11857Path.curve(to: NSPoint(x: bounds.minX + 86.2, y: bounds.maxY - 32.53), controlPoint1: NSPoint(x: bounds.minX + 87.02, y: bounds.maxY - 28.75), controlPoint2: NSPoint(x: bounds.minX + 86.56, y: bounds.maxY - 30.79))
        path11857Path.curve(to: NSPoint(x: bounds.minX + 85.84, y: bounds.maxY - 34.39), controlPoint1: NSPoint(x: bounds.minX + 86.07, y: bounds.maxY - 33.16), controlPoint2: NSPoint(x: bounds.minX + 85.84, y: bounds.maxY - 33.82))
        path11857Path.curve(to: NSPoint(x: bounds.minX + 90.1, y: bounds.maxY - 36.26), controlPoint1: NSPoint(x: bounds.minX + 85.83, y: bounds.maxY - 36.3), controlPoint2: NSPoint(x: bounds.minX + 87.97, y: bounds.maxY - 36.53))
        path11857Path.curve(to: NSPoint(x: bounds.minX + 90.5, y: bounds.maxY - 34.31), controlPoint1: NSPoint(x: bounds.minX + 90.23, y: bounds.maxY - 35.61), controlPoint2: NSPoint(x: bounds.minX + 90.39, y: bounds.maxY - 34.98))
        path11857Path.curve(to: NSPoint(x: bounds.minX + 89.12, y: bounds.maxY - 33.95), controlPoint1: NSPoint(x: bounds.minX + 90.07, y: bounds.maxY - 34.39), controlPoint2: NSPoint(x: bounds.minX + 89.25, y: bounds.maxY - 34.42))
        path11857Path.curve(to: NSPoint(x: bounds.minX + 89.41, y: bounds.maxY - 32.16), controlPoint1: NSPoint(x: bounds.minX + 89, y: bounds.maxY - 33.5), controlPoint2: NSPoint(x: bounds.minX + 89.29, y: bounds.maxY - 32.7))
        path11857Path.curve(to: NSPoint(x: bounds.minX + 90.54, y: bounds.maxY - 27.05), controlPoint1: NSPoint(x: bounds.minX + 89.78, y: bounds.maxY - 30.43), controlPoint2: NSPoint(x: bounds.minX + 90.21, y: bounds.maxY - 28.53))
        path11857Path.line(to: NSPoint(x: bounds.minX + 93.83, y: bounds.maxY - 27.05))
        path11857Path.curve(to: NSPoint(x: bounds.minX + 92.65, y: bounds.maxY - 32.45), controlPoint1: NSPoint(x: bounds.minX + 93.51, y: bounds.maxY - 28.66), controlPoint2: NSPoint(x: bounds.minX + 93, y: bounds.maxY - 30.77))
        path11857Path.curve(to: NSPoint(x: bounds.minX + 92.29, y: bounds.maxY - 34.31), controlPoint1: NSPoint(x: bounds.minX + 92.52, y: bounds.maxY - 33.09), controlPoint2: NSPoint(x: bounds.minX + 92.31, y: bounds.maxY - 33.75))
        path11857Path.curve(to: NSPoint(x: bounds.minX + 96.55, y: bounds.maxY - 36.26), controlPoint1: NSPoint(x: bounds.minX + 92.22, y: bounds.maxY - 36.3), controlPoint2: NSPoint(x: bounds.minX + 94.39, y: bounds.maxY - 36.53))
        path11857Path.curve(to: NSPoint(x: bounds.minX + 96.95, y: bounds.maxY - 34.31), controlPoint1: NSPoint(x: bounds.minX + 96.67, y: bounds.maxY - 35.6), controlPoint2: NSPoint(x: bounds.minX + 96.84, y: bounds.maxY - 34.99))
        path11857Path.curve(to: NSPoint(x: bounds.minX + 95.61, y: bounds.maxY - 34.03), controlPoint1: NSPoint(x: bounds.minX + 96.56, y: bounds.maxY - 34.38), controlPoint2: NSPoint(x: bounds.minX + 95.79, y: bounds.maxY - 34.43))
        path11857Path.curve(to: NSPoint(x: bounds.minX + 95.86, y: bounds.maxY - 32.24), controlPoint1: NSPoint(x: bounds.minX + 95.42, y: bounds.maxY - 33.58), controlPoint2: NSPoint(x: bounds.minX + 95.74, y: bounds.maxY - 32.78))
        path11857Path.curve(to: NSPoint(x: bounds.minX + 96.99, y: bounds.maxY - 27.05), controlPoint1: NSPoint(x: bounds.minX + 96.24, y: bounds.maxY - 30.47), controlPoint2: NSPoint(x: bounds.minX + 96.61, y: bounds.maxY - 28.51))
        path11857Path.line(to: NSPoint(x: bounds.minX + 98.58, y: bounds.maxY - 27.05))
        path11857Path.curve(to: NSPoint(x: bounds.minX + 98.98, y: bounds.maxY - 25.1), controlPoint1: NSPoint(x: bounds.minX + 98.7, y: bounds.maxY - 26.39), controlPoint2: NSPoint(x: bounds.minX + 98.87, y: bounds.maxY - 25.78))
        path11857Path.line(to: NSPoint(x: bounds.minX + 97.36, y: bounds.maxY - 25.1))
        path11857Path.curve(to: NSPoint(x: bounds.minX + 98.45, y: bounds.maxY - 19.63), controlPoint1: NSPoint(x: bounds.minX + 97.72, y: bounds.maxY - 23.3), controlPoint2: NSPoint(x: bounds.minX + 98.16, y: bounds.maxY - 21.36))
        path11857Path.line(to: NSPoint(x: bounds.minX + 98.41, y: bounds.maxY - 19.59))
        path11857Path.curve(to: NSPoint(x: bounds.minX + 95.09, y: bounds.maxY - 20.84), controlPoint1: NSPoint(x: bounds.minX + 97.35, y: bounds.maxY - 20.05), controlPoint2: NSPoint(x: bounds.minX + 96.15, y: bounds.maxY - 20.37))
        path11857Path.close()
        path11857Path.windingRule = .evenOddWindingRule
        logoWhite.setFill()
        path11857Path.fill()


        //// path11877 Drawing
        let path11877Path = NSBezierPath()
        path11877Path.move(to: NSPoint(x: bounds.minX + 111.5, y: bounds.maxY - 31.09))
        path11877Path.curve(to: NSPoint(x: bounds.minX + 111.32, y: bounds.maxY - 31.84), controlPoint1: NSPoint(x: bounds.minX + 111.48, y: bounds.maxY - 31.33), controlPoint2: NSPoint(x: bounds.minX + 111.37, y: bounds.maxY - 31.59))
        path11877Path.curve(to: NSPoint(x: bounds.minX + 111.23, y: bounds.maxY - 32.21), controlPoint1: NSPoint(x: bounds.minX + 111.29, y: bounds.maxY - 31.96), controlPoint2: NSPoint(x: bounds.minX + 111.26, y: bounds.maxY - 32.08))
        path11877Path.curve(to: NSPoint(x: bounds.minX + 111.02, y: bounds.maxY - 32.95), controlPoint1: NSPoint(x: bounds.minX + 111.17, y: bounds.maxY - 32.46), controlPoint2: NSPoint(x: bounds.minX + 111.1, y: bounds.maxY - 32.71))
        path11877Path.curve(to: NSPoint(x: bounds.minX + 110.54, y: bounds.maxY - 33.92), controlPoint1: NSPoint(x: bounds.minX + 110.9, y: bounds.maxY - 33.31), controlPoint2: NSPoint(x: bounds.minX + 110.74, y: bounds.maxY - 33.65))
        path11877Path.curve(to: NSPoint(x: bounds.minX + 110.06, y: bounds.maxY - 34.35), controlPoint1: NSPoint(x: bounds.minX + 110.4, y: bounds.maxY - 34.1), controlPoint2: NSPoint(x: bounds.minX + 110.24, y: bounds.maxY - 34.25))
        path11877Path.curve(to: NSPoint(x: bounds.minX + 109.87, y: bounds.maxY - 34.43), controlPoint1: NSPoint(x: bounds.minX + 110, y: bounds.maxY - 34.38), controlPoint2: NSPoint(x: bounds.minX + 109.94, y: bounds.maxY - 34.41))
        path11877Path.curve(to: NSPoint(x: bounds.minX + 108.97, y: bounds.maxY - 34.49), controlPoint1: NSPoint(x: bounds.minX + 109.61, y: bounds.maxY - 34.52), controlPoint2: NSPoint(x: bounds.minX + 109.26, y: bounds.maxY - 34.55))
        path11877Path.curve(to: NSPoint(x: bounds.minX + 108.47, y: bounds.maxY - 34.19), controlPoint1: NSPoint(x: bounds.minX + 108.75, y: bounds.maxY - 34.44), controlPoint2: NSPoint(x: bounds.minX + 108.57, y: bounds.maxY - 34.35))
        path11877Path.curve(to: NSPoint(x: bounds.minX + 108.44, y: bounds.maxY - 32.64), controlPoint1: NSPoint(x: bounds.minX + 108.24, y: bounds.maxY - 33.8), controlPoint2: NSPoint(x: bounds.minX + 108.26, y: bounds.maxY - 33.21))
        path11877Path.curve(to: NSPoint(x: bounds.minX + 108.62, y: bounds.maxY - 32.17), controlPoint1: NSPoint(x: bounds.minX + 108.49, y: bounds.maxY - 32.48), controlPoint2: NSPoint(x: bounds.minX + 108.55, y: bounds.maxY - 32.32))
        path11877Path.curve(to: NSPoint(x: bounds.minX + 108.74, y: bounds.maxY - 31.95), controlPoint1: NSPoint(x: bounds.minX + 108.66, y: bounds.maxY - 32.1), controlPoint2: NSPoint(x: bounds.minX + 108.69, y: bounds.maxY - 32.02))
        path11877Path.curve(to: NSPoint(x: bounds.minX + 109.3, y: bounds.maxY - 31.25), controlPoint1: NSPoint(x: bounds.minX + 108.9, y: bounds.maxY - 31.66), controlPoint2: NSPoint(x: bounds.minX + 109.09, y: bounds.maxY - 31.42))
        path11877Path.curve(to: NSPoint(x: bounds.minX + 109.61, y: bounds.maxY - 31.07), controlPoint1: NSPoint(x: bounds.minX + 109.4, y: bounds.maxY - 31.17), controlPoint2: NSPoint(x: bounds.minX + 109.51, y: bounds.maxY - 31.1))
        path11877Path.curve(to: NSPoint(x: bounds.minX + 110.06, y: bounds.maxY - 30.96), controlPoint1: NSPoint(x: bounds.minX + 109.76, y: bounds.maxY - 31.02), controlPoint2: NSPoint(x: bounds.minX + 109.91, y: bounds.maxY - 30.98))
        path11877Path.curve(to: NSPoint(x: bounds.minX + 110.52, y: bounds.maxY - 30.93), controlPoint1: NSPoint(x: bounds.minX + 110.21, y: bounds.maxY - 30.94), controlPoint2: NSPoint(x: bounds.minX + 110.36, y: bounds.maxY - 30.93))
        path11877Path.curve(to: NSPoint(x: bounds.minX + 110.76, y: bounds.maxY - 30.92), controlPoint1: NSPoint(x: bounds.minX + 110.6, y: bounds.maxY - 30.92), controlPoint2: NSPoint(x: bounds.minX + 110.68, y: bounds.maxY - 30.92))
        path11877Path.curve(to: NSPoint(x: bounds.minX + 111.48, y: bounds.maxY - 30.86), controlPoint1: NSPoint(x: bounds.minX + 110.99, y: bounds.maxY - 30.91), controlPoint2: NSPoint(x: bounds.minX + 111.23, y: bounds.maxY - 30.9))
        path11877Path.curve(to: NSPoint(x: bounds.minX + 111.5, y: bounds.maxY - 31.09), controlPoint1: NSPoint(x: bounds.minX + 111.5, y: bounds.maxY - 30.94), controlPoint2: NSPoint(x: bounds.minX + 111.5, y: bounds.maxY - 31.01))
        path11877Path.close()
        path11877Path.move(to: NSPoint(x: bounds.minX + 115.25, y: bounds.maxY - 26.89))
        path11877Path.curve(to: NSPoint(x: bounds.minX + 110.87, y: bounds.maxY - 24.9), controlPoint1: NSPoint(x: bounds.minX + 115.05, y: bounds.maxY - 25.11), controlPoint2: NSPoint(x: bounds.minX + 112.68, y: bounds.maxY - 24.78))
        path11877Path.curve(to: NSPoint(x: bounds.minX + 106.61, y: bounds.maxY - 28.31), controlPoint1: NSPoint(x: bounds.minX + 108.51, y: bounds.maxY - 25.06), controlPoint2: NSPoint(x: bounds.minX + 106.97, y: bounds.maxY - 26.2))
        path11877Path.curve(to: NSPoint(x: bounds.minX + 109.65, y: bounds.maxY - 28.31), controlPoint1: NSPoint(x: bounds.minX + 107.28, y: bounds.maxY - 28.31), controlPoint2: NSPoint(x: bounds.minX + 108.97, y: bounds.maxY - 28.31))
        path11877Path.curve(to: NSPoint(x: bounds.minX + 109.98, y: bounds.maxY - 27.29), controlPoint1: NSPoint(x: bounds.minX + 109.77, y: bounds.maxY - 27.97), controlPoint2: NSPoint(x: bounds.minX + 109.8, y: bounds.maxY - 27.59))
        path11877Path.curve(to: NSPoint(x: bounds.minX + 112.09, y: bounds.maxY - 26.97), controlPoint1: NSPoint(x: bounds.minX + 110.34, y: bounds.maxY - 26.68), controlPoint2: NSPoint(x: bounds.minX + 111.64, y: bounds.maxY - 26.29))
        path11877Path.curve(to: NSPoint(x: bounds.minX + 111.88, y: bounds.maxY - 29.12), controlPoint1: NSPoint(x: bounds.minX + 112.48, y: bounds.maxY - 27.58), controlPoint2: NSPoint(x: bounds.minX + 112.01, y: bounds.maxY - 28.54))
        path11877Path.curve(to: NSPoint(x: bounds.minX + 107.18, y: bounds.maxY - 29.93), controlPoint1: NSPoint(x: bounds.minX + 109.97, y: bounds.maxY - 29.12), controlPoint2: NSPoint(x: bounds.minX + 108.37, y: bounds.maxY - 29.18))
        path11877Path.curve(to: NSPoint(x: bounds.minX + 105.23, y: bounds.maxY - 34.64), controlPoint1: NSPoint(x: bounds.minX + 105.9, y: bounds.maxY - 30.74), controlPoint2: NSPoint(x: bounds.minX + 104.98, y: bounds.maxY - 32.8))
        path11877Path.curve(to: NSPoint(x: bounds.minX + 110.1, y: bounds.maxY - 35.57), controlPoint1: NSPoint(x: bounds.minX + 105.53, y: bounds.maxY - 36.89), controlPoint2: NSPoint(x: bounds.minX + 108.65, y: bounds.maxY - 36.75))
        path11877Path.curve(to: NSPoint(x: bounds.minX + 110.91, y: bounds.maxY - 34.8), controlPoint1: NSPoint(x: bounds.minX + 110.38, y: bounds.maxY - 35.34), controlPoint2: NSPoint(x: bounds.minX + 110.6, y: bounds.maxY - 34.93))
        path11877Path.curve(to: NSPoint(x: bounds.minX + 110.71, y: bounds.maxY - 36.22), controlPoint1: NSPoint(x: bounds.minX + 110.82, y: bounds.maxY - 35.25), controlPoint2: NSPoint(x: bounds.minX + 110.79, y: bounds.maxY - 35.76))
        path11877Path.curve(to: NSPoint(x: bounds.minX + 113.63, y: bounds.maxY - 36.22), controlPoint1: NSPoint(x: bounds.minX + 111.27, y: bounds.maxY - 36.23), controlPoint2: NSPoint(x: bounds.minX + 112.68, y: bounds.maxY - 36.21))
        path11877Path.curve(to: NSPoint(x: bounds.minX + 114.84, y: bounds.maxY - 29.89), controlPoint1: NSPoint(x: bounds.minX + 113.87, y: bounds.maxY - 34.07), controlPoint2: NSPoint(x: bounds.minX + 114.41, y: bounds.maxY - 31.91))
        path11877Path.curve(to: NSPoint(x: bounds.minX + 115.25, y: bounds.maxY - 26.89), controlPoint1: NSPoint(x: bounds.minX + 115.05, y: bounds.maxY - 28.93), controlPoint2: NSPoint(x: bounds.minX + 115.37, y: bounds.maxY - 27.97))
        path11877Path.close()
        path11877Path.windingRule = .evenOddWindingRule
        logoWhite.setFill()
        path11877Path.fill()


        //// path11881 Drawing
        let path11881Path = NSBezierPath()
        path11881Path.move(to: NSPoint(x: bounds.minX + 121.9, y: bounds.maxY - 29.28))
        path11881Path.curve(to: NSPoint(x: bounds.minX + 121.72, y: bounds.maxY - 30.25), controlPoint1: NSPoint(x: bounds.minX + 121.85, y: bounds.maxY - 29.58), controlPoint2: NSPoint(x: bounds.minX + 121.79, y: bounds.maxY - 29.91))
        path11881Path.curve(to: NSPoint(x: bounds.minX + 121.49, y: bounds.maxY - 31.29), controlPoint1: NSPoint(x: bounds.minX + 121.65, y: bounds.maxY - 30.59), controlPoint2: NSPoint(x: bounds.minX + 121.57, y: bounds.maxY - 30.94))
        path11881Path.curve(to: NSPoint(x: bounds.minX + 120.93, y: bounds.maxY - 33.22), controlPoint1: NSPoint(x: bounds.minX + 121.32, y: bounds.maxY - 31.99), controlPoint2: NSPoint(x: bounds.minX + 121.14, y: bounds.maxY - 32.67))
        path11881Path.curve(to: NSPoint(x: bounds.minX + 119.06, y: bounds.maxY - 34.43), controlPoint1: NSPoint(x: bounds.minX + 120.67, y: bounds.maxY - 33.89), controlPoint2: NSPoint(x: bounds.minX + 119.93, y: bounds.maxY - 34.92))
        path11881Path.curve(to: NSPoint(x: bounds.minX + 118.98, y: bounds.maxY - 30.91), controlPoint1: NSPoint(x: bounds.minX + 118.2, y: bounds.maxY - 33.95), controlPoint2: NSPoint(x: bounds.minX + 118.81, y: bounds.maxY - 31.75))
        path11881Path.curve(to: NSPoint(x: bounds.minX + 119.96, y: bounds.maxY - 27.5), controlPoint1: NSPoint(x: bounds.minX + 119.23, y: bounds.maxY - 29.69), controlPoint2: NSPoint(x: bounds.minX + 119.47, y: bounds.maxY - 28.21))
        path11881Path.curve(to: NSPoint(x: bounds.minX + 121.05, y: bounds.maxY - 26.85), controlPoint1: NSPoint(x: bounds.minX + 120.21, y: bounds.maxY - 27.12), controlPoint2: NSPoint(x: bounds.minX + 120.51, y: bounds.maxY - 26.91))
        path11881Path.curve(to: NSPoint(x: bounds.minX + 121.9, y: bounds.maxY - 29.28), controlPoint1: NSPoint(x: bounds.minX + 122.22, y: bounds.maxY - 26.72), controlPoint2: NSPoint(x: bounds.minX + 122.13, y: bounds.maxY - 28.05))
        path11881Path.close()
        path11881Path.move(to: NSPoint(x: bounds.minX + 127.02, y: bounds.maxY - 20.4))
        path11881Path.line(to: NSPoint(x: bounds.minX + 126.93, y: bounds.maxY - 20.4))
        path11881Path.curve(to: NSPoint(x: bounds.minX + 123.81, y: bounds.maxY - 21.49), controlPoint1: NSPoint(x: bounds.minX + 125.91, y: bounds.maxY - 20.78), controlPoint2: NSPoint(x: bounds.minX + 124.84, y: bounds.maxY - 21.12))
        path11881Path.curve(to: NSPoint(x: bounds.minX + 122.55, y: bounds.maxY - 26.16), controlPoint1: NSPoint(x: bounds.minX + 123.41, y: bounds.maxY - 23.07), controlPoint2: NSPoint(x: bounds.minX + 123, y: bounds.maxY - 24.63))
        path11881Path.curve(to: NSPoint(x: bounds.minX + 120.04, y: bounds.maxY - 24.9), controlPoint1: NSPoint(x: bounds.minX + 122.18, y: bounds.maxY - 25.28), controlPoint2: NSPoint(x: bounds.minX + 121.07, y: bounds.maxY - 24.83))
        path11881Path.curve(to: NSPoint(x: bounds.minX + 116.51, y: bounds.maxY - 28.43), controlPoint1: NSPoint(x: bounds.minX + 118.03, y: bounds.maxY - 25.03), controlPoint2: NSPoint(x: bounds.minX + 117.09, y: bounds.maxY - 26.45))
        path11881Path.curve(to: NSPoint(x: bounds.minX + 115.49, y: bounds.maxY - 33.5), controlPoint1: NSPoint(x: bounds.minX + 116.02, y: bounds.maxY - 30.08), controlPoint2: NSPoint(x: bounds.minX + 115.56, y: bounds.maxY - 32))
        path11881Path.curve(to: NSPoint(x: bounds.minX + 116.79, y: bounds.maxY - 36.3), controlPoint1: NSPoint(x: bounds.minX + 115.43, y: bounds.maxY - 35), controlPoint2: NSPoint(x: bounds.minX + 115.83, y: bounds.maxY - 35.95))
        path11881Path.curve(to: NSPoint(x: bounds.minX + 120.81, y: bounds.maxY - 35.04), controlPoint1: NSPoint(x: bounds.minX + 118.3, y: bounds.maxY - 36.85), controlPoint2: NSPoint(x: bounds.minX + 120.22, y: bounds.maxY - 35.95))
        path11881Path.curve(to: NSPoint(x: bounds.minX + 120.57, y: bounds.maxY - 36.22), controlPoint1: NSPoint(x: bounds.minX + 120.73, y: bounds.maxY - 35.43), controlPoint2: NSPoint(x: bounds.minX + 120.66, y: bounds.maxY - 35.84))
        path11881Path.curve(to: NSPoint(x: bounds.minX + 123.57, y: bounds.maxY - 36.22), controlPoint1: NSPoint(x: bounds.minX + 121.38, y: bounds.maxY - 36.22), controlPoint2: NSPoint(x: bounds.minX + 122.89, y: bounds.maxY - 36.22))
        path11881Path.curve(to: NSPoint(x: bounds.minX + 127.02, y: bounds.maxY - 20.4), controlPoint1: NSPoint(x: bounds.minX + 124.71, y: bounds.maxY - 30.94), controlPoint2: NSPoint(x: bounds.minX + 125.87, y: bounds.maxY - 25.68))
        path11881Path.close()
        path11881Path.windingRule = .evenOddWindingRule
        logoWhite.setFill()
        path11881Path.fill()


        //// path11885 Drawing
        let path11885Path = NSBezierPath()
        path11885Path.move(to: NSPoint(x: bounds.minX + 132.01, y: bounds.maxY - 29.44))
        path11885Path.line(to: NSPoint(x: bounds.minX + 129.17, y: bounds.maxY - 29.44))
        path11885Path.curve(to: NSPoint(x: bounds.minX + 131.03, y: bounds.maxY - 26.81), controlPoint1: NSPoint(x: bounds.minX + 129.43, y: bounds.maxY - 28.34), controlPoint2: NSPoint(x: bounds.minX + 129.73, y: bounds.maxY - 26.87))
        path11885Path.curve(to: NSPoint(x: bounds.minX + 132.01, y: bounds.maxY - 29.44), controlPoint1: NSPoint(x: bounds.minX + 132.46, y: bounds.maxY - 26.74), controlPoint2: NSPoint(x: bounds.minX + 132.34, y: bounds.maxY - 28.31))
        path11885Path.close()
        path11885Path.move(to: NSPoint(x: bounds.minX + 134.85, y: bounds.maxY - 26.16))
        path11885Path.curve(to: NSPoint(x: bounds.minX + 130.95, y: bounds.maxY - 24.9), controlPoint1: NSPoint(x: bounds.minX + 134.19, y: bounds.maxY - 25.16), controlPoint2: NSPoint(x: bounds.minX + 132.67, y: bounds.maxY - 24.78))
        path11885Path.curve(to: NSPoint(x: bounds.minX + 126.61, y: bounds.maxY - 27.82), controlPoint1: NSPoint(x: bounds.minX + 128.88, y: bounds.maxY - 25.04), controlPoint2: NSPoint(x: bounds.minX + 127.44, y: bounds.maxY - 25.98))
        path11885Path.curve(to: NSPoint(x: bounds.minX + 125.76, y: bounds.maxY - 30.54), controlPoint1: NSPoint(x: bounds.minX + 126.25, y: bounds.maxY - 28.61), controlPoint2: NSPoint(x: bounds.minX + 125.98, y: bounds.maxY - 29.57))
        path11885Path.curve(to: NSPoint(x: bounds.minX + 126.32, y: bounds.maxY - 35.77), controlPoint1: NSPoint(x: bounds.minX + 125.34, y: bounds.maxY - 32.41), controlPoint2: NSPoint(x: bounds.minX + 125.05, y: bounds.maxY - 34.79))
        path11885Path.curve(to: NSPoint(x: bounds.minX + 133.14, y: bounds.maxY - 34.92), controlPoint1: NSPoint(x: bounds.minX + 128.1, y: bounds.maxY - 37.14), controlPoint2: NSPoint(x: bounds.minX + 131.71, y: bounds.maxY - 36.37))
        path11885Path.curve(to: NSPoint(x: bounds.minX + 134.44, y: bounds.maxY - 32.49), controlPoint1: NSPoint(x: bounds.minX + 133.76, y: bounds.maxY - 34.3), controlPoint2: NSPoint(x: bounds.minX + 134.17, y: bounds.maxY - 33.46))
        path11885Path.line(to: NSPoint(x: bounds.minX + 131.23, y: bounds.maxY - 32.49))
        path11885Path.curve(to: NSPoint(x: bounds.minX + 129.33, y: bounds.maxY - 34.47), controlPoint1: NSPoint(x: bounds.minX + 131.02, y: bounds.maxY - 33.51), controlPoint2: NSPoint(x: bounds.minX + 130.49, y: bounds.maxY - 34.64))
        path11885Path.curve(to: NSPoint(x: bounds.minX + 128.8, y: bounds.maxY - 31.19), controlPoint1: NSPoint(x: bounds.minX + 128.11, y: bounds.maxY - 34.31), controlPoint2: NSPoint(x: bounds.minX + 128.55, y: bounds.maxY - 32.18))
        path11885Path.curve(to: NSPoint(x: bounds.minX + 134.8, y: bounds.maxY - 31.15), controlPoint1: NSPoint(x: bounds.minX + 130.72, y: bounds.maxY - 31.09), controlPoint2: NSPoint(x: bounds.minX + 132.82, y: bounds.maxY - 31.18))
        path11885Path.curve(to: NSPoint(x: bounds.minX + 134.85, y: bounds.maxY - 26.16), controlPoint1: NSPoint(x: bounds.minX + 135.08, y: bounds.maxY - 29.56), controlPoint2: NSPoint(x: bounds.minX + 135.67, y: bounds.maxY - 27.43))
        path11885Path.close()
        path11885Path.windingRule = .evenOddWindingRule
        logoWhite.setFill()
        path11885Path.fill()


        //// path11893 Drawing
        let path11893Path = NSBezierPath()
        path11893Path.move(to: NSPoint(x: bounds.minX + 82.23, y: bounds.maxY - 28.02))
        path11893Path.curve(to: NSPoint(x: bounds.minX + 82.22, y: bounds.maxY - 28.46), controlPoint1: NSPoint(x: bounds.minX + 82.23, y: bounds.maxY - 28.17), controlPoint2: NSPoint(x: bounds.minX + 82.23, y: bounds.maxY - 28.32))
        path11893Path.curve(to: NSPoint(x: bounds.minX + 81.95, y: bounds.maxY - 30.12), controlPoint1: NSPoint(x: bounds.minX + 82.2, y: bounds.maxY - 29.02), controlPoint2: NSPoint(x: bounds.minX + 82.09, y: bounds.maxY - 29.56))
        path11893Path.curve(to: NSPoint(x: bounds.minX + 81.58, y: bounds.maxY - 31.55), controlPoint1: NSPoint(x: bounds.minX + 81.83, y: bounds.maxY - 30.58), controlPoint2: NSPoint(x: bounds.minX + 81.7, y: bounds.maxY - 31.06))
        path11893Path.curve(to: NSPoint(x: bounds.minX + 80.2, y: bounds.maxY - 34.35), controlPoint1: NSPoint(x: bounds.minX + 81.29, y: bounds.maxY - 32.71), controlPoint2: NSPoint(x: bounds.minX + 80.97, y: bounds.maxY - 34.01))
        path11893Path.curve(to: NSPoint(x: bounds.minX + 78.74, y: bounds.maxY - 34.19), controlPoint1: NSPoint(x: bounds.minX + 79.78, y: bounds.maxY - 34.54), controlPoint2: NSPoint(x: bounds.minX + 79, y: bounds.maxY - 34.5))
        path11893Path.curve(to: NSPoint(x: bounds.minX + 78.62, y: bounds.maxY - 32.37), controlPoint1: NSPoint(x: bounds.minX + 78.47, y: bounds.maxY - 33.87), controlPoint2: NSPoint(x: bounds.minX + 78.53, y: bounds.maxY - 33.04))
        path11893Path.curve(to: NSPoint(x: bounds.minX + 79.01, y: bounds.maxY - 29.99), controlPoint1: NSPoint(x: bounds.minX + 78.7, y: bounds.maxY - 31.68), controlPoint2: NSPoint(x: bounds.minX + 78.84, y: bounds.maxY - 30.82))
        path11893Path.curve(to: NSPoint(x: bounds.minX + 79.18, y: bounds.maxY - 29.3), controlPoint1: NSPoint(x: bounds.minX + 79.07, y: bounds.maxY - 29.76), controlPoint2: NSPoint(x: bounds.minX + 79.12, y: bounds.maxY - 29.53))
        path11893Path.curve(to: NSPoint(x: bounds.minX + 79.46, y: bounds.maxY - 28.37), controlPoint1: NSPoint(x: bounds.minX + 79.26, y: bounds.maxY - 28.97), controlPoint2: NSPoint(x: bounds.minX + 79.36, y: bounds.maxY - 28.65))
        path11893Path.curve(to: NSPoint(x: bounds.minX + 79.91, y: bounds.maxY - 27.46), controlPoint1: NSPoint(x: bounds.minX + 79.6, y: bounds.maxY - 27.99), controlPoint2: NSPoint(x: bounds.minX + 79.75, y: bounds.maxY - 27.67))
        path11893Path.curve(to: NSPoint(x: bounds.minX + 80.85, y: bounds.maxY - 26.93), controlPoint1: NSPoint(x: bounds.minX + 80.11, y: bounds.maxY - 27.2), controlPoint2: NSPoint(x: bounds.minX + 80.45, y: bounds.maxY - 26.99))
        path11893Path.curve(to: NSPoint(x: bounds.minX + 82.23, y: bounds.maxY - 28.02), controlPoint1: NSPoint(x: bounds.minX + 81.7, y: bounds.maxY - 26.79), controlPoint2: NSPoint(x: bounds.minX + 82.19, y: bounds.maxY - 27.11))
        path11893Path.close()
        path11893Path.move(to: NSPoint(x: bounds.minX + 85.27, y: bounds.maxY - 27.42))
        path11893Path.curve(to: NSPoint(x: bounds.minX + 80.97, y: bounds.maxY - 24.94), controlPoint1: NSPoint(x: bounds.minX + 85.06, y: bounds.maxY - 25.31), controlPoint2: NSPoint(x: bounds.minX + 83.15, y: bounds.maxY - 24.78))
        path11893Path.curve(to: NSPoint(x: bounds.minX + 77.93, y: bounds.maxY - 26), controlPoint1: NSPoint(x: bounds.minX + 79.72, y: bounds.maxY - 25.03), controlPoint2: NSPoint(x: bounds.minX + 78.65, y: bounds.maxY - 25.39))
        path11893Path.curve(to: NSPoint(x: bounds.minX + 75.94, y: bounds.maxY - 30.01), controlPoint1: NSPoint(x: bounds.minX + 76.85, y: bounds.maxY - 26.89), controlPoint2: NSPoint(x: bounds.minX + 76.34, y: bounds.maxY - 28.32))
        path11893Path.curve(to: NSPoint(x: bounds.minX + 75.45, y: bounds.maxY - 34.03), controlPoint1: NSPoint(x: bounds.minX + 75.63, y: bounds.maxY - 31.28), controlPoint2: NSPoint(x: bounds.minX + 75.32, y: bounds.maxY - 32.86))
        path11893Path.curve(to: NSPoint(x: bounds.minX + 79.91, y: bounds.maxY - 36.42), controlPoint1: NSPoint(x: bounds.minX + 75.69, y: bounds.maxY - 36.14), controlPoint2: NSPoint(x: bounds.minX + 77.87, y: bounds.maxY - 36.61))
        path11893Path.curve(to: NSPoint(x: bounds.minX + 84.74, y: bounds.maxY - 31.55), controlPoint1: NSPoint(x: bounds.minX + 82.88, y: bounds.maxY - 36.16), controlPoint2: NSPoint(x: bounds.minX + 84.02, y: bounds.maxY - 34.17))
        path11893Path.curve(to: NSPoint(x: bounds.minX + 85.27, y: bounds.maxY - 27.42), controlPoint1: NSPoint(x: bounds.minX + 85.1, y: bounds.maxY - 30.27), controlPoint2: NSPoint(x: bounds.minX + 85.4, y: bounds.maxY - 28.73))
        path11893Path.close()
        path11893Path.windingRule = .evenOddWindingRule
        logoWhite.setFill()
        path11893Path.fill()


        //// path11897 Drawing
        let path11897Path = NSBezierPath()
        path11897Path.move(to: NSPoint(x: bounds.minX + 96.38, y: bounds.maxY - 17.67))
        path11897Path.line(to: NSPoint(x: bounds.minX + 96.39, y: bounds.maxY - 17.67))
        path11897Path.line(to: NSPoint(x: bounds.minX + 95.55, y: bounds.maxY - 17.31))
        path11897Path.line(to: NSPoint(x: bounds.minX + 95.56, y: bounds.maxY - 17.31))
        path11897Path.curve(to: NSPoint(x: bounds.minX + 94.25, y: bounds.maxY - 16.75), controlPoint1: NSPoint(x: bounds.minX + 95.12, y: bounds.maxY - 17.12), controlPoint2: NSPoint(x: bounds.minX + 94.68, y: bounds.maxY - 16.93))
        path11897Path.curve(to: NSPoint(x: bounds.minX + 94.24, y: bounds.maxY - 16.75), controlPoint1: NSPoint(x: bounds.minX + 94.25, y: bounds.maxY - 16.75), controlPoint2: NSPoint(x: bounds.minX + 94.25, y: bounds.maxY - 16.75))
        path11897Path.line(to: NSPoint(x: bounds.minX + 93.66, y: bounds.maxY - 16.5))
        path11897Path.curve(to: NSPoint(x: bounds.minX + 93.66, y: bounds.maxY - 16.49), controlPoint1: NSPoint(x: bounds.minX + 93.66, y: bounds.maxY - 16.5), controlPoint2: NSPoint(x: bounds.minX + 93.66, y: bounds.maxY - 16.49))
        path11897Path.curve(to: NSPoint(x: bounds.minX + 92.15, y: bounds.maxY - 15.84), controlPoint1: NSPoint(x: bounds.minX + 93.14, y: bounds.maxY - 16.27), controlPoint2: NSPoint(x: bounds.minX + 92.63, y: bounds.maxY - 16.05))
        path11897Path.curve(to: NSPoint(x: bounds.minX + 77.55, y: bounds.maxY - 19.75), controlPoint1: NSPoint(x: bounds.minX + 86.74, y: bounds.maxY - 18.95), controlPoint2: NSPoint(x: bounds.minX + 83.18, y: bounds.maxY - 19.71))
        path11897Path.curve(to: NSPoint(x: bounds.minX + 76.35, y: bounds.maxY - 19.75), controlPoint1: NSPoint(x: bounds.minX + 77.44, y: bounds.maxY - 19.75), controlPoint2: NSPoint(x: bounds.minX + 76.47, y: bounds.maxY - 19.75))
        path11897Path.curve(to: NSPoint(x: bounds.minX + 75.3, y: bounds.maxY - 20.16), controlPoint1: NSPoint(x: bounds.minX + 76.14, y: bounds.maxY - 19.88), controlPoint2: NSPoint(x: bounds.minX + 75.56, y: bounds.maxY - 20.03))
        path11897Path.curve(to: NSPoint(x: bounds.minX + 77.45, y: bounds.maxY - 20.16), controlPoint1: NSPoint(x: bounds.minX + 75.6, y: bounds.maxY - 20.16), controlPoint2: NSPoint(x: bounds.minX + 77.16, y: bounds.maxY - 20.16))
        path11897Path.curve(to: NSPoint(x: bounds.minX + 93.61, y: bounds.maxY - 16.52), controlPoint1: NSPoint(x: bounds.minX + 83.93, y: bounds.maxY - 20.14), controlPoint2: NSPoint(x: bounds.minX + 87.61, y: bounds.maxY - 20.05))
        path11897Path.line(to: NSPoint(x: bounds.minX + 94.05, y: bounds.maxY - 16.86))
        path11897Path.curve(to: NSPoint(x: bounds.minX + 75.94, y: bounds.maxY - 21.29), controlPoint1: NSPoint(x: bounds.minX + 87.78, y: bounds.maxY - 20.4), controlPoint2: NSPoint(x: bounds.minX + 83.16, y: bounds.maxY - 21.14))
        path11897Path.curve(to: NSPoint(x: bounds.minX + 73.6, y: bounds.maxY - 21.31), controlPoint1: NSPoint(x: bounds.minX + 75.56, y: bounds.maxY - 21.3), controlPoint2: NSPoint(x: bounds.minX + 74, y: bounds.maxY - 21.31))
        path11897Path.curve(to: NSPoint(x: bounds.minX + 72.71, y: bounds.maxY - 21.7), controlPoint1: NSPoint(x: bounds.minX + 73.4, y: bounds.maxY - 21.44), controlPoint2: NSPoint(x: bounds.minX + 72.91, y: bounds.maxY - 21.57))
        path11897Path.curve(to: NSPoint(x: bounds.minX + 75.94, y: bounds.maxY - 21.68), controlPoint1: NSPoint(x: bounds.minX + 73.32, y: bounds.maxY - 21.69), controlPoint2: NSPoint(x: bounds.minX + 75.37, y: bounds.maxY - 21.69))
        path11897Path.curve(to: NSPoint(x: bounds.minX + 95.71, y: bounds.maxY - 17.42), controlPoint1: NSPoint(x: bounds.minX + 83.95, y: bounds.maxY - 21.56), controlPoint2: NSPoint(x: bounds.minX + 88.9, y: bounds.maxY - 21.39))
        path11897Path.line(to: NSPoint(x: bounds.minX + 96.16, y: bounds.maxY - 17.76))
        path11897Path.curve(to: NSPoint(x: bounds.minX + 74.02, y: bounds.maxY - 22.79), controlPoint1: NSPoint(x: bounds.minX + 88.84, y: bounds.maxY - 21.88), controlPoint2: NSPoint(x: bounds.minX + 83.05, y: bounds.maxY - 22.52))
        path11897Path.curve(to: NSPoint(x: bounds.minX + 71.22, y: bounds.maxY - 22.84), controlPoint1: NSPoint(x: bounds.minX + 73.44, y: bounds.maxY - 22.81), controlPoint2: NSPoint(x: bounds.minX + 71.83, y: bounds.maxY - 22.82))
        path11897Path.curve(to: NSPoint(x: bounds.minX + 70.12, y: bounds.maxY - 23.28), controlPoint1: NSPoint(x: bounds.minX + 71.04, y: bounds.maxY - 22.95), controlPoint2: NSPoint(x: bounds.minX + 70.3, y: bounds.maxY - 23.17))
        path11897Path.curve(to: NSPoint(x: bounds.minX + 74.02, y: bounds.maxY - 23.23), controlPoint1: NSPoint(x: bounds.minX + 70.92, y: bounds.maxY - 23.26), controlPoint2: NSPoint(x: bounds.minX + 73.27, y: bounds.maxY - 23.25))
        path11897Path.curve(to: NSPoint(x: bounds.minX + 97.85, y: bounds.maxY - 18.3), controlPoint1: NSPoint(x: bounds.minX + 83.75, y: bounds.maxY - 23.01), controlPoint2: NSPoint(x: bounds.minX + 90.11, y: bounds.maxY - 22.8))
        path11897Path.curve(to: NSPoint(x: bounds.minX + 96.38, y: bounds.maxY - 17.67), controlPoint1: NSPoint(x: bounds.minX + 97.38, y: bounds.maxY - 18.1), controlPoint2: NSPoint(x: bounds.minX + 96.89, y: bounds.maxY - 17.88))
        path11897Path.close()
        path11897Path.windingRule = .evenOddWindingRule
        logoWhite.setFill()
        path11897Path.fill()
    }

    public static func drawTdBank(bounds: NSRect = NSRect(x: 0, y: 0, width: 191, height: 56), original: Bool = true, hover: Bool = false, pressed: Bool = false) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext

        //// Color Declarations
        let highlightGradientColor = NSColor(calibratedRed: 1, green: 1, blue: 1, alpha: 0.09)
        let highlightGradientColor2 = NSColor(calibratedRed: 1, green: 1, blue: 1, alpha: 0)
        let shadow2Color = NSColor(calibratedRed: 1, green: 1, blue: 1, alpha: 0.36)
        let tdBankBackground = NSColor(calibratedRed: 0, green: 0.729, blue: 0.184, alpha: 1)

        //// Gradient Declarations
        let highlightGradient = NSGradient(starting: highlightGradientColor, ending: highlightGradientColor2)!

        //// Shadow Declarations
        let outerShadow = NSShadow()
        outerShadow.shadowColor = NSColor.black
        outerShadow.shadowOffset = NSSize(width: 0, height: 0)
        outerShadow.shadowBlurRadius = 0.5
        let innerStroke = NSShadow()
        innerStroke.shadowColor = shadow2Color
        innerStroke.shadowOffset = NSSize(width: 0, height: 0)
        innerStroke.shadowBlurRadius = 0.5

        if (original) {
            //// tdBank
            NSGraphicsContext.saveGraphicsState()
            context.translateBy(x: bounds.minX + 95.5, y: bounds.maxY - 28)

            outerShadow.set()
            context.beginTransparencyLayer(auxiliaryInfo: nil)


            //// tdBankBase Drawing
            let tdBankBasePath = NSBezierPath(roundedRect: NSRect(x: -88.5, y: -21, width: 177, height: 42), xRadius: 5, yRadius: 5)
            tdBankBackground.setFill()
            tdBankBasePath.fill()


            //// tdBankHighlight Drawing
            let tdBankHighlightPath = NSBezierPath(roundedRect: NSRect(x: -88.5, y: -21, width: 177, height: 42), xRadius: 5, yRadius: 5)
            highlightGradient.draw(in: tdBankHighlightPath, angle: -45)

            ////// tdBankHighlight Inner Shadow
            NSGraphicsContext.saveGraphicsState()
            NSRectClip(tdBankHighlightPath.bounds)
            context.setShadow(offset: NSSize.zero, blur: 0, color: nil)

            context.setAlpha(innerStroke.shadowColor!.alphaComponent)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            let tdBankHighlightOpaqueShadow = NSShadow()
            tdBankHighlightOpaqueShadow.shadowColor = innerStroke.shadowColor!.withAlphaComponent(1)
            tdBankHighlightOpaqueShadow.shadowOffset = innerStroke.shadowOffset
            tdBankHighlightOpaqueShadow.shadowBlurRadius = innerStroke.shadowBlurRadius
            tdBankHighlightOpaqueShadow.set()

            context.setBlendMode(.sourceOut)
            context.beginTransparencyLayer(auxiliaryInfo: nil)

            tdBankHighlightOpaqueShadow.shadowColor!.setFill()
            tdBankHighlightPath.fill()

            context.endTransparencyLayer()
            context.endTransparencyLayer()
            NSGraphicsContext.restoreGraphicsState()



            context.endTransparencyLayer()

            NSGraphicsContext.restoreGraphicsState()
        }


        if (hover) {
            //// tdBankHover
            NSGraphicsContext.saveGraphicsState()
            context.translateBy(x: bounds.minX + 95.5, y: bounds.maxY - 28)
            context.scaleBy(x: 1.05, y: 1.05)

            outerShadow.set()
            context.beginTransparencyLayer(auxiliaryInfo: nil)


            //// tdBankBase 2 Drawing
            let tdBankBase2Path = NSBezierPath(roundedRect: NSRect(x: -88.5, y: -21, width: 177, height: 42), xRadius: 5, yRadius: 5)
            tdBankBackground.setFill()
            tdBankBase2Path.fill()


            //// tdBankHighlight 2 Drawing
            let tdBankHighlight2Path = NSBezierPath(roundedRect: NSRect(x: -88.5, y: -21, width: 177, height: 42), xRadius: 5, yRadius: 5)
            highlightGradient.draw(in: tdBankHighlight2Path, angle: -45)

            ////// tdBankHighlight 2 Inner Shadow
            NSGraphicsContext.saveGraphicsState()
            NSRectClip(tdBankHighlight2Path.bounds)
            context.setShadow(offset: NSSize.zero, blur: 0, color: nil)

            context.setAlpha(innerStroke.shadowColor!.alphaComponent)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            let tdBankHighlight2OpaqueShadow = NSShadow()
            tdBankHighlight2OpaqueShadow.shadowColor = innerStroke.shadowColor!.withAlphaComponent(1)
            tdBankHighlight2OpaqueShadow.shadowOffset = innerStroke.shadowOffset
            tdBankHighlight2OpaqueShadow.shadowBlurRadius = innerStroke.shadowBlurRadius
            tdBankHighlight2OpaqueShadow.set()

            context.setBlendMode(.sourceOut)
            context.beginTransparencyLayer(auxiliaryInfo: nil)

            tdBankHighlight2OpaqueShadow.shadowColor!.setFill()
            tdBankHighlight2Path.fill()

            context.endTransparencyLayer()
            context.endTransparencyLayer()
            NSGraphicsContext.restoreGraphicsState()



            context.endTransparencyLayer()

            NSGraphicsContext.restoreGraphicsState()
        }


        if (pressed) {
            //// tdBankPressed
            NSGraphicsContext.saveGraphicsState()
            context.translateBy(x: bounds.minX + 95.5, y: bounds.maxY - 28)

            outerShadow.set()
            context.beginTransparencyLayer(auxiliaryInfo: nil)


            //// tdBankBase 3 Drawing
            let tdBankBase3Path = NSBezierPath(roundedRect: NSRect(x: -88.5, y: -21, width: 177, height: 42), xRadius: 5, yRadius: 5)
            tdBankBackground.setFill()
            tdBankBase3Path.fill()


            //// tdBankHighlight 3 Drawing
            let tdBankHighlight3Path = NSBezierPath(roundedRect: NSRect(x: -88.5, y: -21, width: 177, height: 42), xRadius: 5, yRadius: 5)
            highlightGradient.draw(in: tdBankHighlight3Path, angle: -45)

            ////// tdBankHighlight 3 Inner Shadow
            NSGraphicsContext.saveGraphicsState()
            NSRectClip(tdBankHighlight3Path.bounds)
            context.setShadow(offset: NSSize.zero, blur: 0, color: nil)

            context.setAlpha(innerStroke.shadowColor!.alphaComponent)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            let tdBankHighlight3OpaqueShadow = NSShadow()
            tdBankHighlight3OpaqueShadow.shadowColor = innerStroke.shadowColor!.withAlphaComponent(1)
            tdBankHighlight3OpaqueShadow.shadowOffset = innerStroke.shadowOffset
            tdBankHighlight3OpaqueShadow.shadowBlurRadius = innerStroke.shadowBlurRadius
            tdBankHighlight3OpaqueShadow.set()

            context.setBlendMode(.sourceOut)
            context.beginTransparencyLayer(auxiliaryInfo: nil)

            tdBankHighlight3OpaqueShadow.shadowColor!.setFill()
            tdBankHighlight3Path.fill()

            context.endTransparencyLayer()
            context.endTransparencyLayer()
            NSGraphicsContext.restoreGraphicsState()



            context.endTransparencyLayer()

            NSGraphicsContext.restoreGraphicsState()
        }


        //// tdBankLogo Drawing
        let tdBankLogoPath = NSBezierPath()
        tdBankLogoPath.move(to: NSPoint(x: bounds.minX + 96.19, y: bounds.maxY - 28.94))
        tdBankLogoPath.line(to: NSPoint(x: bounds.minX + 97.3, y: bounds.maxY - 28.94))
        tdBankLogoPath.curve(to: NSPoint(x: bounds.minX + 98.84, y: bounds.maxY - 30.03), controlPoint1: NSPoint(x: bounds.minX + 98.07, y: bounds.maxY - 28.94), controlPoint2: NSPoint(x: bounds.minX + 98.84, y: bounds.maxY - 29.11))
        tdBankLogoPath.curve(to: NSPoint(x: bounds.minX + 97.27, y: bounds.maxY - 31.14), controlPoint1: NSPoint(x: bounds.minX + 98.84, y: bounds.maxY - 30.86), controlPoint2: NSPoint(x: bounds.minX + 98.03, y: bounds.maxY - 31.14))
        tdBankLogoPath.line(to: NSPoint(x: bounds.minX + 96.19, y: bounds.maxY - 31.14))
        tdBankLogoPath.line(to: NSPoint(x: bounds.minX + 96.19, y: bounds.maxY - 28.94))
        tdBankLogoPath.line(to: NSPoint(x: bounds.minX + 96.19, y: bounds.maxY - 28.94))
        tdBankLogoPath.close()
        tdBankLogoPath.move(to: NSPoint(x: bounds.minX + 92.3, y: bounds.maxY - 33.37))
        tdBankLogoPath.line(to: NSPoint(x: bounds.minX + 98.55, y: bounds.maxY - 33.37))
        tdBankLogoPath.curve(to: NSPoint(x: bounds.minX + 102.98, y: bounds.maxY - 30.37), controlPoint1: NSPoint(x: bounds.minX + 100.79, y: bounds.maxY - 33.37), controlPoint2: NSPoint(x: bounds.minX + 102.98, y: bounds.maxY - 33.09))
        tdBankLogoPath.curve(to: NSPoint(x: bounds.minX + 100.56, y: bounds.maxY - 27.92), controlPoint1: NSPoint(x: bounds.minX + 102.98, y: bounds.maxY - 29.29), controlPoint2: NSPoint(x: bounds.minX + 102.05, y: bounds.maxY - 28.12))
        tdBankLogoPath.line(to: NSPoint(x: bounds.minX + 100.56, y: bounds.maxY - 27.89))
        tdBankLogoPath.curve(to: NSPoint(x: bounds.minX + 102.78, y: bounds.maxY - 25.25), controlPoint1: NSPoint(x: bounds.minX + 101.99, y: bounds.maxY - 27.52), controlPoint2: NSPoint(x: bounds.minX + 102.78, y: bounds.maxY - 26.73))
        tdBankLogoPath.curve(to: NSPoint(x: bounds.minX + 99.08, y: bounds.maxY - 22.6), controlPoint1: NSPoint(x: bounds.minX + 102.78, y: bounds.maxY - 23.2), controlPoint2: NSPoint(x: bounds.minX + 100.94, y: bounds.maxY - 22.6))
        tdBankLogoPath.line(to: NSPoint(x: bounds.minX + 92.3, y: bounds.maxY - 22.6))
        tdBankLogoPath.line(to: NSPoint(x: bounds.minX + 92.3, y: bounds.maxY - 33.37))
        tdBankLogoPath.close()
        tdBankLogoPath.move(to: NSPoint(x: bounds.minX + 96.19, y: bounds.maxY - 24.63))
        tdBankLogoPath.line(to: NSPoint(x: bounds.minX + 97.32, y: bounds.maxY - 24.63))
        tdBankLogoPath.curve(to: NSPoint(x: bounds.minX + 98.74, y: bounds.maxY - 25.68), controlPoint1: NSPoint(x: bounds.minX + 98.06, y: bounds.maxY - 24.63), controlPoint2: NSPoint(x: bounds.minX + 98.74, y: bounds.maxY - 24.88))
        tdBankLogoPath.curve(to: NSPoint(x: bounds.minX + 97.22, y: bounds.maxY - 26.71), controlPoint1: NSPoint(x: bounds.minX + 98.74, y: bounds.maxY - 26.5), controlPoint2: NSPoint(x: bounds.minX + 97.95, y: bounds.maxY - 26.71))
        tdBankLogoPath.line(to: NSPoint(x: bounds.minX + 96.19, y: bounds.maxY - 26.71))
        tdBankLogoPath.line(to: NSPoint(x: bounds.minX + 96.19, y: bounds.maxY - 24.63))
        tdBankLogoPath.line(to: NSPoint(x: bounds.minX + 96.19, y: bounds.maxY - 24.63))
        tdBankLogoPath.close()
        tdBankLogoPath.move(to: NSPoint(x: bounds.minX + 104.52, y: bounds.maxY - 27.86))
        tdBankLogoPath.line(to: NSPoint(x: bounds.minX + 104.52, y: bounds.maxY - 27.86))
        tdBankLogoPath.line(to: NSPoint(x: bounds.minX + 104.52, y: bounds.maxY - 25.6))
        tdBankLogoPath.curve(to: NSPoint(x: bounds.minX + 107.88, y: bounds.maxY - 25.14), controlPoint1: NSPoint(x: bounds.minX + 105.68, y: bounds.maxY - 25.28), controlPoint2: NSPoint(x: bounds.minX + 106.37, y: bounds.maxY - 25.14))
        tdBankLogoPath.curve(to: NSPoint(x: bounds.minX + 112.8, y: bounds.maxY - 28.47), controlPoint1: NSPoint(x: bounds.minX + 110.1, y: bounds.maxY - 25.14), controlPoint2: NSPoint(x: bounds.minX + 112.8, y: bounds.maxY - 25.54))
        tdBankLogoPath.line(to: NSPoint(x: bounds.minX + 112.8, y: bounds.maxY - 33.37))
        tdBankLogoPath.line(to: NSPoint(x: bounds.minX + 109.2, y: bounds.maxY - 33.37))
        tdBankLogoPath.line(to: NSPoint(x: bounds.minX + 109.2, y: bounds.maxY - 32.21))
        tdBankLogoPath.line(to: NSPoint(x: bounds.minX + 109.16, y: bounds.maxY - 32.21))
        tdBankLogoPath.curve(to: NSPoint(x: bounds.minX + 106.54, y: bounds.maxY - 33.55), controlPoint1: NSPoint(x: bounds.minX + 108.63, y: bounds.maxY - 33.12), controlPoint2: NSPoint(x: bounds.minX + 107.64, y: bounds.maxY - 33.55))
        tdBankLogoPath.curve(to: NSPoint(x: bounds.minX + 103.59, y: bounds.maxY - 31.19), controlPoint1: NSPoint(x: bounds.minX + 105.05, y: bounds.maxY - 33.55), controlPoint2: NSPoint(x: bounds.minX + 103.59, y: bounds.maxY - 32.87))
        tdBankLogoPath.curve(to: NSPoint(x: bounds.minX + 107.74, y: bounds.maxY - 28.23), controlPoint1: NSPoint(x: bounds.minX + 103.59, y: bounds.maxY - 28.72), controlPoint2: NSPoint(x: bounds.minX + 105.81, y: bounds.maxY - 28.23))
        tdBankLogoPath.curve(to: NSPoint(x: bounds.minX + 109.26, y: bounds.maxY - 28.34), controlPoint1: NSPoint(x: bounds.minX + 108.28, y: bounds.maxY - 28.23), controlPoint2: NSPoint(x: bounds.minX + 108.9, y: bounds.maxY - 28.3))
        tdBankLogoPath.curve(to: NSPoint(x: bounds.minX + 107.2, y: bounds.maxY - 27.18), controlPoint1: NSPoint(x: bounds.minX + 109.24, y: bounds.maxY - 27.3), controlPoint2: NSPoint(x: bounds.minX + 108.18, y: bounds.maxY - 27.18))
        tdBankLogoPath.curve(to: NSPoint(x: bounds.minX + 104.52, y: bounds.maxY - 27.86), controlPoint1: NSPoint(x: bounds.minX + 106.28, y: bounds.maxY - 27.18), controlPoint2: NSPoint(x: bounds.minX + 105.29, y: bounds.maxY - 27.47))
        tdBankLogoPath.close()
        tdBankLogoPath.move(to: NSPoint(x: bounds.minX + 109.26, y: bounds.maxY - 30.08))
        tdBankLogoPath.line(to: NSPoint(x: bounds.minX + 109.26, y: bounds.maxY - 30.08))
        tdBankLogoPath.line(to: NSPoint(x: bounds.minX + 109.26, y: bounds.maxY - 29.83))
        tdBankLogoPath.line(to: NSPoint(x: bounds.minX + 108.87, y: bounds.maxY - 29.83))
        tdBankLogoPath.curve(to: NSPoint(x: bounds.minX + 107.14, y: bounds.maxY - 30.74), controlPoint1: NSPoint(x: bounds.minX + 108.07, y: bounds.maxY - 29.83), controlPoint2: NSPoint(x: bounds.minX + 107.14, y: bounds.maxY - 29.91))
        tdBankLogoPath.curve(to: NSPoint(x: bounds.minX + 108.05, y: bounds.maxY - 31.51), controlPoint1: NSPoint(x: bounds.minX + 107.14, y: bounds.maxY - 31.3), controlPoint2: NSPoint(x: bounds.minX + 107.45, y: bounds.maxY - 31.51))
        tdBankLogoPath.curve(to: NSPoint(x: bounds.minX + 109.26, y: bounds.maxY - 30.08), controlPoint1: NSPoint(x: bounds.minX + 108.85, y: bounds.maxY - 31.51), controlPoint2: NSPoint(x: bounds.minX + 109.26, y: bounds.maxY - 30.77))
        tdBankLogoPath.close()
        tdBankLogoPath.move(to: NSPoint(x: bounds.minX + 113.9, y: bounds.maxY - 25.33))
        tdBankLogoPath.line(to: NSPoint(x: bounds.minX + 117.57, y: bounds.maxY - 25.33))
        tdBankLogoPath.line(to: NSPoint(x: bounds.minX + 117.57, y: bounds.maxY - 26.71))
        tdBankLogoPath.line(to: NSPoint(x: bounds.minX + 117.6, y: bounds.maxY - 26.71))
        tdBankLogoPath.curve(to: NSPoint(x: bounds.minX + 120.22, y: bounds.maxY - 25.14), controlPoint1: NSPoint(x: bounds.minX + 118.06, y: bounds.maxY - 25.59), controlPoint2: NSPoint(x: bounds.minX + 119.13, y: bounds.maxY - 25.14))
        tdBankLogoPath.curve(to: NSPoint(x: bounds.minX + 123.04, y: bounds.maxY - 27.78), controlPoint1: NSPoint(x: bounds.minX + 122.29, y: bounds.maxY - 25.14), controlPoint2: NSPoint(x: bounds.minX + 123.04, y: bounds.maxY - 26.22))
        tdBankLogoPath.line(to: NSPoint(x: bounds.minX + 123.04, y: bounds.maxY - 33.37))
        tdBankLogoPath.line(to: NSPoint(x: bounds.minX + 119.16, y: bounds.maxY - 33.37))
        tdBankLogoPath.line(to: NSPoint(x: bounds.minX + 119.16, y: bounds.maxY - 28.74))
        tdBankLogoPath.curve(to: NSPoint(x: bounds.minX + 118.48, y: bounds.maxY - 27.64), controlPoint1: NSPoint(x: bounds.minX + 119.16, y: bounds.maxY - 28.27), controlPoint2: NSPoint(x: bounds.minX + 119.16, y: bounds.maxY - 27.64))
        tdBankLogoPath.curve(to: NSPoint(x: bounds.minX + 117.79, y: bounds.maxY - 28.74), controlPoint1: NSPoint(x: bounds.minX + 117.79, y: bounds.maxY - 27.64), controlPoint2: NSPoint(x: bounds.minX + 117.79, y: bounds.maxY - 28.27))
        tdBankLogoPath.line(to: NSPoint(x: bounds.minX + 117.79, y: bounds.maxY - 33.37))
        tdBankLogoPath.line(to: NSPoint(x: bounds.minX + 113.9, y: bounds.maxY - 33.37))
        tdBankLogoPath.line(to: NSPoint(x: bounds.minX + 113.9, y: bounds.maxY - 25.33))
        tdBankLogoPath.line(to: NSPoint(x: bounds.minX + 113.9, y: bounds.maxY - 25.33))
        tdBankLogoPath.close()
        tdBankLogoPath.move(to: NSPoint(x: bounds.minX + 128.24, y: bounds.maxY - 28.52))
        tdBankLogoPath.line(to: NSPoint(x: bounds.minX + 128.28, y: bounds.maxY - 28.52))
        tdBankLogoPath.line(to: NSPoint(x: bounds.minX + 130.5, y: bounds.maxY - 25.33))
        tdBankLogoPath.line(to: NSPoint(x: bounds.minX + 134.89, y: bounds.maxY - 25.33))
        tdBankLogoPath.line(to: NSPoint(x: bounds.minX + 132.18, y: bounds.maxY - 28.87))
        tdBankLogoPath.line(to: NSPoint(x: bounds.minX + 135, y: bounds.maxY - 33.37))
        tdBankLogoPath.line(to: NSPoint(x: bounds.minX + 130.47, y: bounds.maxY - 33.37))
        tdBankLogoPath.line(to: NSPoint(x: bounds.minX + 128.28, y: bounds.maxY - 29.46))
        tdBankLogoPath.line(to: NSPoint(x: bounds.minX + 128.24, y: bounds.maxY - 29.46))
        tdBankLogoPath.line(to: NSPoint(x: bounds.minX + 128.24, y: bounds.maxY - 33.37))
        tdBankLogoPath.line(to: NSPoint(x: bounds.minX + 124.36, y: bounds.maxY - 33.37))
        tdBankLogoPath.line(to: NSPoint(x: bounds.minX + 124.36, y: bounds.maxY - 21.79))
        tdBankLogoPath.line(to: NSPoint(x: bounds.minX + 128.24, y: bounds.maxY - 21.79))
        tdBankLogoPath.line(to: NSPoint(x: bounds.minX + 128.24, y: bounds.maxY - 28.52))
        tdBankLogoPath.close()
        tdBankLogoPath.move(to: NSPoint(x: bounds.minX + 56, y: bounds.maxY - 17))
        tdBankLogoPath.curve(to: NSPoint(x: bounds.minX + 57, y: bounds.maxY - 16), controlPoint1: NSPoint(x: bounds.minX + 56, y: bounds.maxY - 16.45), controlPoint2: NSPoint(x: bounds.minX + 56.45, y: bounds.maxY - 16))
        tdBankLogoPath.line(to: NSPoint(x: bounds.minX + 83.5, y: bounds.maxY - 16))
        tdBankLogoPath.curve(to: NSPoint(x: bounds.minX + 84.5, y: bounds.maxY - 17), controlPoint1: NSPoint(x: bounds.minX + 84.05, y: bounds.maxY - 16), controlPoint2: NSPoint(x: bounds.minX + 84.5, y: bounds.maxY - 16.45))
        tdBankLogoPath.line(to: NSPoint(x: bounds.minX + 84.5, y: bounds.maxY - 39))
        tdBankLogoPath.curve(to: NSPoint(x: bounds.minX + 83.5, y: bounds.maxY - 40), controlPoint1: NSPoint(x: bounds.minX + 84.5, y: bounds.maxY - 39.55), controlPoint2: NSPoint(x: bounds.minX + 84.05, y: bounds.maxY - 40))
        tdBankLogoPath.line(to: NSPoint(x: bounds.minX + 57, y: bounds.maxY - 40))
        tdBankLogoPath.curve(to: NSPoint(x: bounds.minX + 56, y: bounds.maxY - 39), controlPoint1: NSPoint(x: bounds.minX + 56.45, y: bounds.maxY - 40), controlPoint2: NSPoint(x: bounds.minX + 56, y: bounds.maxY - 39.55))
        tdBankLogoPath.line(to: NSPoint(x: bounds.minX + 56, y: bounds.maxY - 17))
        tdBankLogoPath.close()
        tdBankLogoPath.move(to: NSPoint(x: bounds.minX + 74.71, y: bounds.maxY - 34.81))
        tdBankLogoPath.curve(to: NSPoint(x: bounds.minX + 81.35, y: bounds.maxY - 27.62), controlPoint1: NSPoint(x: bounds.minX + 78.53, y: bounds.maxY - 34.81), controlPoint2: NSPoint(x: bounds.minX + 81.35, y: bounds.maxY - 34.02))
        tdBankLogoPath.curve(to: NSPoint(x: bounds.minX + 75.48, y: bounds.maxY - 20.83), controlPoint1: NSPoint(x: bounds.minX + 81.35, y: bounds.maxY - 22.76), controlPoint2: NSPoint(x: bounds.minX + 79.46, y: bounds.maxY - 20.83))
        tdBankLogoPath.line(to: NSPoint(x: bounds.minX + 58.99, y: bounds.maxY - 20.83))
        tdBankLogoPath.line(to: NSPoint(x: bounds.minX + 58.99, y: bounds.maxY - 22.82))
        tdBankLogoPath.line(to: NSPoint(x: bounds.minX + 63.84, y: bounds.maxY - 22.82))
        tdBankLogoPath.line(to: NSPoint(x: bounds.minX + 63.84, y: bounds.maxY - 34.81))
        tdBankLogoPath.line(to: NSPoint(x: bounds.minX + 67.14, y: bounds.maxY - 34.81))
        tdBankLogoPath.line(to: NSPoint(x: bounds.minX + 67.14, y: bounds.maxY - 22.82))
        tdBankLogoPath.line(to: NSPoint(x: bounds.minX + 74.45, y: bounds.maxY - 22.82))
        tdBankLogoPath.curve(to: NSPoint(x: bounds.minX + 77.76, y: bounds.maxY - 27.65), controlPoint1: NSPoint(x: bounds.minX + 76.7, y: bounds.maxY - 22.82), controlPoint2: NSPoint(x: bounds.minX + 77.76, y: bounds.maxY - 23.91))
        tdBankLogoPath.curve(to: NSPoint(x: bounds.minX + 74.61, y: bounds.maxY - 32.82), controlPoint1: NSPoint(x: bounds.minX + 77.76, y: bounds.maxY - 31.37), controlPoint2: NSPoint(x: bounds.minX + 76.83, y: bounds.maxY - 32.82))
        tdBankLogoPath.line(to: NSPoint(x: bounds.minX + 71.41, y: bounds.maxY - 32.82))
        tdBankLogoPath.line(to: NSPoint(x: bounds.minX + 71.41, y: bounds.maxY - 23.54))
        tdBankLogoPath.line(to: NSPoint(x: bounds.minX + 68.07, y: bounds.maxY - 23.54))
        tdBankLogoPath.line(to: NSPoint(x: bounds.minX + 68.07, y: bounds.maxY - 34.81))
        tdBankLogoPath.line(to: NSPoint(x: bounds.minX + 74.71, y: bounds.maxY - 34.81))
        tdBankLogoPath.close()
        NSColor.white.setFill()
        tdBankLogoPath.fill()
    }

    public static func drawFidelityButton(bounds: NSRect = NSRect(x: 0, y: 0, width: 191, height: 56), original: Bool = true, hover: Bool = false, pressed: Bool = false) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext

        //// Color Declarations
        let highlightGradientColor = NSColor(deviceRed: 1, green: 1, blue: 1, alpha: 0.09)
        let highlightGradientColor2 = NSColor(deviceRed: 1, green: 1, blue: 1, alpha: 0)
        let shadow2Color = NSColor(deviceRed: 1, green: 1, blue: 1, alpha: 0.36)
        let logoWhite = NSColor(deviceRed: 1, green: 1, blue: 1, alpha: 1)
        let fidelityBackground = NSColor(deviceRed: 0.271, green: 0.584, blue: 0.118, alpha: 1)

        //// Gradient Declarations
        let highlightGradient = NSGradient(starting: highlightGradientColor, ending: highlightGradientColor2)!

        //// Shadow Declarations
        let outerShadow = NSShadow()
        outerShadow.shadowColor = NSColor.black
        outerShadow.shadowOffset = NSSize(width: 0, height: 0)
        outerShadow.shadowBlurRadius = 0.5
        let innerStroke = NSShadow()
        innerStroke.shadowColor = shadow2Color
        innerStroke.shadowOffset = NSSize(width: 0, height: 0)
        innerStroke.shadowBlurRadius = 0.5

        if (original) {
            //// fidelity
            NSGraphicsContext.saveGraphicsState()
            context.translateBy(x: bounds.minX + 95.5, y: bounds.maxY - 28)

            outerShadow.set()
            context.beginTransparencyLayer(auxiliaryInfo: nil)


            //// fidelityBase Drawing
            let fidelityBasePath = NSBezierPath(roundedRect: NSRect(x: -88.5, y: -21, width: 177, height: 42), xRadius: 5, yRadius: 5)
            fidelityBackground.setFill()
            fidelityBasePath.fill()


            //// fidelityHighlight Drawing
            let fidelityHighlightPath = NSBezierPath(roundedRect: NSRect(x: -88.5, y: -21, width: 177, height: 42), xRadius: 5, yRadius: 5)
            highlightGradient.draw(in: fidelityHighlightPath, angle: -45)

            ////// fidelityHighlight Inner Shadow
            NSGraphicsContext.saveGraphicsState()
            NSRectClip(fidelityHighlightPath.bounds)
            context.setShadow(offset: NSSize.zero, blur: 0, color: nil)

            context.setAlpha(innerStroke.shadowColor!.alphaComponent)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            let fidelityHighlightOpaqueShadow = NSShadow()
            fidelityHighlightOpaqueShadow.shadowColor = innerStroke.shadowColor!.withAlphaComponent(1)
            fidelityHighlightOpaqueShadow.shadowOffset = innerStroke.shadowOffset
            fidelityHighlightOpaqueShadow.shadowBlurRadius = innerStroke.shadowBlurRadius
            fidelityHighlightOpaqueShadow.set()

            context.setBlendMode(.sourceOut)
            context.beginTransparencyLayer(auxiliaryInfo: nil)

            fidelityHighlightOpaqueShadow.shadowColor!.setFill()
            fidelityHighlightPath.fill()

            context.endTransparencyLayer()
            context.endTransparencyLayer()
            NSGraphicsContext.restoreGraphicsState()



            context.endTransparencyLayer()

            NSGraphicsContext.restoreGraphicsState()
        }


        if (hover) {
            //// fidelityHover
            NSGraphicsContext.saveGraphicsState()
            context.translateBy(x: bounds.minX + 95.5, y: bounds.maxY - 28)
            context.scaleBy(x: 1.05, y: 1.05)

            outerShadow.set()
            context.beginTransparencyLayer(auxiliaryInfo: nil)


            //// fidelityBase 2 Drawing
            let fidelityBase2Path = NSBezierPath(roundedRect: NSRect(x: -88.5, y: -21, width: 177, height: 42), xRadius: 5, yRadius: 5)
            fidelityBackground.setFill()
            fidelityBase2Path.fill()


            //// fidelityHighlight 2 Drawing
            let fidelityHighlight2Path = NSBezierPath(roundedRect: NSRect(x: -88.5, y: -21, width: 177, height: 42), xRadius: 5, yRadius: 5)
            highlightGradient.draw(in: fidelityHighlight2Path, angle: -45)

            ////// fidelityHighlight 2 Inner Shadow
            NSGraphicsContext.saveGraphicsState()
            NSRectClip(fidelityHighlight2Path.bounds)
            context.setShadow(offset: NSSize.zero, blur: 0, color: nil)

            context.setAlpha(innerStroke.shadowColor!.alphaComponent)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            let fidelityHighlight2OpaqueShadow = NSShadow()
            fidelityHighlight2OpaqueShadow.shadowColor = innerStroke.shadowColor!.withAlphaComponent(1)
            fidelityHighlight2OpaqueShadow.shadowOffset = innerStroke.shadowOffset
            fidelityHighlight2OpaqueShadow.shadowBlurRadius = innerStroke.shadowBlurRadius
            fidelityHighlight2OpaqueShadow.set()

            context.setBlendMode(.sourceOut)
            context.beginTransparencyLayer(auxiliaryInfo: nil)

            fidelityHighlight2OpaqueShadow.shadowColor!.setFill()
            fidelityHighlight2Path.fill()

            context.endTransparencyLayer()
            context.endTransparencyLayer()
            NSGraphicsContext.restoreGraphicsState()



            context.endTransparencyLayer()

            NSGraphicsContext.restoreGraphicsState()
        }


        if (pressed) {
            //// fidelityPressed
            NSGraphicsContext.saveGraphicsState()
            context.translateBy(x: bounds.minX + 95.5, y: bounds.maxY - 28)

            outerShadow.set()
            context.beginTransparencyLayer(auxiliaryInfo: nil)


            //// fidelityBase 3 Drawing
            let fidelityBase3Path = NSBezierPath(roundedRect: NSRect(x: -88.5, y: -21, width: 177, height: 42), xRadius: 5, yRadius: 5)
            fidelityBackground.setFill()
            fidelityBase3Path.fill()


            //// fidelityHighlight 3 Drawing
            let fidelityHighlight3Path = NSBezierPath(roundedRect: NSRect(x: -88.5, y: -21, width: 177, height: 42), xRadius: 5, yRadius: 5)
            highlightGradient.draw(in: fidelityHighlight3Path, angle: -45)

            ////// fidelityHighlight 3 Inner Shadow
            NSGraphicsContext.saveGraphicsState()
            NSRectClip(fidelityHighlight3Path.bounds)
            context.setShadow(offset: NSSize.zero, blur: 0, color: nil)

            context.setAlpha(innerStroke.shadowColor!.alphaComponent)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            let fidelityHighlight3OpaqueShadow = NSShadow()
            fidelityHighlight3OpaqueShadow.shadowColor = innerStroke.shadowColor!.withAlphaComponent(1)
            fidelityHighlight3OpaqueShadow.shadowOffset = innerStroke.shadowOffset
            fidelityHighlight3OpaqueShadow.shadowBlurRadius = innerStroke.shadowBlurRadius
            fidelityHighlight3OpaqueShadow.set()

            context.setBlendMode(.sourceOut)
            context.beginTransparencyLayer(auxiliaryInfo: nil)

            fidelityHighlight3OpaqueShadow.shadowColor!.setFill()
            fidelityHighlight3Path.fill()

            context.endTransparencyLayer()
            context.endTransparencyLayer()
            NSGraphicsContext.restoreGraphicsState()



            context.endTransparencyLayer()

            NSGraphicsContext.restoreGraphicsState()
        }


        //// fidelityLogo Drawing
        let fidelityLogoPath = NSBezierPath()
        fidelityLogoPath.move(to: NSPoint(x: bounds.minX + 60.79, y: bounds.maxY - 33.92))
        fidelityLogoPath.line(to: NSPoint(x: bounds.minX + 55.84, y: bounds.maxY - 33.92))
        fidelityLogoPath.line(to: NSPoint(x: bounds.minX + 59.81, y: bounds.maxY - 19.5))
        fidelityLogoPath.line(to: NSPoint(x: bounds.minX + 69.96, y: bounds.maxY - 19.5))
        fidelityLogoPath.line(to: NSPoint(x: bounds.minX + 68.99, y: bounds.maxY - 22.92))
        fidelityLogoPath.line(to: NSPoint(x: bounds.minX + 63.81, y: bounds.maxY - 22.92))
        fidelityLogoPath.line(to: NSPoint(x: bounds.minX + 63.15, y: bounds.maxY - 25.38))
        fidelityLogoPath.line(to: NSPoint(x: bounds.minX + 68.33, y: bounds.maxY - 25.38))
        fidelityLogoPath.line(to: NSPoint(x: bounds.minX + 67.46, y: bounds.maxY - 28.53))
        fidelityLogoPath.line(to: NSPoint(x: bounds.minX + 62.27, y: bounds.maxY - 28.53))
        fidelityLogoPath.line(to: NSPoint(x: bounds.minX + 60.79, y: bounds.maxY - 33.92))
        fidelityLogoPath.line(to: NSPoint(x: bounds.minX + 60.79, y: bounds.maxY - 33.92))
        fidelityLogoPath.close()
        fidelityLogoPath.move(to: NSPoint(x: bounds.minX + 72.34, y: bounds.maxY - 33.92))
        fidelityLogoPath.line(to: NSPoint(x: bounds.minX + 67.44, y: bounds.maxY - 33.92))
        fidelityLogoPath.line(to: NSPoint(x: bounds.minX + 70.35, y: bounds.maxY - 23.39))
        fidelityLogoPath.line(to: NSPoint(x: bounds.minX + 75.25, y: bounds.maxY - 23.39))
        fidelityLogoPath.line(to: NSPoint(x: bounds.minX + 72.34, y: bounds.maxY - 33.92))
        fidelityLogoPath.close()
        fidelityLogoPath.move(to: NSPoint(x: bounds.minX + 75.51, y: bounds.maxY - 22.38))
        fidelityLogoPath.line(to: NSPoint(x: bounds.minX + 70.61, y: bounds.maxY - 22.38))
        fidelityLogoPath.line(to: NSPoint(x: bounds.minX + 71.41, y: bounds.maxY - 19.5))
        fidelityLogoPath.line(to: NSPoint(x: bounds.minX + 76.31, y: bounds.maxY - 19.5))
        fidelityLogoPath.line(to: NSPoint(x: bounds.minX + 75.51, y: bounds.maxY - 22.38))
        fidelityLogoPath.close()
        fidelityLogoPath.move(to: NSPoint(x: bounds.minX + 85.22, y: bounds.maxY - 33.92))
        fidelityLogoPath.line(to: NSPoint(x: bounds.minX + 80.42, y: bounds.maxY - 33.92))
        fidelityLogoPath.line(to: NSPoint(x: bounds.minX + 80.76, y: bounds.maxY - 32.74))
        fidelityLogoPath.curve(to: NSPoint(x: bounds.minX + 77.23, y: bounds.maxY - 34.17), controlPoint1: NSPoint(x: bounds.minX + 79.79, y: bounds.maxY - 33.57), controlPoint2: NSPoint(x: bounds.minX + 78.8, y: bounds.maxY - 34.17))
        fidelityLogoPath.curve(to: NSPoint(x: bounds.minX + 74.63, y: bounds.maxY - 31.75), controlPoint1: NSPoint(x: bounds.minX + 75.63, y: bounds.maxY - 34.17), controlPoint2: NSPoint(x: bounds.minX + 74.63, y: bounds.maxY - 33.4))
        fidelityLogoPath.curve(to: NSPoint(x: bounds.minX + 76.37, y: bounds.maxY - 25.34), controlPoint1: NSPoint(x: bounds.minX + 74.63, y: bounds.maxY - 29.94), controlPoint2: NSPoint(x: bounds.minX + 75.33, y: bounds.maxY - 27.23))
        fidelityLogoPath.curve(to: NSPoint(x: bounds.minX + 80.11, y: bounds.maxY - 23.19), controlPoint1: NSPoint(x: bounds.minX + 77.13, y: bounds.maxY - 23.93), controlPoint2: NSPoint(x: bounds.minX + 78.5, y: bounds.maxY - 23.19))
        fidelityLogoPath.curve(to: NSPoint(x: bounds.minX + 82.92, y: bounds.maxY - 24.58), controlPoint1: NSPoint(x: bounds.minX + 81.5, y: bounds.maxY - 23.19), controlPoint2: NSPoint(x: bounds.minX + 82.52, y: bounds.maxY - 23.81))
        fidelityLogoPath.line(to: NSPoint(x: bounds.minX + 84.29, y: bounds.maxY - 19.5))
        fidelityLogoPath.line(to: NSPoint(x: bounds.minX + 89.19, y: bounds.maxY - 19.5))
        fidelityLogoPath.line(to: NSPoint(x: bounds.minX + 85.22, y: bounds.maxY - 33.92))
        fidelityLogoPath.line(to: NSPoint(x: bounds.minX + 85.22, y: bounds.maxY - 33.92))
        fidelityLogoPath.close()
        fidelityLogoPath.move(to: NSPoint(x: bounds.minX + 81.54, y: bounds.maxY - 26.52))
        fidelityLogoPath.curve(to: NSPoint(x: bounds.minX + 80.42, y: bounds.maxY - 27.27), controlPoint1: NSPoint(x: bounds.minX + 81.1, y: bounds.maxY - 26.52), controlPoint2: NSPoint(x: bounds.minX + 80.66, y: bounds.maxY - 26.65))
        fidelityLogoPath.curve(to: NSPoint(x: bounds.minX + 79.73, y: bounds.maxY - 29.9), controlPoint1: NSPoint(x: bounds.minX + 80.06, y: bounds.maxY - 28.16), controlPoint2: NSPoint(x: bounds.minX + 79.73, y: bounds.maxY - 29.03))
        fidelityLogoPath.curve(to: NSPoint(x: bounds.minX + 80.49, y: bounds.maxY - 30.65), controlPoint1: NSPoint(x: bounds.minX + 79.73, y: bounds.maxY - 30.3), controlPoint2: NSPoint(x: bounds.minX + 80.02, y: bounds.maxY - 30.65))
        fidelityLogoPath.curve(to: NSPoint(x: bounds.minX + 81.33, y: bounds.maxY - 30.4), controlPoint1: NSPoint(x: bounds.minX + 80.87, y: bounds.maxY - 30.65), controlPoint2: NSPoint(x: bounds.minX + 81.12, y: bounds.maxY - 30.54))
        fidelityLogoPath.line(to: NSPoint(x: bounds.minX + 82.32, y: bounds.maxY - 26.94))
        fidelityLogoPath.curve(to: NSPoint(x: bounds.minX + 81.54, y: bounds.maxY - 26.52), controlPoint1: NSPoint(x: bounds.minX + 82.14, y: bounds.maxY - 26.69), controlPoint2: NSPoint(x: bounds.minX + 81.84, y: bounds.maxY - 26.52))
        fidelityLogoPath.close()
        fidelityLogoPath.move(to: NSPoint(x: bounds.minX + 98.97, y: bounds.maxY - 29.06))
        fidelityLogoPath.line(to: NSPoint(x: bounds.minX + 92.22, y: bounds.maxY - 29.06))
        fidelityLogoPath.curve(to: NSPoint(x: bounds.minX + 91.95, y: bounds.maxY - 30.45), controlPoint1: NSPoint(x: bounds.minX + 92.08, y: bounds.maxY - 29.62), controlPoint2: NSPoint(x: bounds.minX + 91.95, y: bounds.maxY - 30.01))
        fidelityLogoPath.curve(to: NSPoint(x: bounds.minX + 92.67, y: bounds.maxY - 31.21), controlPoint1: NSPoint(x: bounds.minX + 91.95, y: bounds.maxY - 30.66), controlPoint2: NSPoint(x: bounds.minX + 91.99, y: bounds.maxY - 31.21))
        fidelityLogoPath.curve(to: NSPoint(x: bounds.minX + 93.94, y: bounds.maxY - 29.91), controlPoint1: NSPoint(x: bounds.minX + 93.36, y: bounds.maxY - 31.21), controlPoint2: NSPoint(x: bounds.minX + 93.66, y: bounds.maxY - 30.93))
        fidelityLogoPath.line(to: NSPoint(x: bounds.minX + 98.75, y: bounds.maxY - 29.91))
        fidelityLogoPath.curve(to: NSPoint(x: bounds.minX + 92.5, y: bounds.maxY - 33.93), controlPoint1: NSPoint(x: bounds.minX + 98.14, y: bounds.maxY - 32.91), controlPoint2: NSPoint(x: bounds.minX + 94.65, y: bounds.maxY - 33.93))
        fidelityLogoPath.curve(to: NSPoint(x: bounds.minX + 87.34, y: bounds.maxY - 30.66), controlPoint1: NSPoint(x: bounds.minX + 89.6, y: bounds.maxY - 33.93), controlPoint2: NSPoint(x: bounds.minX + 87.34, y: bounds.maxY - 33.51))
        fidelityLogoPath.curve(to: NSPoint(x: bounds.minX + 89.14, y: bounds.maxY - 25.14), controlPoint1: NSPoint(x: bounds.minX + 87.34, y: bounds.maxY - 29.1), controlPoint2: NSPoint(x: bounds.minX + 88.12, y: bounds.maxY - 26.51))
        fidelityLogoPath.curve(to: NSPoint(x: bounds.minX + 94.49, y: bounds.maxY - 22.88), controlPoint1: NSPoint(x: bounds.minX + 90.38, y: bounds.maxY - 23.49), controlPoint2: NSPoint(x: bounds.minX + 92.52, y: bounds.maxY - 22.88))
        fidelityLogoPath.curve(to: NSPoint(x: bounds.minX + 99.5, y: bounds.maxY - 26.14), controlPoint1: NSPoint(x: bounds.minX + 97.53, y: bounds.maxY - 22.88), controlPoint2: NSPoint(x: bounds.minX + 99.5, y: bounds.maxY - 23.51))
        fidelityLogoPath.curve(to: NSPoint(x: bounds.minX + 98.97, y: bounds.maxY - 29.06), controlPoint1: NSPoint(x: bounds.minX + 99.5, y: bounds.maxY - 26.78), controlPoint2: NSPoint(x: bounds.minX + 99.24, y: bounds.maxY - 28.19))
        fidelityLogoPath.close()
        fidelityLogoPath.move(to: NSPoint(x: bounds.minX + 94.08, y: bounds.maxY - 25.52))
        fidelityLogoPath.curve(to: NSPoint(x: bounds.minX + 92.79, y: bounds.maxY - 27.01), controlPoint1: NSPoint(x: bounds.minX + 93.47, y: bounds.maxY - 25.52), controlPoint2: NSPoint(x: bounds.minX + 93.05, y: bounds.maxY - 25.95))
        fidelityLogoPath.line(to: NSPoint(x: bounds.minX + 94.8, y: bounds.maxY - 27.01))
        fidelityLogoPath.curve(to: NSPoint(x: bounds.minX + 94.93, y: bounds.maxY - 26.28), controlPoint1: NSPoint(x: bounds.minX + 94.85, y: bounds.maxY - 26.8), controlPoint2: NSPoint(x: bounds.minX + 94.93, y: bounds.maxY - 26.47))
        fidelityLogoPath.curve(to: NSPoint(x: bounds.minX + 94.08, y: bounds.maxY - 25.52), controlPoint1: NSPoint(x: bounds.minX + 94.93, y: bounds.maxY - 25.7), controlPoint2: NSPoint(x: bounds.minX + 94.59, y: bounds.maxY - 25.52))
        fidelityLogoPath.close()
        fidelityLogoPath.move(to: NSPoint(x: bounds.minX + 103.84, y: bounds.maxY - 33.92))
        fidelityLogoPath.line(to: NSPoint(x: bounds.minX + 98.94, y: bounds.maxY - 33.92))
        fidelityLogoPath.line(to: NSPoint(x: bounds.minX + 102.91, y: bounds.maxY - 19.5))
        fidelityLogoPath.line(to: NSPoint(x: bounds.minX + 107.81, y: bounds.maxY - 19.5))
        fidelityLogoPath.line(to: NSPoint(x: bounds.minX + 103.84, y: bounds.maxY - 33.92))
        fidelityLogoPath.close()
        fidelityLogoPath.move(to: NSPoint(x: bounds.minX + 110.47, y: bounds.maxY - 33.92))
        fidelityLogoPath.line(to: NSPoint(x: bounds.minX + 105.57, y: bounds.maxY - 33.92))
        fidelityLogoPath.line(to: NSPoint(x: bounds.minX + 108.48, y: bounds.maxY - 23.39))
        fidelityLogoPath.line(to: NSPoint(x: bounds.minX + 113.38, y: bounds.maxY - 23.39))
        fidelityLogoPath.line(to: NSPoint(x: bounds.minX + 110.47, y: bounds.maxY - 33.92))
        fidelityLogoPath.line(to: NSPoint(x: bounds.minX + 110.47, y: bounds.maxY - 33.92))
        fidelityLogoPath.close()
        fidelityLogoPath.move(to: NSPoint(x: bounds.minX + 121.88, y: bounds.maxY - 25.34))
        fidelityLogoPath.line(to: NSPoint(x: bounds.minX + 119.21, y: bounds.maxY - 25.34))
        fidelityLogoPath.line(to: NSPoint(x: bounds.minX + 118.11, y: bounds.maxY - 29.34))
        fidelityLogoPath.curve(to: NSPoint(x: bounds.minX + 117.94, y: bounds.maxY - 30.29), controlPoint1: NSPoint(x: bounds.minX + 118.02, y: bounds.maxY - 29.65), controlPoint2: NSPoint(x: bounds.minX + 117.94, y: bounds.maxY - 30.04))
        fidelityLogoPath.curve(to: NSPoint(x: bounds.minX + 118.79, y: bounds.maxY - 30.91), controlPoint1: NSPoint(x: bounds.minX + 117.94, y: bounds.maxY - 30.75), controlPoint2: NSPoint(x: bounds.minX + 118.13, y: bounds.maxY - 30.91))
        fidelityLogoPath.line(to: NSPoint(x: bounds.minX + 119.84, y: bounds.maxY - 30.91))
        fidelityLogoPath.line(to: NSPoint(x: bounds.minX + 119.12, y: bounds.maxY - 33.5))
        fidelityLogoPath.line(to: NSPoint(x: bounds.minX + 114.75, y: bounds.maxY - 33.5))
        fidelityLogoPath.curve(to: NSPoint(x: bounds.minX + 112.76, y: bounds.maxY - 31.7), controlPoint1: NSPoint(x: bounds.minX + 113.31, y: bounds.maxY - 33.5), controlPoint2: NSPoint(x: bounds.minX + 112.76, y: bounds.maxY - 32.78))
        fidelityLogoPath.curve(to: NSPoint(x: bounds.minX + 112.97, y: bounds.maxY - 30.23), controlPoint1: NSPoint(x: bounds.minX + 112.76, y: bounds.maxY - 31.26), controlPoint2: NSPoint(x: bounds.minX + 112.81, y: bounds.maxY - 30.77))
        fidelityLogoPath.line(to: NSPoint(x: bounds.minX + 115.62, y: bounds.maxY - 20.63))
        fidelityLogoPath.line(to: NSPoint(x: bounds.minX + 120.52, y: bounds.maxY - 20.63))
        fidelityLogoPath.line(to: NSPoint(x: bounds.minX + 119.88, y: bounds.maxY - 22.96))
        fidelityLogoPath.line(to: NSPoint(x: bounds.minX + 121.67, y: bounds.maxY - 22.96))
        fidelityLogoPath.line(to: NSPoint(x: bounds.minX + 121.66, y: bounds.maxY - 22.88))
        fidelityLogoPath.line(to: NSPoint(x: bounds.minX + 126.6, y: bounds.maxY - 22.88))
        fidelityLogoPath.line(to: NSPoint(x: bounds.minX + 126.52, y: bounds.maxY - 28.69))
        fidelityLogoPath.line(to: NSPoint(x: bounds.minX + 129.17, y: bounds.maxY - 22.88))
        fidelityLogoPath.line(to: NSPoint(x: bounds.minX + 129.17, y: bounds.maxY - 22.88))
        fidelityLogoPath.line(to: NSPoint(x: bounds.minX + 134.16, y: bounds.maxY - 22.88))
        fidelityLogoPath.line(to: NSPoint(x: bounds.minX + 127.05, y: bounds.maxY - 34.26))
        fidelityLogoPath.curve(to: NSPoint(x: bounds.minX + 122.72, y: bounds.maxY - 37.5), controlPoint1: NSPoint(x: bounds.minX + 125.65, y: bounds.maxY - 36.49), controlPoint2: NSPoint(x: bounds.minX + 124.69, y: bounds.maxY - 37.5))
        fidelityLogoPath.line(to: NSPoint(x: bounds.minX + 119.39, y: bounds.maxY - 37.5))
        fidelityLogoPath.line(to: NSPoint(x: bounds.minX + 120.17, y: bounds.maxY - 34.64))
        fidelityLogoPath.line(to: NSPoint(x: bounds.minX + 120.23, y: bounds.maxY - 34.64))
        fidelityLogoPath.curve(to: NSPoint(x: bounds.minX + 121.91, y: bounds.maxY - 34.51), controlPoint1: NSPoint(x: bounds.minX + 120.56, y: bounds.maxY - 34.66), controlPoint2: NSPoint(x: bounds.minX + 121.49, y: bounds.maxY - 34.69))
        fidelityLogoPath.curve(to: NSPoint(x: bounds.minX + 122.61, y: bounds.maxY - 33.37), controlPoint1: NSPoint(x: bounds.minX + 122.29, y: bounds.maxY - 34.33), controlPoint2: NSPoint(x: bounds.minX + 122.49, y: bounds.maxY - 33.99))
        fidelityLogoPath.line(to: NSPoint(x: bounds.minX + 121.88, y: bounds.maxY - 25.34))
        fidelityLogoPath.close()
        fidelityLogoPath.move(to: NSPoint(x: bounds.minX + 113.64, y: bounds.maxY - 22.38))
        fidelityLogoPath.line(to: NSPoint(x: bounds.minX + 108.74, y: bounds.maxY - 22.38))
        fidelityLogoPath.line(to: NSPoint(x: bounds.minX + 109.54, y: bounds.maxY - 19.5))
        fidelityLogoPath.line(to: NSPoint(x: bounds.minX + 114.44, y: bounds.maxY - 19.5))
        fidelityLogoPath.line(to: NSPoint(x: bounds.minX + 113.64, y: bounds.maxY - 22.38))
        fidelityLogoPath.close()
        fidelityLogoPath.windingRule = .evenOddWindingRule
        logoWhite.setFill()
        fidelityLogoPath.fill()
    }

    public static func drawPaypalButton(bounds: NSRect = NSRect(x: 0, y: 0, width: 191, height: 56), original: Bool = true, hover: Bool = false, pressed: Bool = false) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext

        //// Color Declarations
        let highlightGradientColor = NSColor(deviceRed: 1, green: 1, blue: 1, alpha: 0.09)
        let highlightGradientColor2 = NSColor(deviceRed: 1, green: 1, blue: 1, alpha: 0)
        let shadow2Color = NSColor(deviceRed: 1, green: 1, blue: 1, alpha: 0.36)
        let logoWhite = NSColor(deviceRed: 1, green: 1, blue: 1, alpha: 1)
        let paypalBackground = NSColor(deviceRed: 0.012, green: 0.271, blue: 0.486, alpha: 1)
        let fillColor21 = NSColor(deviceRed: 1, green: 1, blue: 1, alpha: 0.68)
        let fillColor22 = NSColor(deviceRed: 1, green: 1, blue: 1, alpha: 0.7)

        //// Gradient Declarations
        let highlightGradient = NSGradient(starting: highlightGradientColor, ending: highlightGradientColor2)!

        //// Shadow Declarations
        let outerShadow = NSShadow()
        outerShadow.shadowColor = NSColor.black
        outerShadow.shadowOffset = NSSize(width: 0, height: 0)
        outerShadow.shadowBlurRadius = 0.5
        let innerStroke = NSShadow()
        innerStroke.shadowColor = shadow2Color
        innerStroke.shadowOffset = NSSize(width: 0, height: 0)
        innerStroke.shadowBlurRadius = 0.5

        if (original) {
            //// paypal
            NSGraphicsContext.saveGraphicsState()
            context.translateBy(x: bounds.minX + 95.5, y: bounds.maxY - 28)

            outerShadow.set()
            context.beginTransparencyLayer(auxiliaryInfo: nil)


            //// paypalBase Drawing
            let paypalBasePath = NSBezierPath(roundedRect: NSRect(x: -88.5, y: -21, width: 177, height: 42), xRadius: 5, yRadius: 5)
            paypalBackground.setFill()
            paypalBasePath.fill()


            //// paypalHighlight Drawing
            let paypalHighlightPath = NSBezierPath(roundedRect: NSRect(x: -88.5, y: -21, width: 177, height: 42), xRadius: 5, yRadius: 5)
            highlightGradient.draw(in: paypalHighlightPath, angle: -45)

            ////// paypalHighlight Inner Shadow
            NSGraphicsContext.saveGraphicsState()
            NSRectClip(paypalHighlightPath.bounds)
            context.setShadow(offset: NSSize.zero, blur: 0, color: nil)

            context.setAlpha(innerStroke.shadowColor!.alphaComponent)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            let paypalHighlightOpaqueShadow = NSShadow()
            paypalHighlightOpaqueShadow.shadowColor = innerStroke.shadowColor!.withAlphaComponent(1)
            paypalHighlightOpaqueShadow.shadowOffset = innerStroke.shadowOffset
            paypalHighlightOpaqueShadow.shadowBlurRadius = innerStroke.shadowBlurRadius
            paypalHighlightOpaqueShadow.set()

            context.setBlendMode(.sourceOut)
            context.beginTransparencyLayer(auxiliaryInfo: nil)

            paypalHighlightOpaqueShadow.shadowColor!.setFill()
            paypalHighlightPath.fill()

            context.endTransparencyLayer()
            context.endTransparencyLayer()
            NSGraphicsContext.restoreGraphicsState()



            context.endTransparencyLayer()

            NSGraphicsContext.restoreGraphicsState()
        }


        if (hover) {
            //// paypalHover
            NSGraphicsContext.saveGraphicsState()
            context.translateBy(x: bounds.minX + 95.5, y: bounds.maxY - 28)
            context.scaleBy(x: 1.05, y: 1.05)

            outerShadow.set()
            context.beginTransparencyLayer(auxiliaryInfo: nil)


            //// paypalBase 2 Drawing
            let paypalBase2Path = NSBezierPath(roundedRect: NSRect(x: -88.5, y: -21, width: 177, height: 42), xRadius: 5, yRadius: 5)
            paypalBackground.setFill()
            paypalBase2Path.fill()


            //// paypalHighlight 2 Drawing
            let paypalHighlight2Path = NSBezierPath(roundedRect: NSRect(x: -88.5, y: -21, width: 177, height: 42), xRadius: 5, yRadius: 5)
            highlightGradient.draw(in: paypalHighlight2Path, angle: -45)

            ////// paypalHighlight 2 Inner Shadow
            NSGraphicsContext.saveGraphicsState()
            NSRectClip(paypalHighlight2Path.bounds)
            context.setShadow(offset: NSSize.zero, blur: 0, color: nil)

            context.setAlpha(innerStroke.shadowColor!.alphaComponent)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            let paypalHighlight2OpaqueShadow = NSShadow()
            paypalHighlight2OpaqueShadow.shadowColor = innerStroke.shadowColor!.withAlphaComponent(1)
            paypalHighlight2OpaqueShadow.shadowOffset = innerStroke.shadowOffset
            paypalHighlight2OpaqueShadow.shadowBlurRadius = innerStroke.shadowBlurRadius
            paypalHighlight2OpaqueShadow.set()

            context.setBlendMode(.sourceOut)
            context.beginTransparencyLayer(auxiliaryInfo: nil)

            paypalHighlight2OpaqueShadow.shadowColor!.setFill()
            paypalHighlight2Path.fill()

            context.endTransparencyLayer()
            context.endTransparencyLayer()
            NSGraphicsContext.restoreGraphicsState()



            context.endTransparencyLayer()

            NSGraphicsContext.restoreGraphicsState()
        }


        if (pressed) {
            //// paypalPressed
            NSGraphicsContext.saveGraphicsState()
            context.translateBy(x: bounds.minX + 95.5, y: bounds.maxY - 28)

            outerShadow.set()
            context.beginTransparencyLayer(auxiliaryInfo: nil)


            //// paypalBase 3 Drawing
            let paypalBase3Path = NSBezierPath(roundedRect: NSRect(x: -88.5, y: -21, width: 177, height: 42), xRadius: 5, yRadius: 5)
            paypalBackground.setFill()
            paypalBase3Path.fill()


            //// paypalHighlight 3 Drawing
            let paypalHighlight3Path = NSBezierPath(roundedRect: NSRect(x: -88.5, y: -21, width: 177, height: 42), xRadius: 5, yRadius: 5)
            highlightGradient.draw(in: paypalHighlight3Path, angle: -45)

            ////// paypalHighlight 3 Inner Shadow
            NSGraphicsContext.saveGraphicsState()
            NSRectClip(paypalHighlight3Path.bounds)
            context.setShadow(offset: NSSize.zero, blur: 0, color: nil)

            context.setAlpha(innerStroke.shadowColor!.alphaComponent)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            let paypalHighlight3OpaqueShadow = NSShadow()
            paypalHighlight3OpaqueShadow.shadowColor = innerStroke.shadowColor!.withAlphaComponent(1)
            paypalHighlight3OpaqueShadow.shadowOffset = innerStroke.shadowOffset
            paypalHighlight3OpaqueShadow.shadowBlurRadius = innerStroke.shadowBlurRadius
            paypalHighlight3OpaqueShadow.set()

            context.setBlendMode(.sourceOut)
            context.beginTransparencyLayer(auxiliaryInfo: nil)

            paypalHighlight3OpaqueShadow.shadowColor!.setFill()
            paypalHighlight3Path.fill()

            context.endTransparencyLayer()
            context.endTransparencyLayer()
            NSGraphicsContext.restoreGraphicsState()



            context.endTransparencyLayer()

            NSGraphicsContext.restoreGraphicsState()
        }


        //// paypalLogo
        //// text Drawing
        let textPath = NSBezierPath()
        textPath.move(to: NSPoint(x: bounds.minX + 120.25, y: bounds.maxY - 20.93))
        textPath.line(to: NSPoint(x: bounds.minX + 115.31, y: bounds.maxY - 20.93))
        textPath.curve(to: NSPoint(x: bounds.minX + 114.63, y: bounds.maxY - 21.51), controlPoint1: NSPoint(x: bounds.minX + 114.97, y: bounds.maxY - 20.93), controlPoint2: NSPoint(x: bounds.minX + 114.68, y: bounds.maxY - 21.18))
        textPath.line(to: NSPoint(x: bounds.minX + 112.63, y: bounds.maxY - 34.32))
        textPath.curve(to: NSPoint(x: bounds.minX + 113.04, y: bounds.maxY - 34.8), controlPoint1: NSPoint(x: bounds.minX + 112.59, y: bounds.maxY - 34.57), controlPoint2: NSPoint(x: bounds.minX + 112.78, y: bounds.maxY - 34.8))
        textPath.line(to: NSPoint(x: bounds.minX + 115.57, y: bounds.maxY - 34.8))
        textPath.curve(to: NSPoint(x: bounds.minX + 116.05, y: bounds.maxY - 34.39), controlPoint1: NSPoint(x: bounds.minX + 115.81, y: bounds.maxY - 34.8), controlPoint2: NSPoint(x: bounds.minX + 116.01, y: bounds.maxY - 34.63))
        textPath.line(to: NSPoint(x: bounds.minX + 116.61, y: bounds.maxY - 30.76))
        textPath.curve(to: NSPoint(x: bounds.minX + 117.29, y: bounds.maxY - 30.18), controlPoint1: NSPoint(x: bounds.minX + 116.67, y: bounds.maxY - 30.42), controlPoint2: NSPoint(x: bounds.minX + 116.95, y: bounds.maxY - 30.18))
        textPath.line(to: NSPoint(x: bounds.minX + 118.86, y: bounds.maxY - 30.18))
        textPath.curve(to: NSPoint(x: bounds.minX + 124.49, y: bounds.maxY - 25.43), controlPoint1: NSPoint(x: bounds.minX + 122.11, y: bounds.maxY - 30.18), controlPoint2: NSPoint(x: bounds.minX + 123.99, y: bounds.maxY - 28.58))
        textPath.curve(to: NSPoint(x: bounds.minX + 123.85, y: bounds.maxY - 22.2), controlPoint1: NSPoint(x: bounds.minX + 124.71, y: bounds.maxY - 24.05), controlPoint2: NSPoint(x: bounds.minX + 124.49, y: bounds.maxY - 22.96))
        textPath.curve(to: NSPoint(x: bounds.minX + 120.25, y: bounds.maxY - 20.93), controlPoint1: NSPoint(x: bounds.minX + 123.15, y: bounds.maxY - 21.37), controlPoint2: NSPoint(x: bounds.minX + 121.9, y: bounds.maxY - 20.93))
        textPath.close()
        textPath.move(to: NSPoint(x: bounds.minX + 84.98, y: bounds.maxY - 20.93))
        textPath.line(to: NSPoint(x: bounds.minX + 80.04, y: bounds.maxY - 20.93))
        textPath.curve(to: NSPoint(x: bounds.minX + 79.36, y: bounds.maxY - 21.51), controlPoint1: NSPoint(x: bounds.minX + 79.7, y: bounds.maxY - 20.93), controlPoint2: NSPoint(x: bounds.minX + 79.41, y: bounds.maxY - 21.18))
        textPath.line(to: NSPoint(x: bounds.minX + 77.36, y: bounds.maxY - 34.32))
        textPath.curve(to: NSPoint(x: bounds.minX + 77.77, y: bounds.maxY - 34.8), controlPoint1: NSPoint(x: bounds.minX + 77.32, y: bounds.maxY - 34.57), controlPoint2: NSPoint(x: bounds.minX + 77.52, y: bounds.maxY - 34.8))
        textPath.line(to: NSPoint(x: bounds.minX + 80.13, y: bounds.maxY - 34.8))
        textPath.curve(to: NSPoint(x: bounds.minX + 80.81, y: bounds.maxY - 34.22), controlPoint1: NSPoint(x: bounds.minX + 80.47, y: bounds.maxY - 34.8), controlPoint2: NSPoint(x: bounds.minX + 80.76, y: bounds.maxY - 34.55))
        textPath.line(to: NSPoint(x: bounds.minX + 81.35, y: bounds.maxY - 30.76))
        textPath.curve(to: NSPoint(x: bounds.minX + 82.03, y: bounds.maxY - 30.18), controlPoint1: NSPoint(x: bounds.minX + 81.4, y: bounds.maxY - 30.42), controlPoint2: NSPoint(x: bounds.minX + 81.69, y: bounds.maxY - 30.18))
        textPath.line(to: NSPoint(x: bounds.minX + 83.59, y: bounds.maxY - 30.18))
        textPath.curve(to: NSPoint(x: bounds.minX + 89.22, y: bounds.maxY - 25.43), controlPoint1: NSPoint(x: bounds.minX + 86.85, y: bounds.maxY - 30.18), controlPoint2: NSPoint(x: bounds.minX + 88.73, y: bounds.maxY - 28.58))
        textPath.curve(to: NSPoint(x: bounds.minX + 88.59, y: bounds.maxY - 22.2), controlPoint1: NSPoint(x: bounds.minX + 89.44, y: bounds.maxY - 24.05), controlPoint2: NSPoint(x: bounds.minX + 89.23, y: bounds.maxY - 22.96))
        textPath.curve(to: NSPoint(x: bounds.minX + 84.98, y: bounds.maxY - 20.93), controlPoint1: NSPoint(x: bounds.minX + 87.89, y: bounds.maxY - 21.37), controlPoint2: NSPoint(x: bounds.minX + 86.64, y: bounds.maxY - 20.93))
        textPath.close()
        textPath.move(to: NSPoint(x: bounds.minX + 99.76, y: bounds.maxY - 25.55))
        textPath.line(to: NSPoint(x: bounds.minX + 97.4, y: bounds.maxY - 25.55))
        textPath.curve(to: NSPoint(x: bounds.minX + 96.99, y: bounds.maxY - 25.9), controlPoint1: NSPoint(x: bounds.minX + 97.19, y: bounds.maxY - 25.55), controlPoint2: NSPoint(x: bounds.minX + 97.02, y: bounds.maxY - 25.7))
        textPath.line(to: NSPoint(x: bounds.minX + 96.88, y: bounds.maxY - 26.57))
        textPath.line(to: NSPoint(x: bounds.minX + 96.72, y: bounds.maxY - 26.33))
        textPath.curve(to: NSPoint(x: bounds.minX + 93.92, y: bounds.maxY - 25.32), controlPoint1: NSPoint(x: bounds.minX + 96.21, y: bounds.maxY - 25.57), controlPoint2: NSPoint(x: bounds.minX + 95.06, y: bounds.maxY - 25.32))
        textPath.curve(to: NSPoint(x: bounds.minX + 88.64, y: bounds.maxY - 30.13), controlPoint1: NSPoint(x: bounds.minX + 91.31, y: bounds.maxY - 25.32), controlPoint2: NSPoint(x: bounds.minX + 89.07, y: bounds.maxY - 27.33))
        textPath.curve(to: NSPoint(x: bounds.minX + 89.52, y: bounds.maxY - 33.81), controlPoint1: NSPoint(x: bounds.minX + 88.41, y: bounds.maxY - 31.53), controlPoint2: NSPoint(x: bounds.minX + 88.73, y: bounds.maxY - 32.87))
        textPath.curve(to: NSPoint(x: bounds.minX + 92.5, y: bounds.maxY - 35.02), controlPoint1: NSPoint(x: bounds.minX + 90.24, y: bounds.maxY - 34.67), controlPoint2: NSPoint(x: bounds.minX + 91.27, y: bounds.maxY - 35.02))
        textPath.curve(to: NSPoint(x: bounds.minX + 95.78, y: bounds.maxY - 33.66), controlPoint1: NSPoint(x: bounds.minX + 94.61, y: bounds.maxY - 35.02), controlPoint2: NSPoint(x: bounds.minX + 95.78, y: bounds.maxY - 33.66))
        textPath.line(to: NSPoint(x: bounds.minX + 95.67, y: bounds.maxY - 34.32))
        textPath.curve(to: NSPoint(x: bounds.minX + 96.08, y: bounds.maxY - 34.8), controlPoint1: NSPoint(x: bounds.minX + 95.63, y: bounds.maxY - 34.57), controlPoint2: NSPoint(x: bounds.minX + 95.83, y: bounds.maxY - 34.8))
        textPath.line(to: NSPoint(x: bounds.minX + 98.21, y: bounds.maxY - 34.8))
        textPath.curve(to: NSPoint(x: bounds.minX + 98.89, y: bounds.maxY - 34.22), controlPoint1: NSPoint(x: bounds.minX + 98.55, y: bounds.maxY - 34.8), controlPoint2: NSPoint(x: bounds.minX + 98.84, y: bounds.maxY - 34.55))
        textPath.line(to: NSPoint(x: bounds.minX + 100.17, y: bounds.maxY - 26.03))
        textPath.curve(to: NSPoint(x: bounds.minX + 99.76, y: bounds.maxY - 25.55), controlPoint1: NSPoint(x: bounds.minX + 100.21, y: bounds.maxY - 25.78), controlPoint2: NSPoint(x: bounds.minX + 100.02, y: bounds.maxY - 25.55))
        textPath.close()
        textPath.move(to: NSPoint(x: bounds.minX + 135.03, y: bounds.maxY - 25.55))
        textPath.line(to: NSPoint(x: bounds.minX + 132.66, y: bounds.maxY - 25.55))
        textPath.curve(to: NSPoint(x: bounds.minX + 132.25, y: bounds.maxY - 25.9), controlPoint1: NSPoint(x: bounds.minX + 132.46, y: bounds.maxY - 25.55), controlPoint2: NSPoint(x: bounds.minX + 132.29, y: bounds.maxY - 25.7))
        textPath.line(to: NSPoint(x: bounds.minX + 132.15, y: bounds.maxY - 26.57))
        textPath.line(to: NSPoint(x: bounds.minX + 131.98, y: bounds.maxY - 26.33))
        textPath.curve(to: NSPoint(x: bounds.minX + 129.19, y: bounds.maxY - 25.32), controlPoint1: NSPoint(x: bounds.minX + 131.47, y: bounds.maxY - 25.57), controlPoint2: NSPoint(x: bounds.minX + 130.33, y: bounds.maxY - 25.32))
        textPath.curve(to: NSPoint(x: bounds.minX + 123.9, y: bounds.maxY - 30.13), controlPoint1: NSPoint(x: bounds.minX + 126.57, y: bounds.maxY - 25.32), controlPoint2: NSPoint(x: bounds.minX + 124.34, y: bounds.maxY - 27.33))
        textPath.curve(to: NSPoint(x: bounds.minX + 124.78, y: bounds.maxY - 33.81), controlPoint1: NSPoint(x: bounds.minX + 123.68, y: bounds.maxY - 31.53), controlPoint2: NSPoint(x: bounds.minX + 124, y: bounds.maxY - 32.87))
        textPath.curve(to: NSPoint(x: bounds.minX + 127.77, y: bounds.maxY - 35.02), controlPoint1: NSPoint(x: bounds.minX + 125.51, y: bounds.maxY - 34.67), controlPoint2: NSPoint(x: bounds.minX + 126.54, y: bounds.maxY - 35.02))
        textPath.curve(to: NSPoint(x: bounds.minX + 131.04, y: bounds.maxY - 33.66), controlPoint1: NSPoint(x: bounds.minX + 129.87, y: bounds.maxY - 35.02), controlPoint2: NSPoint(x: bounds.minX + 131.04, y: bounds.maxY - 33.66))
        textPath.line(to: NSPoint(x: bounds.minX + 130.94, y: bounds.maxY - 34.32))
        textPath.curve(to: NSPoint(x: bounds.minX + 131.35, y: bounds.maxY - 34.8), controlPoint1: NSPoint(x: bounds.minX + 130.9, y: bounds.maxY - 34.57), controlPoint2: NSPoint(x: bounds.minX + 131.09, y: bounds.maxY - 34.8))
        textPath.line(to: NSPoint(x: bounds.minX + 133.48, y: bounds.maxY - 34.8))
        textPath.curve(to: NSPoint(x: bounds.minX + 134.16, y: bounds.maxY - 34.22), controlPoint1: NSPoint(x: bounds.minX + 133.82, y: bounds.maxY - 34.8), controlPoint2: NSPoint(x: bounds.minX + 134.1, y: bounds.maxY - 34.55))
        textPath.line(to: NSPoint(x: bounds.minX + 135.44, y: bounds.maxY - 26.03))
        textPath.curve(to: NSPoint(x: bounds.minX + 135.03, y: bounds.maxY - 25.55), controlPoint1: NSPoint(x: bounds.minX + 135.48, y: bounds.maxY - 25.78), controlPoint2: NSPoint(x: bounds.minX + 135.28, y: bounds.maxY - 25.55))
        textPath.close()
        textPath.move(to: NSPoint(x: bounds.minX + 112.37, y: bounds.maxY - 25.55))
        textPath.line(to: NSPoint(x: bounds.minX + 109.99, y: bounds.maxY - 25.55))
        textPath.curve(to: NSPoint(x: bounds.minX + 109.43, y: bounds.maxY - 25.85), controlPoint1: NSPoint(x: bounds.minX + 109.77, y: bounds.maxY - 25.55), controlPoint2: NSPoint(x: bounds.minX + 109.55, y: bounds.maxY - 25.66))
        textPath.line(to: NSPoint(x: bounds.minX + 106.14, y: bounds.maxY - 30.74))
        textPath.line(to: NSPoint(x: bounds.minX + 104.75, y: bounds.maxY - 26.04))
        textPath.curve(to: NSPoint(x: bounds.minX + 104.09, y: bounds.maxY - 25.55), controlPoint1: NSPoint(x: bounds.minX + 104.66, y: bounds.maxY - 25.75), controlPoint2: NSPoint(x: bounds.minX + 104.4, y: bounds.maxY - 25.55))
        textPath.line(to: NSPoint(x: bounds.minX + 101.75, y: bounds.maxY - 25.55))
        textPath.curve(to: NSPoint(x: bounds.minX + 101.36, y: bounds.maxY - 26.1), controlPoint1: NSPoint(x: bounds.minX + 101.47, y: bounds.maxY - 25.55), controlPoint2: NSPoint(x: bounds.minX + 101.27, y: bounds.maxY - 25.83))
        textPath.line(to: NSPoint(x: bounds.minX + 103.98, y: bounds.maxY - 33.87))
        textPath.line(to: NSPoint(x: bounds.minX + 101.52, y: bounds.maxY - 37.38))
        textPath.curve(to: NSPoint(x: bounds.minX + 101.86, y: bounds.maxY - 38.04), controlPoint1: NSPoint(x: bounds.minX + 101.33, y: bounds.maxY - 37.66), controlPoint2: NSPoint(x: bounds.minX + 101.52, y: bounds.maxY - 38.04))
        textPath.line(to: NSPoint(x: bounds.minX + 104.23, y: bounds.maxY - 38.04))
        textPath.curve(to: NSPoint(x: bounds.minX + 104.8, y: bounds.maxY - 37.74), controlPoint1: NSPoint(x: bounds.minX + 104.46, y: bounds.maxY - 38.04), controlPoint2: NSPoint(x: bounds.minX + 104.67, y: bounds.maxY - 37.93))
        textPath.line(to: NSPoint(x: bounds.minX + 112.71, y: bounds.maxY - 26.2))
        textPath.curve(to: NSPoint(x: bounds.minX + 112.37, y: bounds.maxY - 25.55), controlPoint1: NSPoint(x: bounds.minX + 112.9, y: bounds.maxY - 25.93), controlPoint2: NSPoint(x: bounds.minX + 112.71, y: bounds.maxY - 25.55))
        textPath.close()
        textPath.move(to: NSPoint(x: bounds.minX + 137.82, y: bounds.maxY - 21.28))
        textPath.line(to: NSPoint(x: bounds.minX + 135.79, y: bounds.maxY - 34.32))
        textPath.curve(to: NSPoint(x: bounds.minX + 136.2, y: bounds.maxY - 34.8), controlPoint1: NSPoint(x: bounds.minX + 135.75, y: bounds.maxY - 34.57), controlPoint2: NSPoint(x: bounds.minX + 135.94, y: bounds.maxY - 34.8))
        textPath.line(to: NSPoint(x: bounds.minX + 138.24, y: bounds.maxY - 34.8))
        textPath.curve(to: NSPoint(x: bounds.minX + 138.92, y: bounds.maxY - 34.22), controlPoint1: NSPoint(x: bounds.minX + 138.58, y: bounds.maxY - 34.8), controlPoint2: NSPoint(x: bounds.minX + 138.86, y: bounds.maxY - 34.55))
        textPath.line(to: NSPoint(x: bounds.minX + 140.92, y: bounds.maxY - 21.41))
        textPath.curve(to: NSPoint(x: bounds.minX + 140.51, y: bounds.maxY - 20.93), controlPoint1: NSPoint(x: bounds.minX + 140.96, y: bounds.maxY - 21.16), controlPoint2: NSPoint(x: bounds.minX + 140.76, y: bounds.maxY - 20.93))
        textPath.line(to: NSPoint(x: bounds.minX + 138.23, y: bounds.maxY - 20.93))
        textPath.curve(to: NSPoint(x: bounds.minX + 137.82, y: bounds.maxY - 21.28), controlPoint1: NSPoint(x: bounds.minX + 138.02, y: bounds.maxY - 20.93), controlPoint2: NSPoint(x: bounds.minX + 137.85, y: bounds.maxY - 21.08))
        textPath.close()
        textPath.move(to: NSPoint(x: bounds.minX + 120.82, y: bounds.maxY - 25.61))
        textPath.curve(to: NSPoint(x: bounds.minX + 117.88, y: bounds.maxY - 27.4), controlPoint1: NSPoint(x: bounds.minX + 120.55, y: bounds.maxY - 27.4), controlPoint2: NSPoint(x: bounds.minX + 119.2, y: bounds.maxY - 27.4))
        textPath.line(to: NSPoint(x: bounds.minX + 117.14, y: bounds.maxY - 27.4))
        textPath.line(to: NSPoint(x: bounds.minX + 117.66, y: bounds.maxY - 24.05))
        textPath.curve(to: NSPoint(x: bounds.minX + 118.07, y: bounds.maxY - 23.7), controlPoint1: NSPoint(x: bounds.minX + 117.69, y: bounds.maxY - 23.85), controlPoint2: NSPoint(x: bounds.minX + 117.87, y: bounds.maxY - 23.7))
        textPath.line(to: NSPoint(x: bounds.minX + 118.41, y: bounds.maxY - 23.7))
        textPath.curve(to: NSPoint(x: bounds.minX + 120.58, y: bounds.maxY - 24.21), controlPoint1: NSPoint(x: bounds.minX + 119.3, y: bounds.maxY - 23.7), controlPoint2: NSPoint(x: bounds.minX + 120.15, y: bounds.maxY - 23.7))
        textPath.curve(to: NSPoint(x: bounds.minX + 120.82, y: bounds.maxY - 25.61), controlPoint1: NSPoint(x: bounds.minX + 120.84, y: bounds.maxY - 24.52), controlPoint2: NSPoint(x: bounds.minX + 120.92, y: bounds.maxY - 24.98))
        textPath.close()
        textPath.move(to: NSPoint(x: bounds.minX + 85.56, y: bounds.maxY - 25.61))
        textPath.curve(to: NSPoint(x: bounds.minX + 82.62, y: bounds.maxY - 27.4), controlPoint1: NSPoint(x: bounds.minX + 85.29, y: bounds.maxY - 27.4), controlPoint2: NSPoint(x: bounds.minX + 83.93, y: bounds.maxY - 27.4))
        textPath.line(to: NSPoint(x: bounds.minX + 81.87, y: bounds.maxY - 27.4))
        textPath.line(to: NSPoint(x: bounds.minX + 82.4, y: bounds.maxY - 24.05))
        textPath.curve(to: NSPoint(x: bounds.minX + 82.8, y: bounds.maxY - 23.7), controlPoint1: NSPoint(x: bounds.minX + 82.43, y: bounds.maxY - 23.85), controlPoint2: NSPoint(x: bounds.minX + 82.6, y: bounds.maxY - 23.7))
        textPath.line(to: NSPoint(x: bounds.minX + 83.15, y: bounds.maxY - 23.7))
        textPath.curve(to: NSPoint(x: bounds.minX + 85.32, y: bounds.maxY - 24.21), controlPoint1: NSPoint(x: bounds.minX + 84.04, y: bounds.maxY - 23.7), controlPoint2: NSPoint(x: bounds.minX + 84.88, y: bounds.maxY - 23.7))
        textPath.curve(to: NSPoint(x: bounds.minX + 85.56, y: bounds.maxY - 25.61), controlPoint1: NSPoint(x: bounds.minX + 85.58, y: bounds.maxY - 24.52), controlPoint2: NSPoint(x: bounds.minX + 85.65, y: bounds.maxY - 24.98))
        textPath.close()
        textPath.move(to: NSPoint(x: bounds.minX + 96.46, y: bounds.maxY - 30.2))
        textPath.curve(to: NSPoint(x: bounds.minX + 93.79, y: bounds.maxY - 32.49), controlPoint1: NSPoint(x: bounds.minX + 96.24, y: bounds.maxY - 31.57), controlPoint2: NSPoint(x: bounds.minX + 95.16, y: bounds.maxY - 32.49))
        textPath.curve(to: NSPoint(x: bounds.minX + 92.2, y: bounds.maxY - 31.84), controlPoint1: NSPoint(x: bounds.minX + 93.1, y: bounds.maxY - 32.49), controlPoint2: NSPoint(x: bounds.minX + 92.55, y: bounds.maxY - 32.26))
        textPath.curve(to: NSPoint(x: bounds.minX + 91.83, y: bounds.maxY - 30.16), controlPoint1: NSPoint(x: bounds.minX + 91.85, y: bounds.maxY - 31.42), controlPoint2: NSPoint(x: bounds.minX + 91.72, y: bounds.maxY - 30.83))
        textPath.curve(to: NSPoint(x: bounds.minX + 94.48, y: bounds.maxY - 27.86), controlPoint1: NSPoint(x: bounds.minX + 92.04, y: bounds.maxY - 28.81), controlPoint2: NSPoint(x: bounds.minX + 93.14, y: bounds.maxY - 27.86))
        textPath.curve(to: NSPoint(x: bounds.minX + 96.06, y: bounds.maxY - 28.51), controlPoint1: NSPoint(x: bounds.minX + 95.16, y: bounds.maxY - 27.86), controlPoint2: NSPoint(x: bounds.minX + 95.7, y: bounds.maxY - 28.09))
        textPath.curve(to: NSPoint(x: bounds.minX + 96.46, y: bounds.maxY - 30.2), controlPoint1: NSPoint(x: bounds.minX + 96.43, y: bounds.maxY - 28.94), controlPoint2: NSPoint(x: bounds.minX + 96.57, y: bounds.maxY - 29.54))
        textPath.close()
        textPath.move(to: NSPoint(x: bounds.minX + 131.73, y: bounds.maxY - 30.2))
        textPath.curve(to: NSPoint(x: bounds.minX + 129.06, y: bounds.maxY - 32.49), controlPoint1: NSPoint(x: bounds.minX + 131.5, y: bounds.maxY - 31.57), controlPoint2: NSPoint(x: bounds.minX + 130.43, y: bounds.maxY - 32.49))
        textPath.curve(to: NSPoint(x: bounds.minX + 127.47, y: bounds.maxY - 31.84), controlPoint1: NSPoint(x: bounds.minX + 128.37, y: bounds.maxY - 32.49), controlPoint2: NSPoint(x: bounds.minX + 127.82, y: bounds.maxY - 32.26))
        textPath.curve(to: NSPoint(x: bounds.minX + 127.1, y: bounds.maxY - 30.16), controlPoint1: NSPoint(x: bounds.minX + 127.12, y: bounds.maxY - 31.42), controlPoint2: NSPoint(x: bounds.minX + 126.99, y: bounds.maxY - 30.83))
        textPath.curve(to: NSPoint(x: bounds.minX + 129.75, y: bounds.maxY - 27.86), controlPoint1: NSPoint(x: bounds.minX + 127.31, y: bounds.maxY - 28.81), controlPoint2: NSPoint(x: bounds.minX + 128.4, y: bounds.maxY - 27.86))
        textPath.curve(to: NSPoint(x: bounds.minX + 131.33, y: bounds.maxY - 28.51), controlPoint1: NSPoint(x: bounds.minX + 130.42, y: bounds.maxY - 27.86), controlPoint2: NSPoint(x: bounds.minX + 130.97, y: bounds.maxY - 28.09))
        textPath.curve(to: NSPoint(x: bounds.minX + 131.73, y: bounds.maxY - 30.2), controlPoint1: NSPoint(x: bounds.minX + 131.69, y: bounds.maxY - 28.94), controlPoint2: NSPoint(x: bounds.minX + 131.83, y: bounds.maxY - 29.54))
        textPath.close()
        textPath.windingRule = .evenOddWindingRule
        logoWhite.setFill()
        textPath.fill()


        //// logo
        //// Shape Drawing
        let shapePath = NSBezierPath()
        shapePath.move(to: NSPoint(x: bounds.minX + 67.66, y: bounds.maxY - 21.6))
        shapePath.curve(to: NSPoint(x: bounds.minX + 66.74, y: bounds.maxY - 17.66), controlPoint1: NSPoint(x: bounds.minX + 67.93, y: bounds.maxY - 19.88), controlPoint2: NSPoint(x: bounds.minX + 67.66, y: bounds.maxY - 18.72))
        shapePath.curve(to: NSPoint(x: bounds.minX + 61.57, y: bounds.maxY - 16), controlPoint1: NSPoint(x: bounds.minX + 65.73, y: bounds.maxY - 16.5), controlPoint2: NSPoint(x: bounds.minX + 63.91, y: bounds.maxY - 16))
        shapePath.line(to: NSPoint(x: bounds.minX + 54.79, y: bounds.maxY - 16))
        shapePath.curve(to: NSPoint(x: bounds.minX + 53.83, y: bounds.maxY - 16.83), controlPoint1: NSPoint(x: bounds.minX + 54.31, y: bounds.maxY - 16), controlPoint2: NSPoint(x: bounds.minX + 53.91, y: bounds.maxY - 16.35))
        shapePath.line(to: NSPoint(x: bounds.minX + 51.01, y: bounds.maxY - 34.91))
        shapePath.curve(to: NSPoint(x: bounds.minX + 51.58, y: bounds.maxY - 35.59), controlPoint1: NSPoint(x: bounds.minX + 50.95, y: bounds.maxY - 35.27), controlPoint2: NSPoint(x: bounds.minX + 51.22, y: bounds.maxY - 35.59))
        shapePath.line(to: NSPoint(x: bounds.minX + 55.77, y: bounds.maxY - 35.59))
        shapePath.line(to: NSPoint(x: bounds.minX + 55.48, y: bounds.maxY - 37.44))
        shapePath.curve(to: NSPoint(x: bounds.minX + 55.98, y: bounds.maxY - 38.04), controlPoint1: NSPoint(x: bounds.minX + 55.43, y: bounds.maxY - 37.76), controlPoint2: NSPoint(x: bounds.minX + 55.67, y: bounds.maxY - 38.04))
        shapePath.line(to: NSPoint(x: bounds.minX + 59.51, y: bounds.maxY - 38.04))
        shapePath.curve(to: NSPoint(x: bounds.minX + 60.35, y: bounds.maxY - 37.31), controlPoint1: NSPoint(x: bounds.minX + 59.93, y: bounds.maxY - 38.04), controlPoint2: NSPoint(x: bounds.minX + 60.28, y: bounds.maxY - 37.73))
        shapePath.line(to: NSPoint(x: bounds.minX + 60.38, y: bounds.maxY - 37.13))
        shapePath.line(to: NSPoint(x: bounds.minX + 61.05, y: bounds.maxY - 32.87))
        shapePath.line(to: NSPoint(x: bounds.minX + 61.09, y: bounds.maxY - 32.64))
        shapePath.curve(to: NSPoint(x: bounds.minX + 61.93, y: bounds.maxY - 31.92), controlPoint1: NSPoint(x: bounds.minX + 61.16, y: bounds.maxY - 32.22), controlPoint2: NSPoint(x: bounds.minX + 61.51, y: bounds.maxY - 31.92))
        shapePath.line(to: NSPoint(x: bounds.minX + 62.46, y: bounds.maxY - 31.92))
        shapePath.curve(to: NSPoint(x: bounds.minX + 69.33, y: bounds.maxY - 26.46), controlPoint1: NSPoint(x: bounds.minX + 65.88, y: bounds.maxY - 31.92), controlPoint2: NSPoint(x: bounds.minX + 68.55, y: bounds.maxY - 30.51))
        shapePath.curve(to: NSPoint(x: bounds.minX + 68.63, y: bounds.maxY - 22.35), controlPoint1: NSPoint(x: bounds.minX + 69.66, y: bounds.maxY - 24.76), controlPoint2: NSPoint(x: bounds.minX + 69.49, y: bounds.maxY - 23.35))
        shapePath.curve(to: NSPoint(x: bounds.minX + 67.66, y: bounds.maxY - 21.6), controlPoint1: NSPoint(x: bounds.minX + 68.37, y: bounds.maxY - 22.05), controlPoint2: NSPoint(x: bounds.minX + 68.04, y: bounds.maxY - 21.8))
        shapePath.line(to: NSPoint(x: bounds.minX + 67.66, y: bounds.maxY - 21.6))
        shapePath.close()
        shapePath.windingRule = .evenOddWindingRule
        fillColor21.setFill()
        shapePath.fill()


        //// Shape 2 Drawing
        let shape2Path = NSBezierPath()
        shape2Path.move(to: NSPoint(x: bounds.minX + 67.66, y: bounds.maxY - 21.6))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 66.74, y: bounds.maxY - 17.66), controlPoint1: NSPoint(x: bounds.minX + 67.93, y: bounds.maxY - 19.88), controlPoint2: NSPoint(x: bounds.minX + 67.66, y: bounds.maxY - 18.72))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 61.57, y: bounds.maxY - 16), controlPoint1: NSPoint(x: bounds.minX + 65.73, y: bounds.maxY - 16.5), controlPoint2: NSPoint(x: bounds.minX + 63.91, y: bounds.maxY - 16))
        shape2Path.line(to: NSPoint(x: bounds.minX + 54.79, y: bounds.maxY - 16))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 53.83, y: bounds.maxY - 16.83), controlPoint1: NSPoint(x: bounds.minX + 54.31, y: bounds.maxY - 16), controlPoint2: NSPoint(x: bounds.minX + 53.91, y: bounds.maxY - 16.35))
        shape2Path.line(to: NSPoint(x: bounds.minX + 51.01, y: bounds.maxY - 34.91))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 51.58, y: bounds.maxY - 35.59), controlPoint1: NSPoint(x: bounds.minX + 50.95, y: bounds.maxY - 35.27), controlPoint2: NSPoint(x: bounds.minX + 51.22, y: bounds.maxY - 35.59))
        shape2Path.line(to: NSPoint(x: bounds.minX + 55.77, y: bounds.maxY - 35.59))
        shape2Path.line(to: NSPoint(x: bounds.minX + 56.82, y: bounds.maxY - 28.86))
        shape2Path.line(to: NSPoint(x: bounds.minX + 56.79, y: bounds.maxY - 29.07))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 57.74, y: bounds.maxY - 28.24), controlPoint1: NSPoint(x: bounds.minX + 56.86, y: bounds.maxY - 28.59), controlPoint2: NSPoint(x: bounds.minX + 57.26, y: bounds.maxY - 28.24))
        shape2Path.line(to: NSPoint(x: bounds.minX + 59.73, y: bounds.maxY - 28.24))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 67.59, y: bounds.maxY - 22), controlPoint1: NSPoint(x: bounds.minX + 63.64, y: bounds.maxY - 28.24), controlPoint2: NSPoint(x: bounds.minX + 66.7, y: bounds.maxY - 26.64))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 67.66, y: bounds.maxY - 21.6), controlPoint1: NSPoint(x: bounds.minX + 67.62, y: bounds.maxY - 21.86), controlPoint2: NSPoint(x: bounds.minX + 67.64, y: bounds.maxY - 21.73))
        shape2Path.close()
        shape2Path.windingRule = .evenOddWindingRule
        fillColor22.setFill()
        shape2Path.fill()


        //// Shape 3 Drawing
        let shape3Path = NSBezierPath()
        shape3Path.move(to: NSPoint(x: bounds.minX + 57.95, y: bounds.maxY - 21.62))
        shape3Path.curve(to: NSPoint(x: bounds.minX + 58.42, y: bounds.maxY - 20.98), controlPoint1: NSPoint(x: bounds.minX + 57.99, y: bounds.maxY - 21.34), controlPoint2: NSPoint(x: bounds.minX + 58.18, y: bounds.maxY - 21.1))
        shape3Path.curve(to: NSPoint(x: bounds.minX + 58.79, y: bounds.maxY - 20.9), controlPoint1: NSPoint(x: bounds.minX + 58.53, y: bounds.maxY - 20.93), controlPoint2: NSPoint(x: bounds.minX + 58.66, y: bounds.maxY - 20.9))
        shape3Path.line(to: NSPoint(x: bounds.minX + 64.1, y: bounds.maxY - 20.9))
        shape3Path.curve(to: NSPoint(x: bounds.minX + 65.86, y: bounds.maxY - 21.03), controlPoint1: NSPoint(x: bounds.minX + 64.73, y: bounds.maxY - 20.9), controlPoint2: NSPoint(x: bounds.minX + 65.32, y: bounds.maxY - 20.94))
        shape3Path.curve(to: NSPoint(x: bounds.minX + 66.3, y: bounds.maxY - 21.11), controlPoint1: NSPoint(x: bounds.minX + 66.01, y: bounds.maxY - 21.05), controlPoint2: NSPoint(x: bounds.minX + 66.16, y: bounds.maxY - 21.08))
        shape3Path.curve(to: NSPoint(x: bounds.minX + 66.73, y: bounds.maxY - 21.22), controlPoint1: NSPoint(x: bounds.minX + 66.45, y: bounds.maxY - 21.15), controlPoint2: NSPoint(x: bounds.minX + 66.59, y: bounds.maxY - 21.18))
        shape3Path.curve(to: NSPoint(x: bounds.minX + 66.93, y: bounds.maxY - 21.29), controlPoint1: NSPoint(x: bounds.minX + 66.8, y: bounds.maxY - 21.24), controlPoint2: NSPoint(x: bounds.minX + 66.86, y: bounds.maxY - 21.26))
        shape3Path.curve(to: NSPoint(x: bounds.minX + 67.66, y: bounds.maxY - 21.6), controlPoint1: NSPoint(x: bounds.minX + 67.19, y: bounds.maxY - 21.37), controlPoint2: NSPoint(x: bounds.minX + 67.44, y: bounds.maxY - 21.48))
        shape3Path.curve(to: NSPoint(x: bounds.minX + 66.74, y: bounds.maxY - 17.66), controlPoint1: NSPoint(x: bounds.minX + 67.93, y: bounds.maxY - 19.88), controlPoint2: NSPoint(x: bounds.minX + 67.66, y: bounds.maxY - 18.72))
        shape3Path.curve(to: NSPoint(x: bounds.minX + 61.57, y: bounds.maxY - 16), controlPoint1: NSPoint(x: bounds.minX + 65.73, y: bounds.maxY - 16.5), controlPoint2: NSPoint(x: bounds.minX + 63.91, y: bounds.maxY - 16))
        shape3Path.line(to: NSPoint(x: bounds.minX + 54.79, y: bounds.maxY - 16))
        shape3Path.curve(to: NSPoint(x: bounds.minX + 53.83, y: bounds.maxY - 16.83), controlPoint1: NSPoint(x: bounds.minX + 54.31, y: bounds.maxY - 16), controlPoint2: NSPoint(x: bounds.minX + 53.91, y: bounds.maxY - 16.35))
        shape3Path.line(to: NSPoint(x: bounds.minX + 51.01, y: bounds.maxY - 34.91))
        shape3Path.curve(to: NSPoint(x: bounds.minX + 51.58, y: bounds.maxY - 35.59), controlPoint1: NSPoint(x: bounds.minX + 50.95, y: bounds.maxY - 35.27), controlPoint2: NSPoint(x: bounds.minX + 51.22, y: bounds.maxY - 35.59))
        shape3Path.line(to: NSPoint(x: bounds.minX + 55.77, y: bounds.maxY - 35.59))
        shape3Path.line(to: NSPoint(x: bounds.minX + 56.82, y: bounds.maxY - 28.86))
        shape3Path.line(to: NSPoint(x: bounds.minX + 57.95, y: bounds.maxY - 21.62))
        shape3Path.line(to: NSPoint(x: bounds.minX + 57.95, y: bounds.maxY - 21.62))
        shape3Path.close()
        shape3Path.windingRule = .evenOddWindingRule
        logoWhite.setFill()
        shape3Path.fill()
    }

    public static func drawVenmoButton(bounds: NSRect = NSRect(x: 0, y: 0, width: 191, height: 56), original: Bool = true, hover: Bool = false, pressed: Bool = false) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext

        //// Color Declarations
        let highlightGradientColor = NSColor(deviceRed: 1, green: 1, blue: 1, alpha: 0.09)
        let highlightGradientColor2 = NSColor(deviceRed: 1, green: 1, blue: 1, alpha: 0)
        let shadow2Color = NSColor(deviceRed: 1, green: 1, blue: 1, alpha: 0.36)
        let logoWhite = NSColor(deviceRed: 1, green: 1, blue: 1, alpha: 1)
        let venmoBackground = NSColor(deviceRed: 0.239, green: 0.584, blue: 0.808, alpha: 1)

        //// Gradient Declarations
        let highlightGradient = NSGradient(starting: highlightGradientColor, ending: highlightGradientColor2)!

        //// Shadow Declarations
        let outerShadow = NSShadow()
        outerShadow.shadowColor = NSColor.black
        outerShadow.shadowOffset = NSSize(width: 0, height: 0)
        outerShadow.shadowBlurRadius = 0.5
        let innerStroke = NSShadow()
        innerStroke.shadowColor = shadow2Color
        innerStroke.shadowOffset = NSSize(width: 0, height: 0)
        innerStroke.shadowBlurRadius = 0.5

        if (original) {
            //// venmo
            NSGraphicsContext.saveGraphicsState()
            context.translateBy(x: bounds.minX + 95.5, y: bounds.maxY - 28)

            outerShadow.set()
            context.beginTransparencyLayer(auxiliaryInfo: nil)


            //// venmoBase Drawing
            let venmoBasePath = NSBezierPath(roundedRect: NSRect(x: -88.5, y: -21, width: 177, height: 42), xRadius: 5, yRadius: 5)
            venmoBackground.setFill()
            venmoBasePath.fill()


            //// venmoHighlight Drawing
            let venmoHighlightPath = NSBezierPath(roundedRect: NSRect(x: -88.5, y: -21, width: 177, height: 42), xRadius: 5, yRadius: 5)
            highlightGradient.draw(in: venmoHighlightPath, angle: -45)

            ////// venmoHighlight Inner Shadow
            NSGraphicsContext.saveGraphicsState()
            NSRectClip(venmoHighlightPath.bounds)
            context.setShadow(offset: NSSize.zero, blur: 0, color: nil)

            context.setAlpha(innerStroke.shadowColor!.alphaComponent)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            let venmoHighlightOpaqueShadow = NSShadow()
            venmoHighlightOpaqueShadow.shadowColor = innerStroke.shadowColor!.withAlphaComponent(1)
            venmoHighlightOpaqueShadow.shadowOffset = innerStroke.shadowOffset
            venmoHighlightOpaqueShadow.shadowBlurRadius = innerStroke.shadowBlurRadius
            venmoHighlightOpaqueShadow.set()

            context.setBlendMode(.sourceOut)
            context.beginTransparencyLayer(auxiliaryInfo: nil)

            venmoHighlightOpaqueShadow.shadowColor!.setFill()
            venmoHighlightPath.fill()

            context.endTransparencyLayer()
            context.endTransparencyLayer()
            NSGraphicsContext.restoreGraphicsState()



            context.endTransparencyLayer()

            NSGraphicsContext.restoreGraphicsState()
        }


        if (hover) {
            //// venmoHover
            NSGraphicsContext.saveGraphicsState()
            context.translateBy(x: bounds.minX + 95.5, y: bounds.maxY - 28)
            context.scaleBy(x: 1.05, y: 1.05)

            outerShadow.set()
            context.beginTransparencyLayer(auxiliaryInfo: nil)


            //// venmoBase 2 Drawing
            let venmoBase2Path = NSBezierPath(roundedRect: NSRect(x: -88.5, y: -21, width: 177, height: 42), xRadius: 5, yRadius: 5)
            venmoBackground.setFill()
            venmoBase2Path.fill()


            //// venmoHighlight 2 Drawing
            let venmoHighlight2Path = NSBezierPath(roundedRect: NSRect(x: -88.5, y: -21, width: 177, height: 42), xRadius: 5, yRadius: 5)
            highlightGradient.draw(in: venmoHighlight2Path, angle: -45)

            ////// venmoHighlight 2 Inner Shadow
            NSGraphicsContext.saveGraphicsState()
            NSRectClip(venmoHighlight2Path.bounds)
            context.setShadow(offset: NSSize.zero, blur: 0, color: nil)

            context.setAlpha(innerStroke.shadowColor!.alphaComponent)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            let venmoHighlight2OpaqueShadow = NSShadow()
            venmoHighlight2OpaqueShadow.shadowColor = innerStroke.shadowColor!.withAlphaComponent(1)
            venmoHighlight2OpaqueShadow.shadowOffset = innerStroke.shadowOffset
            venmoHighlight2OpaqueShadow.shadowBlurRadius = innerStroke.shadowBlurRadius
            venmoHighlight2OpaqueShadow.set()

            context.setBlendMode(.sourceOut)
            context.beginTransparencyLayer(auxiliaryInfo: nil)

            venmoHighlight2OpaqueShadow.shadowColor!.setFill()
            venmoHighlight2Path.fill()

            context.endTransparencyLayer()
            context.endTransparencyLayer()
            NSGraphicsContext.restoreGraphicsState()



            context.endTransparencyLayer()

            NSGraphicsContext.restoreGraphicsState()
        }


        if (pressed) {
            //// venmoPressed
            NSGraphicsContext.saveGraphicsState()
            context.translateBy(x: bounds.minX + 95.5, y: bounds.maxY - 28)

            outerShadow.set()
            context.beginTransparencyLayer(auxiliaryInfo: nil)


            //// venmoBase 3 Drawing
            let venmoBase3Path = NSBezierPath(roundedRect: NSRect(x: -88.5, y: -21, width: 177, height: 42), xRadius: 5, yRadius: 5)
            venmoBackground.setFill()
            venmoBase3Path.fill()


            //// venmoHighlight 3 Drawing
            let venmoHighlight3Path = NSBezierPath(roundedRect: NSRect(x: -88.5, y: -21, width: 177, height: 42), xRadius: 5, yRadius: 5)
            highlightGradient.draw(in: venmoHighlight3Path, angle: -45)

            ////// venmoHighlight 3 Inner Shadow
            NSGraphicsContext.saveGraphicsState()
            NSRectClip(venmoHighlight3Path.bounds)
            context.setShadow(offset: NSSize.zero, blur: 0, color: nil)

            context.setAlpha(innerStroke.shadowColor!.alphaComponent)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            let venmoHighlight3OpaqueShadow = NSShadow()
            venmoHighlight3OpaqueShadow.shadowColor = innerStroke.shadowColor!.withAlphaComponent(1)
            venmoHighlight3OpaqueShadow.shadowOffset = innerStroke.shadowOffset
            venmoHighlight3OpaqueShadow.shadowBlurRadius = innerStroke.shadowBlurRadius
            venmoHighlight3OpaqueShadow.set()

            context.setBlendMode(.sourceOut)
            context.beginTransparencyLayer(auxiliaryInfo: nil)

            venmoHighlight3OpaqueShadow.shadowColor!.setFill()
            venmoHighlight3Path.fill()

            context.endTransparencyLayer()
            context.endTransparencyLayer()
            NSGraphicsContext.restoreGraphicsState()



            context.endTransparencyLayer()

            NSGraphicsContext.restoreGraphicsState()
        }


        //// venmoLogo Drawing
        let venmoLogoPath = NSBezierPath()
        venmoLogoPath.move(to: NSPoint(x: bounds.minX + 69.49, y: bounds.maxY - 20.5))
        venmoLogoPath.curve(to: NSPoint(x: bounds.minX + 70.24, y: bounds.maxY - 23.32), controlPoint1: NSPoint(x: bounds.minX + 70.01, y: bounds.maxY - 21.35), controlPoint2: NSPoint(x: bounds.minX + 70.24, y: bounds.maxY - 22.22))
        venmoLogoPath.curve(to: NSPoint(x: bounds.minX + 64.8, y: bounds.maxY - 34.62), controlPoint1: NSPoint(x: bounds.minX + 70.24, y: bounds.maxY - 26.84), controlPoint2: NSPoint(x: bounds.minX + 67.23, y: bounds.maxY - 31.41))
        venmoLogoPath.line(to: NSPoint(x: bounds.minX + 59.23, y: bounds.maxY - 34.62))
        venmoLogoPath.line(to: NSPoint(x: bounds.minX + 57, y: bounds.maxY - 21.27))
        venmoLogoPath.line(to: NSPoint(x: bounds.minX + 61.87, y: bounds.maxY - 20.81))
        venmoLogoPath.line(to: NSPoint(x: bounds.minX + 63.05, y: bounds.maxY - 30.3))
        venmoLogoPath.curve(to: NSPoint(x: bounds.minX + 65.52, y: bounds.maxY - 23.76), controlPoint1: NSPoint(x: bounds.minX + 64.16, y: bounds.maxY - 28.51), controlPoint2: NSPoint(x: bounds.minX + 65.52, y: bounds.maxY - 25.69))
        venmoLogoPath.curve(to: NSPoint(x: bounds.minX + 65.05, y: bounds.maxY - 21.4), controlPoint1: NSPoint(x: bounds.minX + 65.52, y: bounds.maxY - 22.71), controlPoint2: NSPoint(x: bounds.minX + 65.34, y: bounds.maxY - 21.99))
        venmoLogoPath.line(to: NSPoint(x: bounds.minX + 69.49, y: bounds.maxY - 20.5))
        venmoLogoPath.close()
        venmoLogoPath.move(to: NSPoint(x: bounds.minX + 75.71, y: bounds.maxY - 28.92))
        venmoLogoPath.curve(to: NSPoint(x: bounds.minX + 77.73, y: bounds.maxY - 31.1), controlPoint1: NSPoint(x: bounds.minX + 75.71, y: bounds.maxY - 30.49), controlPoint2: NSPoint(x: bounds.minX + 76.58, y: bounds.maxY - 31.1))
        venmoLogoPath.curve(to: NSPoint(x: bounds.minX + 81.76, y: bounds.maxY - 30), controlPoint1: NSPoint(x: bounds.minX + 78.99, y: bounds.maxY - 31.1), controlPoint2: NSPoint(x: bounds.minX + 80.19, y: bounds.maxY - 30.79))
        venmoLogoPath.line(to: NSPoint(x: bounds.minX + 81.17, y: bounds.maxY - 34))
        venmoLogoPath.curve(to: NSPoint(x: bounds.minX + 76.68, y: bounds.maxY - 34.9), controlPoint1: NSPoint(x: bounds.minX + 80.07, y: bounds.maxY - 34.54), controlPoint2: NSPoint(x: bounds.minX + 78.35, y: bounds.maxY - 34.9))
        venmoLogoPath.curve(to: NSPoint(x: bounds.minX + 70.93, y: bounds.maxY - 29.12), controlPoint1: NSPoint(x: bounds.minX + 72.45, y: bounds.maxY - 34.9), controlPoint2: NSPoint(x: bounds.minX + 70.93, y: bounds.maxY - 32.33))
        venmoLogoPath.curve(to: NSPoint(x: bounds.minX + 78.48, y: bounds.maxY - 20.55), controlPoint1: NSPoint(x: bounds.minX + 70.93, y: bounds.maxY - 24.97), controlPoint2: NSPoint(x: bounds.minX + 73.4, y: bounds.maxY - 20.55))
        venmoLogoPath.curve(to: NSPoint(x: bounds.minX + 82.84, y: bounds.maxY - 24.3), controlPoint1: NSPoint(x: bounds.minX + 81.27, y: bounds.maxY - 20.55), controlPoint2: NSPoint(x: bounds.minX + 82.84, y: bounds.maxY - 22.12))
        venmoLogoPath.curve(to: NSPoint(x: bounds.minX + 75.71, y: bounds.maxY - 28.92), controlPoint1: NSPoint(x: bounds.minX + 82.84, y: bounds.maxY - 27.82), controlPoint2: NSPoint(x: bounds.minX + 78.32, y: bounds.maxY - 28.89))
        venmoLogoPath.close()
        venmoLogoPath.move(to: NSPoint(x: bounds.minX + 96.9, y: bounds.maxY - 23.63))
        venmoLogoPath.curve(to: NSPoint(x: bounds.minX + 96.74, y: bounds.maxY - 25.38), controlPoint1: NSPoint(x: bounds.minX + 96.9, y: bounds.maxY - 24.15), controlPoint2: NSPoint(x: bounds.minX + 96.82, y: bounds.maxY - 24.89))
        venmoLogoPath.line(to: NSPoint(x: bounds.minX + 95.28, y: bounds.maxY - 34.62))
        venmoLogoPath.line(to: NSPoint(x: bounds.minX + 90.54, y: bounds.maxY - 34.62))
        venmoLogoPath.line(to: NSPoint(x: bounds.minX + 91.87, y: bounds.maxY - 26.15))
        venmoLogoPath.curve(to: NSPoint(x: bounds.minX + 91.97, y: bounds.maxY - 25.2), controlPoint1: NSPoint(x: bounds.minX + 91.9, y: bounds.maxY - 25.92), controlPoint2: NSPoint(x: bounds.minX + 91.97, y: bounds.maxY - 25.45))
        venmoLogoPath.curve(to: NSPoint(x: bounds.minX + 91.13, y: bounds.maxY - 24.43), controlPoint1: NSPoint(x: bounds.minX + 91.97, y: bounds.maxY - 24.58), controlPoint2: NSPoint(x: bounds.minX + 91.59, y: bounds.maxY - 24.43))
        venmoLogoPath.curve(to: NSPoint(x: bounds.minX + 89.48, y: bounds.maxY - 24.92), controlPoint1: NSPoint(x: bounds.minX + 90.51, y: bounds.maxY - 24.43), controlPoint2: NSPoint(x: bounds.minX + 89.89, y: bounds.maxY - 24.71))
        venmoLogoPath.line(to: NSPoint(x: bounds.minX + 87.97, y: bounds.maxY - 34.62))
        venmoLogoPath.line(to: NSPoint(x: bounds.minX + 83.2, y: bounds.maxY - 34.62))
        venmoLogoPath.line(to: NSPoint(x: bounds.minX + 85.38, y: bounds.maxY - 20.78))
        venmoLogoPath.line(to: NSPoint(x: bounds.minX + 89.51, y: bounds.maxY - 20.78))
        venmoLogoPath.line(to: NSPoint(x: bounds.minX + 89.56, y: bounds.maxY - 21.89))
        venmoLogoPath.curve(to: NSPoint(x: bounds.minX + 93.64, y: bounds.maxY - 20.55), controlPoint1: NSPoint(x: bounds.minX + 90.54, y: bounds.maxY - 21.24), controlPoint2: NSPoint(x: bounds.minX + 91.82, y: bounds.maxY - 20.55))
        venmoLogoPath.curve(to: NSPoint(x: bounds.minX + 96.9, y: bounds.maxY - 23.63), controlPoint1: NSPoint(x: bounds.minX + 96.05, y: bounds.maxY - 20.55), controlPoint2: NSPoint(x: bounds.minX + 96.9, y: bounds.maxY - 21.78))
        venmoLogoPath.close()
        venmoLogoPath.move(to: NSPoint(x: bounds.minX + 110.99, y: bounds.maxY - 22.07))
        venmoLogoPath.curve(to: NSPoint(x: bounds.minX + 115.4, y: bounds.maxY - 20.55), controlPoint1: NSPoint(x: bounds.minX + 112.34, y: bounds.maxY - 21.09), controlPoint2: NSPoint(x: bounds.minX + 113.63, y: bounds.maxY - 20.55))
        venmoLogoPath.curve(to: NSPoint(x: bounds.minX + 118.68, y: bounds.maxY - 23.63), controlPoint1: NSPoint(x: bounds.minX + 117.83, y: bounds.maxY - 20.55), controlPoint2: NSPoint(x: bounds.minX + 118.68, y: bounds.maxY - 21.78))
        venmoLogoPath.curve(to: NSPoint(x: bounds.minX + 118.53, y: bounds.maxY - 25.38), controlPoint1: NSPoint(x: bounds.minX + 118.68, y: bounds.maxY - 24.15), controlPoint2: NSPoint(x: bounds.minX + 118.6, y: bounds.maxY - 24.89))
        venmoLogoPath.line(to: NSPoint(x: bounds.minX + 117.07, y: bounds.maxY - 34.62))
        venmoLogoPath.line(to: NSPoint(x: bounds.minX + 112.32, y: bounds.maxY - 34.62))
        venmoLogoPath.line(to: NSPoint(x: bounds.minX + 113.68, y: bounds.maxY - 25.97))
        venmoLogoPath.curve(to: NSPoint(x: bounds.minX + 113.76, y: bounds.maxY - 25.27), controlPoint1: NSPoint(x: bounds.minX + 113.7, y: bounds.maxY - 25.74), controlPoint2: NSPoint(x: bounds.minX + 113.76, y: bounds.maxY - 25.45))
        venmoLogoPath.curve(to: NSPoint(x: bounds.minX + 112.91, y: bounds.maxY - 24.43), controlPoint1: NSPoint(x: bounds.minX + 113.76, y: bounds.maxY - 24.58), controlPoint2: NSPoint(x: bounds.minX + 113.37, y: bounds.maxY - 24.43))
        venmoLogoPath.curve(to: NSPoint(x: bounds.minX + 111.29, y: bounds.maxY - 24.92), controlPoint1: NSPoint(x: bounds.minX + 112.32, y: bounds.maxY - 24.43), controlPoint2: NSPoint(x: bounds.minX + 111.73, y: bounds.maxY - 24.68))
        venmoLogoPath.line(to: NSPoint(x: bounds.minX + 109.78, y: bounds.maxY - 34.62))
        venmoLogoPath.line(to: NSPoint(x: bounds.minX + 105.03, y: bounds.maxY - 34.62))
        venmoLogoPath.line(to: NSPoint(x: bounds.minX + 106.39, y: bounds.maxY - 25.97))
        venmoLogoPath.curve(to: NSPoint(x: bounds.minX + 106.47, y: bounds.maxY - 25.28), controlPoint1: NSPoint(x: bounds.minX + 106.42, y: bounds.maxY - 25.74), controlPoint2: NSPoint(x: bounds.minX + 106.47, y: bounds.maxY - 25.45))
        venmoLogoPath.curve(to: NSPoint(x: bounds.minX + 105.62, y: bounds.maxY - 24.43), controlPoint1: NSPoint(x: bounds.minX + 106.47, y: bounds.maxY - 24.58), controlPoint2: NSPoint(x: bounds.minX + 106.08, y: bounds.maxY - 24.43))
        venmoLogoPath.curve(to: NSPoint(x: bounds.minX + 103.98, y: bounds.maxY - 24.92), controlPoint1: NSPoint(x: bounds.minX + 105.01, y: bounds.maxY - 24.43), controlPoint2: NSPoint(x: bounds.minX + 104.39, y: bounds.maxY - 24.71))
        venmoLogoPath.line(to: NSPoint(x: bounds.minX + 102.47, y: bounds.maxY - 34.62))
        venmoLogoPath.line(to: NSPoint(x: bounds.minX + 97.7, y: bounds.maxY - 34.62))
        venmoLogoPath.line(to: NSPoint(x: bounds.minX + 99.88, y: bounds.maxY - 20.78))
        venmoLogoPath.line(to: NSPoint(x: bounds.minX + 103.96, y: bounds.maxY - 20.78))
        venmoLogoPath.line(to: NSPoint(x: bounds.minX + 104.09, y: bounds.maxY - 21.94))
        venmoLogoPath.curve(to: NSPoint(x: bounds.minX + 108.04, y: bounds.maxY - 20.55), controlPoint1: NSPoint(x: bounds.minX + 105.03, y: bounds.maxY - 21.25), controlPoint2: NSPoint(x: bounds.minX + 106.32, y: bounds.maxY - 20.55))
        venmoLogoPath.curve(to: NSPoint(x: bounds.minX + 110.99, y: bounds.maxY - 22.07), controlPoint1: NSPoint(x: bounds.minX + 109.52, y: bounds.maxY - 20.55), controlPoint2: NSPoint(x: bounds.minX + 110.5, y: bounds.maxY - 21.19))
        venmoLogoPath.close()
        venmoLogoPath.move(to: NSPoint(x: bounds.minX + 119.92, y: bounds.maxY - 29))
        venmoLogoPath.curve(to: NSPoint(x: bounds.minX + 127.54, y: bounds.maxY - 20.55), controlPoint1: NSPoint(x: bounds.minX + 119.92, y: bounds.maxY - 24.63), controlPoint2: NSPoint(x: bounds.minX + 122.23, y: bounds.maxY - 20.55))
        venmoLogoPath.curve(to: NSPoint(x: bounds.minX + 133, y: bounds.maxY - 26.17), controlPoint1: NSPoint(x: bounds.minX + 131.54, y: bounds.maxY - 20.55), controlPoint2: NSPoint(x: bounds.minX + 133, y: bounds.maxY - 22.91))
        venmoLogoPath.curve(to: NSPoint(x: bounds.minX + 125.28, y: bounds.maxY - 34.95), controlPoint1: NSPoint(x: bounds.minX + 133, y: bounds.maxY - 30.49), controlPoint2: NSPoint(x: bounds.minX + 130.72, y: bounds.maxY - 34.95))
        venmoLogoPath.curve(to: NSPoint(x: bounds.minX + 119.92, y: bounds.maxY - 29), controlPoint1: NSPoint(x: bounds.minX + 121.25, y: bounds.maxY - 34.95), controlPoint2: NSPoint(x: bounds.minX + 119.92, y: bounds.maxY - 32.31))
        venmoLogoPath.close()
        venmoLogoPath.move(to: NSPoint(x: bounds.minX + 128.13, y: bounds.maxY - 26.1))
        venmoLogoPath.curve(to: NSPoint(x: bounds.minX + 127, y: bounds.maxY - 24.2), controlPoint1: NSPoint(x: bounds.minX + 128.13, y: bounds.maxY - 24.97), controlPoint2: NSPoint(x: bounds.minX + 127.84, y: bounds.maxY - 24.2))
        venmoLogoPath.curve(to: NSPoint(x: bounds.minX + 124.74, y: bounds.maxY - 29.2), controlPoint1: NSPoint(x: bounds.minX + 125.12, y: bounds.maxY - 24.2), controlPoint2: NSPoint(x: bounds.minX + 124.74, y: bounds.maxY - 27.51))
        venmoLogoPath.curve(to: NSPoint(x: bounds.minX + 125.94, y: bounds.maxY - 31.28), controlPoint1: NSPoint(x: bounds.minX + 124.74, y: bounds.maxY - 30.49), controlPoint2: NSPoint(x: bounds.minX + 125.1, y: bounds.maxY - 31.28))
        venmoLogoPath.curve(to: NSPoint(x: bounds.minX + 128.13, y: bounds.maxY - 26.1), controlPoint1: NSPoint(x: bounds.minX + 127.71, y: bounds.maxY - 31.28), controlPoint2: NSPoint(x: bounds.minX + 128.13, y: bounds.maxY - 27.79))
        venmoLogoPath.close()
        venmoLogoPath.move(to: NSPoint(x: bounds.minX + 75.81, y: bounds.maxY - 26.65))
        venmoLogoPath.curve(to: NSPoint(x: bounds.minX + 78.96, y: bounds.maxY - 24.78), controlPoint1: NSPoint(x: bounds.minX + 76.7, y: bounds.maxY - 26.65), controlPoint2: NSPoint(x: bounds.minX + 78.96, y: bounds.maxY - 26.2))
        venmoLogoPath.curve(to: NSPoint(x: bounds.minX + 78.01, y: bounds.maxY - 23.76), controlPoint1: NSPoint(x: bounds.minX + 78.96, y: bounds.maxY - 24.1), controlPoint2: NSPoint(x: bounds.minX + 78.53, y: bounds.maxY - 23.76))
        venmoLogoPath.curve(to: NSPoint(x: bounds.minX + 75.81, y: bounds.maxY - 26.65), controlPoint1: NSPoint(x: bounds.minX + 77.11, y: bounds.maxY - 23.76), controlPoint2: NSPoint(x: bounds.minX + 75.94, y: bounds.maxY - 24.95))
        venmoLogoPath.close()
        venmoLogoPath.windingRule = .evenOddWindingRule
        logoWhite.setFill()
        venmoLogoPath.fill()
    }

    public static func drawSimpleButton(bounds: NSRect = NSRect(x: 0, y: 0, width: 191, height: 56), original: Bool = true, hover: Bool = false, pressed: Bool = false) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext

        //// Color Declarations
        let highlightGradientColor = NSColor(deviceRed: 1, green: 1, blue: 1, alpha: 0.09)
        let highlightGradientColor2 = NSColor(deviceRed: 1, green: 1, blue: 1, alpha: 0)
        let shadow2Color = NSColor(deviceRed: 1, green: 1, blue: 1, alpha: 0.36)
        let simpleBackground = NSColor(deviceRed: 0, green: 0.58, blue: 1, alpha: 1)
        let fillColor2 = NSColor(deviceRed: 1, green: 1, blue: 1, alpha: 1)

        //// Gradient Declarations
        let highlightGradient = NSGradient(starting: highlightGradientColor, ending: highlightGradientColor2)!

        //// Shadow Declarations
        let outerShadow = NSShadow()
        outerShadow.shadowColor = NSColor.black
        outerShadow.shadowOffset = NSSize(width: 0, height: 0)
        outerShadow.shadowBlurRadius = 0.5
        let innerStroke = NSShadow()
        innerStroke.shadowColor = shadow2Color
        innerStroke.shadowOffset = NSSize(width: 0, height: 0)
        innerStroke.shadowBlurRadius = 0.5

        if (original) {
            //// simple
            NSGraphicsContext.saveGraphicsState()
            context.translateBy(x: bounds.minX + 95.5, y: bounds.maxY - 28)

            outerShadow.set()
            context.beginTransparencyLayer(auxiliaryInfo: nil)


            //// simpleBase Drawing
            let simpleBasePath = NSBezierPath(roundedRect: NSRect(x: -88.5, y: -21, width: 177, height: 42), xRadius: 5, yRadius: 5)
            simpleBackground.setFill()
            simpleBasePath.fill()


            //// simpleHighlight Drawing
            let simpleHighlightPath = NSBezierPath(roundedRect: NSRect(x: -88.5, y: -21, width: 177, height: 42), xRadius: 5, yRadius: 5)
            highlightGradient.draw(in: simpleHighlightPath, angle: -45)

            ////// simpleHighlight Inner Shadow
            NSGraphicsContext.saveGraphicsState()
            NSRectClip(simpleHighlightPath.bounds)
            context.setShadow(offset: NSSize.zero, blur: 0, color: nil)

            context.setAlpha(innerStroke.shadowColor!.alphaComponent)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            let simpleHighlightOpaqueShadow = NSShadow()
            simpleHighlightOpaqueShadow.shadowColor = innerStroke.shadowColor!.withAlphaComponent(1)
            simpleHighlightOpaqueShadow.shadowOffset = innerStroke.shadowOffset
            simpleHighlightOpaqueShadow.shadowBlurRadius = innerStroke.shadowBlurRadius
            simpleHighlightOpaqueShadow.set()

            context.setBlendMode(.sourceOut)
            context.beginTransparencyLayer(auxiliaryInfo: nil)

            simpleHighlightOpaqueShadow.shadowColor!.setFill()
            simpleHighlightPath.fill()

            context.endTransparencyLayer()
            context.endTransparencyLayer()
            NSGraphicsContext.restoreGraphicsState()



            context.endTransparencyLayer()

            NSGraphicsContext.restoreGraphicsState()
        }


        if (hover) {
            //// simpleHover
            NSGraphicsContext.saveGraphicsState()
            context.translateBy(x: bounds.minX + 95.5, y: bounds.maxY - 28)
            context.scaleBy(x: 1.05, y: 1.05)

            outerShadow.set()
            context.beginTransparencyLayer(auxiliaryInfo: nil)


            //// simpleBase 2 Drawing
            let simpleBase2Path = NSBezierPath(roundedRect: NSRect(x: -88.5, y: -21, width: 177, height: 42), xRadius: 5, yRadius: 5)
            simpleBackground.setFill()
            simpleBase2Path.fill()


            //// simpleHighlight 2 Drawing
            let simpleHighlight2Path = NSBezierPath(roundedRect: NSRect(x: -88.5, y: -21, width: 177, height: 42), xRadius: 5, yRadius: 5)
            highlightGradient.draw(in: simpleHighlight2Path, angle: -45)

            ////// simpleHighlight 2 Inner Shadow
            NSGraphicsContext.saveGraphicsState()
            NSRectClip(simpleHighlight2Path.bounds)
            context.setShadow(offset: NSSize.zero, blur: 0, color: nil)

            context.setAlpha(innerStroke.shadowColor!.alphaComponent)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            let simpleHighlight2OpaqueShadow = NSShadow()
            simpleHighlight2OpaqueShadow.shadowColor = innerStroke.shadowColor!.withAlphaComponent(1)
            simpleHighlight2OpaqueShadow.shadowOffset = innerStroke.shadowOffset
            simpleHighlight2OpaqueShadow.shadowBlurRadius = innerStroke.shadowBlurRadius
            simpleHighlight2OpaqueShadow.set()

            context.setBlendMode(.sourceOut)
            context.beginTransparencyLayer(auxiliaryInfo: nil)

            simpleHighlight2OpaqueShadow.shadowColor!.setFill()
            simpleHighlight2Path.fill()

            context.endTransparencyLayer()
            context.endTransparencyLayer()
            NSGraphicsContext.restoreGraphicsState()



            context.endTransparencyLayer()

            NSGraphicsContext.restoreGraphicsState()
        }


        if (pressed) {
            //// simplePressed
            NSGraphicsContext.saveGraphicsState()
            context.translateBy(x: bounds.minX + 95.5, y: bounds.maxY - 28)

            outerShadow.set()
            context.beginTransparencyLayer(auxiliaryInfo: nil)


            //// simpleBase 3 Drawing
            let simpleBase3Path = NSBezierPath(roundedRect: NSRect(x: -88.5, y: -21, width: 177, height: 42), xRadius: 5, yRadius: 5)
            simpleBackground.setFill()
            simpleBase3Path.fill()


            //// simpleHighlight 3 Drawing
            let simpleHighlight3Path = NSBezierPath(roundedRect: NSRect(x: -88.5, y: -21, width: 177, height: 42), xRadius: 5, yRadius: 5)
            highlightGradient.draw(in: simpleHighlight3Path, angle: -45)

            ////// simpleHighlight 3 Inner Shadow
            NSGraphicsContext.saveGraphicsState()
            NSRectClip(simpleHighlight3Path.bounds)
            context.setShadow(offset: NSSize.zero, blur: 0, color: nil)

            context.setAlpha(innerStroke.shadowColor!.alphaComponent)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            let simpleHighlight3OpaqueShadow = NSShadow()
            simpleHighlight3OpaqueShadow.shadowColor = innerStroke.shadowColor!.withAlphaComponent(1)
            simpleHighlight3OpaqueShadow.shadowOffset = innerStroke.shadowOffset
            simpleHighlight3OpaqueShadow.shadowBlurRadius = innerStroke.shadowBlurRadius
            simpleHighlight3OpaqueShadow.set()

            context.setBlendMode(.sourceOut)
            context.beginTransparencyLayer(auxiliaryInfo: nil)

            simpleHighlight3OpaqueShadow.shadowColor!.setFill()
            simpleHighlight3Path.fill()

            context.endTransparencyLayer()
            context.endTransparencyLayer()
            NSGraphicsContext.restoreGraphicsState()



            context.endTransparencyLayer()

            NSGraphicsContext.restoreGraphicsState()
        }


        //// simpleLogo
        //// simple 3 Drawing
        let simple3Path = NSBezierPath()
        simple3Path.move(to: NSPoint(x: bounds.minX + 84.98, y: bounds.maxY - 26.8))
        simple3Path.curve(to: NSPoint(x: bounds.minX + 88.23, y: bounds.maxY - 29.76), controlPoint1: NSPoint(x: bounds.minX + 87.12, y: bounds.maxY - 27.31), controlPoint2: NSPoint(x: bounds.minX + 88.23, y: bounds.maxY - 28.08))
        simple3Path.curve(to: NSPoint(x: bounds.minX + 84.64, y: bounds.maxY - 32.78), controlPoint1: NSPoint(x: bounds.minX + 88.23, y: bounds.maxY - 31.66), controlPoint2: NSPoint(x: bounds.minX + 86.75, y: bounds.maxY - 32.78))
        simple3Path.curve(to: NSPoint(x: bounds.minX + 80.62, y: bounds.maxY - 31.35), controlPoint1: NSPoint(x: bounds.minX + 83.17, y: bounds.maxY - 32.8), controlPoint2: NSPoint(x: bounds.minX + 81.75, y: bounds.maxY - 32.29))
        simple3Path.curve(to: NSPoint(x: bounds.minX + 80.53, y: bounds.maxY - 31.18), controlPoint1: NSPoint(x: bounds.minX + 80.57, y: bounds.maxY - 31.3), controlPoint2: NSPoint(x: bounds.minX + 80.54, y: bounds.maxY - 31.24))
        simple3Path.curve(to: NSPoint(x: bounds.minX + 80.59, y: bounds.maxY - 30.99), controlPoint1: NSPoint(x: bounds.minX + 80.53, y: bounds.maxY - 31.11), controlPoint2: NSPoint(x: bounds.minX + 80.55, y: bounds.maxY - 31.05))
        simple3Path.line(to: NSPoint(x: bounds.minX + 81.34, y: bounds.maxY - 30.11))
        simple3Path.curve(to: NSPoint(x: bounds.minX + 81.51, y: bounds.maxY - 30.02), controlPoint1: NSPoint(x: bounds.minX + 81.39, y: bounds.maxY - 30.06), controlPoint2: NSPoint(x: bounds.minX + 81.45, y: bounds.maxY - 30.03))
        simple3Path.curve(to: NSPoint(x: bounds.minX + 81.69, y: bounds.maxY - 30.08), controlPoint1: NSPoint(x: bounds.minX + 81.58, y: bounds.maxY - 30.02), controlPoint2: NSPoint(x: bounds.minX + 81.64, y: bounds.maxY - 30.04))
        simple3Path.curve(to: NSPoint(x: bounds.minX + 84.69, y: bounds.maxY - 31.23), controlPoint1: NSPoint(x: bounds.minX + 82.6, y: bounds.maxY - 30.81), controlPoint2: NSPoint(x: bounds.minX + 83.52, y: bounds.maxY - 31.23))
        simple3Path.curve(to: NSPoint(x: bounds.minX + 86.48, y: bounds.maxY - 29.95), controlPoint1: NSPoint(x: bounds.minX + 85.79, y: bounds.maxY - 31.23), controlPoint2: NSPoint(x: bounds.minX + 86.48, y: bounds.maxY - 30.73))
        simple3Path.curve(to: NSPoint(x: bounds.minX + 84.21, y: bounds.maxY - 28.39), controlPoint1: NSPoint(x: bounds.minX + 86.48, y: bounds.maxY - 29.21), controlPoint2: NSPoint(x: bounds.minX + 86.08, y: bounds.maxY - 28.83))
        simple3Path.curve(to: NSPoint(x: bounds.minX + 80.85, y: bounds.maxY - 25.37), controlPoint1: NSPoint(x: bounds.minX + 82.06, y: bounds.maxY - 27.88), controlPoint2: NSPoint(x: bounds.minX + 80.85, y: bounds.maxY - 27.24))
        simple3Path.curve(to: NSPoint(x: bounds.minX + 84.29, y: bounds.maxY - 22.43), controlPoint1: NSPoint(x: bounds.minX + 80.85, y: bounds.maxY - 23.62), controlPoint2: NSPoint(x: bounds.minX + 82.29, y: bounds.maxY - 22.43))
        simple3Path.curve(to: NSPoint(x: bounds.minX + 87.73, y: bounds.maxY - 23.54), controlPoint1: NSPoint(x: bounds.minX + 85.53, y: bounds.maxY - 22.41), controlPoint2: NSPoint(x: bounds.minX + 86.74, y: bounds.maxY - 22.8))
        simple3Path.curve(to: NSPoint(x: bounds.minX + 87.79, y: bounds.maxY - 23.88), controlPoint1: NSPoint(x: bounds.minX + 87.84, y: bounds.maxY - 23.62), controlPoint2: NSPoint(x: bounds.minX + 87.87, y: bounds.maxY - 23.77))
        simple3Path.line(to: NSPoint(x: bounds.minX + 87.12, y: bounds.maxY - 24.82))
        simple3Path.curve(to: NSPoint(x: bounds.minX + 86.96, y: bounds.maxY - 24.92), controlPoint1: NSPoint(x: bounds.minX + 87.08, y: bounds.maxY - 24.88), controlPoint2: NSPoint(x: bounds.minX + 87.03, y: bounds.maxY - 24.91))
        simple3Path.curve(to: NSPoint(x: bounds.minX + 86.77, y: bounds.maxY - 24.88), controlPoint1: NSPoint(x: bounds.minX + 86.89, y: bounds.maxY - 24.93), controlPoint2: NSPoint(x: bounds.minX + 86.83, y: bounds.maxY - 24.92))
        simple3Path.curve(to: NSPoint(x: bounds.minX + 84.23, y: bounds.maxY - 23.99), controlPoint1: NSPoint(x: bounds.minX + 86.04, y: bounds.maxY - 24.33), controlPoint2: NSPoint(x: bounds.minX + 85.15, y: bounds.maxY - 24.02))
        simple3Path.curve(to: NSPoint(x: bounds.minX + 82.59, y: bounds.maxY - 25.2), controlPoint1: NSPoint(x: bounds.minX + 83.2, y: bounds.maxY - 23.99), controlPoint2: NSPoint(x: bounds.minX + 82.59, y: bounds.maxY - 24.52))
        simple3Path.curve(to: NSPoint(x: bounds.minX + 84.98, y: bounds.maxY - 26.8), controlPoint1: NSPoint(x: bounds.minX + 82.6, y: bounds.maxY - 25.99), controlPoint2: NSPoint(x: bounds.minX + 83.06, y: bounds.maxY - 26.35))
        simple3Path.close()
        simple3Path.move(to: NSPoint(x: bounds.minX + 93.92, y: bounds.maxY - 22.81))
        simple3Path.line(to: NSPoint(x: bounds.minX + 93.92, y: bounds.maxY - 32.39))
        simple3Path.curve(to: NSPoint(x: bounds.minX + 93.67, y: bounds.maxY - 32.64), controlPoint1: NSPoint(x: bounds.minX + 93.92, y: bounds.maxY - 32.53), controlPoint2: NSPoint(x: bounds.minX + 93.81, y: bounds.maxY - 32.64))
        simple3Path.line(to: NSPoint(x: bounds.minX + 92.4, y: bounds.maxY - 32.64))
        simple3Path.curve(to: NSPoint(x: bounds.minX + 92.15, y: bounds.maxY - 32.39), controlPoint1: NSPoint(x: bounds.minX + 92.26, y: bounds.maxY - 32.64), controlPoint2: NSPoint(x: bounds.minX + 92.15, y: bounds.maxY - 32.53))
        simple3Path.line(to: NSPoint(x: bounds.minX + 92.15, y: bounds.maxY - 22.81))
        simple3Path.curve(to: NSPoint(x: bounds.minX + 92.4, y: bounds.maxY - 22.56), controlPoint1: NSPoint(x: bounds.minX + 92.15, y: bounds.maxY - 22.68), controlPoint2: NSPoint(x: bounds.minX + 92.26, y: bounds.maxY - 22.56))
        simple3Path.line(to: NSPoint(x: bounds.minX + 93.67, y: bounds.maxY - 22.56))
        simple3Path.curve(to: NSPoint(x: bounds.minX + 93.92, y: bounds.maxY - 22.81), controlPoint1: NSPoint(x: bounds.minX + 93.81, y: bounds.maxY - 22.56), controlPoint2: NSPoint(x: bounds.minX + 93.92, y: bounds.maxY - 22.68))
        simple3Path.close()
        simple3Path.move(to: NSPoint(x: bounds.minX + 102.65, y: bounds.maxY - 29.29))
        simple3Path.line(to: NSPoint(x: bounds.minX + 100.53, y: bounds.maxY - 26.13))
        simple3Path.curve(to: NSPoint(x: bounds.minX + 100.25, y: bounds.maxY - 26.03), controlPoint1: NSPoint(x: bounds.minX + 100.47, y: bounds.maxY - 26.04), controlPoint2: NSPoint(x: bounds.minX + 100.36, y: bounds.maxY - 26))
        simple3Path.curve(to: NSPoint(x: bounds.minX + 100.08, y: bounds.maxY - 26.27), controlPoint1: NSPoint(x: bounds.minX + 100.15, y: bounds.maxY - 26.06), controlPoint2: NSPoint(x: bounds.minX + 100.08, y: bounds.maxY - 26.16))
        simple3Path.line(to: NSPoint(x: bounds.minX + 100.08, y: bounds.maxY - 32.39))
        simple3Path.curve(to: NSPoint(x: bounds.minX + 99.83, y: bounds.maxY - 32.64), controlPoint1: NSPoint(x: bounds.minX + 100.08, y: bounds.maxY - 32.53), controlPoint2: NSPoint(x: bounds.minX + 99.97, y: bounds.maxY - 32.64))
        simple3Path.line(to: NSPoint(x: bounds.minX + 98.58, y: bounds.maxY - 32.64))
        simple3Path.curve(to: NSPoint(x: bounds.minX + 98.33, y: bounds.maxY - 32.39), controlPoint1: NSPoint(x: bounds.minX + 98.44, y: bounds.maxY - 32.64), controlPoint2: NSPoint(x: bounds.minX + 98.33, y: bounds.maxY - 32.53))
        simple3Path.line(to: NSPoint(x: bounds.minX + 98.33, y: bounds.maxY - 22.81))
        simple3Path.curve(to: NSPoint(x: bounds.minX + 98.58, y: bounds.maxY - 22.56), controlPoint1: NSPoint(x: bounds.minX + 98.33, y: bounds.maxY - 22.68), controlPoint2: NSPoint(x: bounds.minX + 98.44, y: bounds.maxY - 22.56))
        simple3Path.line(to: NSPoint(x: bounds.minX + 100.08, y: bounds.maxY - 22.56))
        simple3Path.curve(to: NSPoint(x: bounds.minX + 100.29, y: bounds.maxY - 22.68), controlPoint1: NSPoint(x: bounds.minX + 100.16, y: bounds.maxY - 22.57), controlPoint2: NSPoint(x: bounds.minX + 100.24, y: bounds.maxY - 22.61))
        simple3Path.line(to: NSPoint(x: bounds.minX + 103.07, y: bounds.maxY - 27))
        simple3Path.curve(to: NSPoint(x: bounds.minX + 103.28, y: bounds.maxY - 27.12), controlPoint1: NSPoint(x: bounds.minX + 103.12, y: bounds.maxY - 27.08), controlPoint2: NSPoint(x: bounds.minX + 103.2, y: bounds.maxY - 27.12))
        simple3Path.curve(to: NSPoint(x: bounds.minX + 103.49, y: bounds.maxY - 27), controlPoint1: NSPoint(x: bounds.minX + 103.36, y: bounds.maxY - 27.12), controlPoint2: NSPoint(x: bounds.minX + 103.44, y: bounds.maxY - 27.08))
        simple3Path.line(to: NSPoint(x: bounds.minX + 106.27, y: bounds.maxY - 22.68))
        simple3Path.curve(to: NSPoint(x: bounds.minX + 106.48, y: bounds.maxY - 22.56), controlPoint1: NSPoint(x: bounds.minX + 106.32, y: bounds.maxY - 22.61), controlPoint2: NSPoint(x: bounds.minX + 106.4, y: bounds.maxY - 22.57))
        simple3Path.line(to: NSPoint(x: bounds.minX + 107.98, y: bounds.maxY - 22.56))
        simple3Path.curve(to: NSPoint(x: bounds.minX + 108.23, y: bounds.maxY - 22.81), controlPoint1: NSPoint(x: bounds.minX + 108.12, y: bounds.maxY - 22.56), controlPoint2: NSPoint(x: bounds.minX + 108.23, y: bounds.maxY - 22.68))
        simple3Path.line(to: NSPoint(x: bounds.minX + 108.23, y: bounds.maxY - 32.39))
        simple3Path.curve(to: NSPoint(x: bounds.minX + 107.98, y: bounds.maxY - 32.64), controlPoint1: NSPoint(x: bounds.minX + 108.23, y: bounds.maxY - 32.53), controlPoint2: NSPoint(x: bounds.minX + 108.12, y: bounds.maxY - 32.64))
        simple3Path.line(to: NSPoint(x: bounds.minX + 106.71, y: bounds.maxY - 32.64))
        simple3Path.curve(to: NSPoint(x: bounds.minX + 106.46, y: bounds.maxY - 32.39), controlPoint1: NSPoint(x: bounds.minX + 106.57, y: bounds.maxY - 32.64), controlPoint2: NSPoint(x: bounds.minX + 106.46, y: bounds.maxY - 32.53))
        simple3Path.line(to: NSPoint(x: bounds.minX + 106.46, y: bounds.maxY - 26.24))
        simple3Path.curve(to: NSPoint(x: bounds.minX + 106.29, y: bounds.maxY - 26.01), controlPoint1: NSPoint(x: bounds.minX + 106.46, y: bounds.maxY - 26.13), controlPoint2: NSPoint(x: bounds.minX + 106.39, y: bounds.maxY - 26.04))
        simple3Path.curve(to: NSPoint(x: bounds.minX + 106.01, y: bounds.maxY - 26.1), controlPoint1: NSPoint(x: bounds.minX + 106.18, y: bounds.maxY - 25.97), controlPoint2: NSPoint(x: bounds.minX + 106.07, y: bounds.maxY - 26.01))
        simple3Path.line(to: NSPoint(x: bounds.minX + 103.87, y: bounds.maxY - 29.29))
        simple3Path.curve(to: NSPoint(x: bounds.minX + 103.66, y: bounds.maxY - 29.4), controlPoint1: NSPoint(x: bounds.minX + 103.83, y: bounds.maxY - 29.36), controlPoint2: NSPoint(x: bounds.minX + 103.75, y: bounds.maxY - 29.4))
        simple3Path.line(to: NSPoint(x: bounds.minX + 102.85, y: bounds.maxY - 29.4))
        simple3Path.curve(to: NSPoint(x: bounds.minX + 102.65, y: bounds.maxY - 29.29), controlPoint1: NSPoint(x: bounds.minX + 102.77, y: bounds.maxY - 29.4), controlPoint2: NSPoint(x: bounds.minX + 102.69, y: bounds.maxY - 29.36))
        simple3Path.close()
        simple3Path.move(to: NSPoint(x: bounds.minX + 116.33, y: bounds.maxY - 29.4))
        simple3Path.line(to: NSPoint(x: bounds.minX + 114.58, y: bounds.maxY - 29.4))
        simple3Path.curve(to: NSPoint(x: bounds.minX + 114.33, y: bounds.maxY - 29.65), controlPoint1: NSPoint(x: bounds.minX + 114.44, y: bounds.maxY - 29.4), controlPoint2: NSPoint(x: bounds.minX + 114.33, y: bounds.maxY - 29.51))
        simple3Path.line(to: NSPoint(x: bounds.minX + 114.33, y: bounds.maxY - 32.4))
        simple3Path.curve(to: NSPoint(x: bounds.minX + 114.08, y: bounds.maxY - 32.65), controlPoint1: NSPoint(x: bounds.minX + 114.33, y: bounds.maxY - 32.54), controlPoint2: NSPoint(x: bounds.minX + 114.22, y: bounds.maxY - 32.65))
        simple3Path.line(to: NSPoint(x: bounds.minX + 112.81, y: bounds.maxY - 32.65))
        simple3Path.curve(to: NSPoint(x: bounds.minX + 112.56, y: bounds.maxY - 32.4), controlPoint1: NSPoint(x: bounds.minX + 112.67, y: bounds.maxY - 32.65), controlPoint2: NSPoint(x: bounds.minX + 112.56, y: bounds.maxY - 32.54))
        simple3Path.line(to: NSPoint(x: bounds.minX + 112.56, y: bounds.maxY - 22.81))
        simple3Path.curve(to: NSPoint(x: bounds.minX + 112.81, y: bounds.maxY - 22.56), controlPoint1: NSPoint(x: bounds.minX + 112.56, y: bounds.maxY - 22.68), controlPoint2: NSPoint(x: bounds.minX + 112.67, y: bounds.maxY - 22.56))
        simple3Path.line(to: NSPoint(x: bounds.minX + 116.53, y: bounds.maxY - 22.56))
        simple3Path.curve(to: NSPoint(x: bounds.minX + 120.36, y: bounds.maxY - 25.95), controlPoint1: NSPoint(x: bounds.minX + 118.88, y: bounds.maxY - 22.56), controlPoint2: NSPoint(x: bounds.minX + 120.36, y: bounds.maxY - 23.89))
        simple3Path.curve(to: NSPoint(x: bounds.minX + 116.33, y: bounds.maxY - 29.4), controlPoint1: NSPoint(x: bounds.minX + 120.36, y: bounds.maxY - 28.22), controlPoint2: NSPoint(x: bounds.minX + 118.54, y: bounds.maxY - 29.4))
        simple3Path.close()
        simple3Path.move(to: NSPoint(x: bounds.minX + 116.38, y: bounds.maxY - 24.18))
        simple3Path.line(to: NSPoint(x: bounds.minX + 114.58, y: bounds.maxY - 24.18))
        simple3Path.curve(to: NSPoint(x: bounds.minX + 114.33, y: bounds.maxY - 24.43), controlPoint1: NSPoint(x: bounds.minX + 114.44, y: bounds.maxY - 24.18), controlPoint2: NSPoint(x: bounds.minX + 114.33, y: bounds.maxY - 24.29))
        simple3Path.line(to: NSPoint(x: bounds.minX + 114.33, y: bounds.maxY - 27.56))
        simple3Path.curve(to: NSPoint(x: bounds.minX + 114.58, y: bounds.maxY - 27.81), controlPoint1: NSPoint(x: bounds.minX + 114.33, y: bounds.maxY - 27.7), controlPoint2: NSPoint(x: bounds.minX + 114.44, y: bounds.maxY - 27.81))
        simple3Path.line(to: NSPoint(x: bounds.minX + 116.38, y: bounds.maxY - 27.81))
        simple3Path.curve(to: NSPoint(x: bounds.minX + 118.56, y: bounds.maxY - 25.99), controlPoint1: NSPoint(x: bounds.minX + 117.72, y: bounds.maxY - 27.81), controlPoint2: NSPoint(x: bounds.minX + 118.56, y: bounds.maxY - 27.07))
        simple3Path.curve(to: NSPoint(x: bounds.minX + 116.38, y: bounds.maxY - 24.18), controlPoint1: NSPoint(x: bounds.minX + 118.56, y: bounds.maxY - 24.8), controlPoint2: NSPoint(x: bounds.minX + 117.71, y: bounds.maxY - 24.18))
        simple3Path.close()
        simple3Path.move(to: NSPoint(x: bounds.minX + 123.72, y: bounds.maxY - 22.56))
        simple3Path.line(to: NSPoint(x: bounds.minX + 124.98, y: bounds.maxY - 22.56))
        simple3Path.curve(to: NSPoint(x: bounds.minX + 125.23, y: bounds.maxY - 22.81), controlPoint1: NSPoint(x: bounds.minX + 125.12, y: bounds.maxY - 22.56), controlPoint2: NSPoint(x: bounds.minX + 125.23, y: bounds.maxY - 22.68))
        simple3Path.line(to: NSPoint(x: bounds.minX + 125.23, y: bounds.maxY - 30.78))
        simple3Path.curve(to: NSPoint(x: bounds.minX + 125.48, y: bounds.maxY - 31.03), controlPoint1: NSPoint(x: bounds.minX + 125.23, y: bounds.maxY - 30.92), controlPoint2: NSPoint(x: bounds.minX + 125.35, y: bounds.maxY - 31.03))
        simple3Path.line(to: NSPoint(x: bounds.minX + 130.28, y: bounds.maxY - 31.03))
        simple3Path.curve(to: NSPoint(x: bounds.minX + 130.53, y: bounds.maxY - 31.28), controlPoint1: NSPoint(x: bounds.minX + 130.42, y: bounds.maxY - 31.03), controlPoint2: NSPoint(x: bounds.minX + 130.53, y: bounds.maxY - 31.14))
        simple3Path.line(to: NSPoint(x: bounds.minX + 130.53, y: bounds.maxY - 32.39))
        simple3Path.curve(to: NSPoint(x: bounds.minX + 130.28, y: bounds.maxY - 32.64), controlPoint1: NSPoint(x: bounds.minX + 130.53, y: bounds.maxY - 32.53), controlPoint2: NSPoint(x: bounds.minX + 130.42, y: bounds.maxY - 32.64))
        simple3Path.line(to: NSPoint(x: bounds.minX + 123.72, y: bounds.maxY - 32.64))
        simple3Path.curve(to: NSPoint(x: bounds.minX + 123.47, y: bounds.maxY - 32.39), controlPoint1: NSPoint(x: bounds.minX + 123.58, y: bounds.maxY - 32.64), controlPoint2: NSPoint(x: bounds.minX + 123.47, y: bounds.maxY - 32.53))
        simple3Path.line(to: NSPoint(x: bounds.minX + 123.47, y: bounds.maxY - 22.81))
        simple3Path.curve(to: NSPoint(x: bounds.minX + 123.72, y: bounds.maxY - 22.56), controlPoint1: NSPoint(x: bounds.minX + 123.47, y: bounds.maxY - 22.68), controlPoint2: NSPoint(x: bounds.minX + 123.58, y: bounds.maxY - 22.56))
        simple3Path.close()
        simple3Path.move(to: NSPoint(x: bounds.minX + 140.65, y: bounds.maxY - 24.15))
        simple3Path.line(to: NSPoint(x: bounds.minX + 135.37, y: bounds.maxY - 24.15))
        simple3Path.curve(to: NSPoint(x: bounds.minX + 135.12, y: bounds.maxY - 24.4), controlPoint1: NSPoint(x: bounds.minX + 135.23, y: bounds.maxY - 24.15), controlPoint2: NSPoint(x: bounds.minX + 135.12, y: bounds.maxY - 24.26))
        simple3Path.line(to: NSPoint(x: bounds.minX + 135.12, y: bounds.maxY - 26.52))
        simple3Path.curve(to: NSPoint(x: bounds.minX + 135.37, y: bounds.maxY - 26.77), controlPoint1: NSPoint(x: bounds.minX + 135.12, y: bounds.maxY - 26.66), controlPoint2: NSPoint(x: bounds.minX + 135.23, y: bounds.maxY - 26.77))
        simple3Path.line(to: NSPoint(x: bounds.minX + 140.46, y: bounds.maxY - 26.77))
        simple3Path.curve(to: NSPoint(x: bounds.minX + 140.71, y: bounds.maxY - 27.02), controlPoint1: NSPoint(x: bounds.minX + 140.6, y: bounds.maxY - 26.77), controlPoint2: NSPoint(x: bounds.minX + 140.71, y: bounds.maxY - 26.88))
        simple3Path.line(to: NSPoint(x: bounds.minX + 140.71, y: bounds.maxY - 28.1))
        simple3Path.curve(to: NSPoint(x: bounds.minX + 140.46, y: bounds.maxY - 28.35), controlPoint1: NSPoint(x: bounds.minX + 140.71, y: bounds.maxY - 28.24), controlPoint2: NSPoint(x: bounds.minX + 140.6, y: bounds.maxY - 28.35))
        simple3Path.line(to: NSPoint(x: bounds.minX + 135.37, y: bounds.maxY - 28.35))
        simple3Path.curve(to: NSPoint(x: bounds.minX + 135.12, y: bounds.maxY - 28.6), controlPoint1: NSPoint(x: bounds.minX + 135.23, y: bounds.maxY - 28.35), controlPoint2: NSPoint(x: bounds.minX + 135.12, y: bounds.maxY - 28.46))
        simple3Path.line(to: NSPoint(x: bounds.minX + 135.12, y: bounds.maxY - 30.8))
        simple3Path.curve(to: NSPoint(x: bounds.minX + 135.37, y: bounds.maxY - 31.05), controlPoint1: NSPoint(x: bounds.minX + 135.12, y: bounds.maxY - 30.94), controlPoint2: NSPoint(x: bounds.minX + 135.23, y: bounds.maxY - 31.05))
        simple3Path.line(to: NSPoint(x: bounds.minX + 140.65, y: bounds.maxY - 31.05))
        simple3Path.curve(to: NSPoint(x: bounds.minX + 140.9, y: bounds.maxY - 31.3), controlPoint1: NSPoint(x: bounds.minX + 140.79, y: bounds.maxY - 31.05), controlPoint2: NSPoint(x: bounds.minX + 140.9, y: bounds.maxY - 31.16))
        simple3Path.line(to: NSPoint(x: bounds.minX + 140.9, y: bounds.maxY - 32.39))
        simple3Path.curve(to: NSPoint(x: bounds.minX + 140.65, y: bounds.maxY - 32.64), controlPoint1: NSPoint(x: bounds.minX + 140.9, y: bounds.maxY - 32.53), controlPoint2: NSPoint(x: bounds.minX + 140.79, y: bounds.maxY - 32.64))
        simple3Path.line(to: NSPoint(x: bounds.minX + 133.6, y: bounds.maxY - 32.64))
        simple3Path.curve(to: NSPoint(x: bounds.minX + 133.35, y: bounds.maxY - 32.39), controlPoint1: NSPoint(x: bounds.minX + 133.46, y: bounds.maxY - 32.64), controlPoint2: NSPoint(x: bounds.minX + 133.35, y: bounds.maxY - 32.53))
        simple3Path.line(to: NSPoint(x: bounds.minX + 133.35, y: bounds.maxY - 22.81))
        simple3Path.curve(to: NSPoint(x: bounds.minX + 133.6, y: bounds.maxY - 22.56), controlPoint1: NSPoint(x: bounds.minX + 133.35, y: bounds.maxY - 22.68), controlPoint2: NSPoint(x: bounds.minX + 133.46, y: bounds.maxY - 22.56))
        simple3Path.line(to: NSPoint(x: bounds.minX + 140.65, y: bounds.maxY - 22.56))
        simple3Path.curve(to: NSPoint(x: bounds.minX + 140.9, y: bounds.maxY - 22.81), controlPoint1: NSPoint(x: bounds.minX + 140.79, y: bounds.maxY - 22.56), controlPoint2: NSPoint(x: bounds.minX + 140.9, y: bounds.maxY - 22.68))
        simple3Path.line(to: NSPoint(x: bounds.minX + 140.9, y: bounds.maxY - 23.9))
        simple3Path.curve(to: NSPoint(x: bounds.minX + 140.65, y: bounds.maxY - 24.15), controlPoint1: NSPoint(x: bounds.minX + 140.9, y: bounds.maxY - 24.04), controlPoint2: NSPoint(x: bounds.minX + 140.79, y: bounds.maxY - 24.15))
        simple3Path.close()
        simple3Path.windingRule = .evenOddWindingRule
        fillColor2.setFill()
        simple3Path.fill()


        //// shape 2 Drawing
        let shape2Path = NSBezierPath()
        shape2Path.move(to: NSPoint(x: bounds.minX + 70.97, y: bounds.maxY - 24.18))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 68.07, y: bounds.maxY - 20.08), controlPoint1: NSPoint(x: bounds.minX + 70.5, y: bounds.maxY - 22.53), controlPoint2: NSPoint(x: bounds.minX + 69.47, y: bounds.maxY - 21.08))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 66.92, y: bounds.maxY - 19.41), controlPoint1: NSPoint(x: bounds.minX + 67.71, y: bounds.maxY - 19.82), controlPoint2: NSPoint(x: bounds.minX + 67.32, y: bounds.maxY - 19.6))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 66.77, y: bounds.maxY - 19.25), controlPoint1: NSPoint(x: bounds.minX + 66.85, y: bounds.maxY - 19.38), controlPoint2: NSPoint(x: bounds.minX + 66.8, y: bounds.maxY - 19.32))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 66.07, y: bounds.maxY - 18.12), controlPoint1: NSPoint(x: bounds.minX + 66.56, y: bounds.maxY - 18.86), controlPoint2: NSPoint(x: bounds.minX + 66.33, y: bounds.maxY - 18.48))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 61.92, y: bounds.maxY - 15.28), controlPoint1: NSPoint(x: bounds.minX + 65.05, y: bounds.maxY - 16.73), controlPoint2: NSPoint(x: bounds.minX + 63.59, y: bounds.maxY - 15.73))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 60.06, y: bounds.maxY - 15.05), controlPoint1: NSPoint(x: bounds.minX + 61.32, y: bounds.maxY - 15.12), controlPoint2: NSPoint(x: bounds.minX + 60.69, y: bounds.maxY - 15.04))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 56.92, y: bounds.maxY - 15.74), controlPoint1: NSPoint(x: bounds.minX + 58.98, y: bounds.maxY - 15.06), controlPoint2: NSPoint(x: bounds.minX + 57.91, y: bounds.maxY - 15.3))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 55.75, y: bounds.maxY - 16.41), controlPoint1: NSPoint(x: bounds.minX + 56.51, y: bounds.maxY - 15.93), controlPoint2: NSPoint(x: bounds.minX + 56.12, y: bounds.maxY - 16.16))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 55.57, y: bounds.maxY - 16.46), controlPoint1: NSPoint(x: bounds.minX + 55.7, y: bounds.maxY - 16.45), controlPoint2: NSPoint(x: bounds.minX + 55.64, y: bounds.maxY - 16.46))
        shape2Path.line(to: NSPoint(x: bounds.minX + 55.57, y: bounds.maxY - 16.46))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 55, y: bounds.maxY - 16.44), controlPoint1: NSPoint(x: bounds.minX + 55.38, y: bounds.maxY - 16.45), controlPoint2: NSPoint(x: bounds.minX + 55.18, y: bounds.maxY - 16.44))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 54.23, y: bounds.maxY - 16.49), controlPoint1: NSPoint(x: bounds.minX + 54.74, y: bounds.maxY - 16.45), controlPoint2: NSPoint(x: bounds.minX + 54.49, y: bounds.maxY - 16.46))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 51.76, y: bounds.maxY - 17.2), controlPoint1: NSPoint(x: bounds.minX + 53.37, y: bounds.maxY - 16.59), controlPoint2: NSPoint(x: bounds.minX + 52.54, y: bounds.maxY - 16.82))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 49.7, y: bounds.maxY - 18.66), controlPoint1: NSPoint(x: bounds.minX + 50.99, y: bounds.maxY - 17.56), controlPoint2: NSPoint(x: bounds.minX + 50.3, y: bounds.maxY - 18.06))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 47.59, y: bounds.maxY - 24.56), controlPoint1: NSPoint(x: bounds.minX + 48.18, y: bounds.maxY - 20.23), controlPoint2: NSPoint(x: bounds.minX + 47.41, y: bounds.maxY - 22.38))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 47.53, y: bounds.maxY - 24.77), controlPoint1: NSPoint(x: bounds.minX + 47.59, y: bounds.maxY - 24.63), controlPoint2: NSPoint(x: bounds.minX + 47.57, y: bounds.maxY - 24.71))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 46.89, y: bounds.maxY - 25.93), controlPoint1: NSPoint(x: bounds.minX + 47.29, y: bounds.maxY - 25.14), controlPoint2: NSPoint(x: bounds.minX + 47.07, y: bounds.maxY - 25.53))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 49.41, y: bounds.maxY - 35.04), controlPoint1: NSPoint(x: bounds.minX + 45.43, y: bounds.maxY - 29.18), controlPoint2: NSPoint(x: bounds.minX + 46.49, y: bounds.maxY - 33.01))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 50.56, y: bounds.maxY - 35.72), controlPoint1: NSPoint(x: bounds.minX + 49.77, y: bounds.maxY - 35.3), controlPoint2: NSPoint(x: bounds.minX + 50.16, y: bounds.maxY - 35.53))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 50.72, y: bounds.maxY - 35.87), controlPoint1: NSPoint(x: bounds.minX + 50.63, y: bounds.maxY - 35.75), controlPoint2: NSPoint(x: bounds.minX + 50.68, y: bounds.maxY - 35.81))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 51.41, y: bounds.maxY - 37.01), controlPoint1: NSPoint(x: bounds.minX + 50.91, y: bounds.maxY - 36.27), controlPoint2: NSPoint(x: bounds.minX + 51.14, y: bounds.maxY - 36.65))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 53.25, y: bounds.maxY - 38.79), controlPoint1: NSPoint(x: bounds.minX + 51.91, y: bounds.maxY - 37.7), controlPoint2: NSPoint(x: bounds.minX + 52.54, y: bounds.maxY - 38.3))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 55.55, y: bounds.maxY - 39.85), controlPoint1: NSPoint(x: bounds.minX + 53.95, y: bounds.maxY - 39.27), controlPoint2: NSPoint(x: bounds.minX + 54.73, y: bounds.maxY - 39.63))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 57.42, y: bounds.maxY - 40.08), controlPoint1: NSPoint(x: bounds.minX + 56.16, y: bounds.maxY - 40.01), controlPoint2: NSPoint(x: bounds.minX + 56.79, y: bounds.maxY - 40.08))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 60.55, y: bounds.maxY - 39.38), controlPoint1: NSPoint(x: bounds.minX + 58.5, y: bounds.maxY - 40.07), controlPoint2: NSPoint(x: bounds.minX + 59.57, y: bounds.maxY - 39.83))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 61.73, y: bounds.maxY - 38.71), controlPoint1: NSPoint(x: bounds.minX + 60.96, y: bounds.maxY - 39.19), controlPoint2: NSPoint(x: bounds.minX + 61.36, y: bounds.maxY - 38.97))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 61.91, y: bounds.maxY - 38.66), controlPoint1: NSPoint(x: bounds.minX + 61.78, y: bounds.maxY - 38.68), controlPoint2: NSPoint(x: bounds.minX + 61.84, y: bounds.maxY - 38.66))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 62.49, y: bounds.maxY - 38.68), controlPoint1: NSPoint(x: bounds.minX + 62.08, y: bounds.maxY - 38.66), controlPoint2: NSPoint(x: bounds.minX + 62.27, y: bounds.maxY - 38.68))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 69.89, y: bounds.maxY - 31.9), controlPoint1: NSPoint(x: bounds.minX + 66.34, y: bounds.maxY - 38.68), controlPoint2: NSPoint(x: bounds.minX + 69.55, y: bounds.maxY - 35.74))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 69.89, y: bounds.maxY - 30.57), controlPoint1: NSPoint(x: bounds.minX + 69.92, y: bounds.maxY - 31.46), controlPoint2: NSPoint(x: bounds.minX + 69.92, y: bounds.maxY - 31.01))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 69.94, y: bounds.maxY - 30.36), controlPoint1: NSPoint(x: bounds.minX + 69.88, y: bounds.maxY - 30.49), controlPoint2: NSPoint(x: bounds.minX + 69.9, y: bounds.maxY - 30.42))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 70.58, y: bounds.maxY - 29.19), controlPoint1: NSPoint(x: bounds.minX + 70.19, y: bounds.maxY - 29.99), controlPoint2: NSPoint(x: bounds.minX + 70.4, y: bounds.maxY - 29.6))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 71.23, y: bounds.maxY - 26.05), controlPoint1: NSPoint(x: bounds.minX + 71.02, y: bounds.maxY - 28.2), controlPoint2: NSPoint(x: bounds.minX + 71.24, y: bounds.maxY - 27.13))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 70.97, y: bounds.maxY - 24.18), controlPoint1: NSPoint(x: bounds.minX + 71.23, y: bounds.maxY - 25.42), controlPoint2: NSPoint(x: bounds.minX + 71.14, y: bounds.maxY - 24.79))
        shape2Path.line(to: NSPoint(x: bounds.minX + 70.97, y: bounds.maxY - 24.18))
        shape2Path.close()
        shape2Path.move(to: NSPoint(x: bounds.minX + 58.16, y: bounds.maxY - 16.47))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 60.06, y: bounds.maxY - 16.17), controlPoint1: NSPoint(x: bounds.minX + 58.78, y: bounds.maxY - 16.28), controlPoint2: NSPoint(x: bounds.minX + 59.42, y: bounds.maxY - 16.18))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 61.64, y: bounds.maxY - 16.36), controlPoint1: NSPoint(x: bounds.minX + 60.59, y: bounds.maxY - 16.17), controlPoint2: NSPoint(x: bounds.minX + 61.13, y: bounds.maxY - 16.23))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 64.64, y: bounds.maxY - 18.15), controlPoint1: NSPoint(x: bounds.minX + 62.79, y: bounds.maxY - 16.67), controlPoint2: NSPoint(x: bounds.minX + 63.83, y: bounds.maxY - 17.29))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 64.7, y: bounds.maxY - 18.47), controlPoint1: NSPoint(x: bounds.minX + 64.73, y: bounds.maxY - 18.24), controlPoint2: NSPoint(x: bounds.minX + 64.75, y: bounds.maxY - 18.36))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 64.44, y: bounds.maxY - 18.65), controlPoint1: NSPoint(x: bounds.minX + 64.66, y: bounds.maxY - 18.58), controlPoint2: NSPoint(x: bounds.minX + 64.55, y: bounds.maxY - 18.65))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 64.39, y: bounds.maxY - 18.65), controlPoint1: NSPoint(x: bounds.minX + 64.42, y: bounds.maxY - 18.65), controlPoint2: NSPoint(x: bounds.minX + 64.4, y: bounds.maxY - 18.65))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 63.55, y: bounds.maxY - 18.57), controlPoint1: NSPoint(x: bounds.minX + 64.11, y: bounds.maxY - 18.61), controlPoint2: NSPoint(x: bounds.minX + 63.83, y: bounds.maxY - 18.58))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 62.98, y: bounds.maxY - 18.57), controlPoint1: NSPoint(x: bounds.minX + 63.38, y: bounds.maxY - 18.57), controlPoint2: NSPoint(x: bounds.minX + 63.19, y: bounds.maxY - 18.55))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 61.16, y: bounds.maxY - 18.74), controlPoint1: NSPoint(x: bounds.minX + 62.36, y: bounds.maxY - 18.58), controlPoint2: NSPoint(x: bounds.minX + 61.76, y: bounds.maxY - 18.63))
        shape2Path.line(to: NSPoint(x: bounds.minX + 61.12, y: bounds.maxY - 18.74))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 60.93, y: bounds.maxY - 18.67), controlPoint1: NSPoint(x: bounds.minX + 61.05, y: bounds.maxY - 18.74), controlPoint2: NSPoint(x: bounds.minX + 60.98, y: bounds.maxY - 18.72))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 58.91, y: bounds.maxY - 17.35), controlPoint1: NSPoint(x: bounds.minX + 60.31, y: bounds.maxY - 18.16), controlPoint2: NSPoint(x: bounds.minX + 59.63, y: bounds.maxY - 17.71))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 58.14, y: bounds.maxY - 17.01), controlPoint1: NSPoint(x: bounds.minX + 58.66, y: bounds.maxY - 17.22), controlPoint2: NSPoint(x: bounds.minX + 58.4, y: bounds.maxY - 17.11))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 57.96, y: bounds.maxY - 16.73), controlPoint1: NSPoint(x: bounds.minX + 58.03, y: bounds.maxY - 16.97), controlPoint2: NSPoint(x: bounds.minX + 57.95, y: bounds.maxY - 16.85))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 58.16, y: bounds.maxY - 16.47), controlPoint1: NSPoint(x: bounds.minX + 57.96, y: bounds.maxY - 16.61), controlPoint2: NSPoint(x: bounds.minX + 58.04, y: bounds.maxY - 16.5))
        shape2Path.line(to: NSPoint(x: bounds.minX + 58.16, y: bounds.maxY - 16.47))
        shape2Path.close()
        shape2Path.move(to: NSPoint(x: bounds.minX + 54.29, y: bounds.maxY - 19.5))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 55.89, y: bounds.maxY - 17.71), controlPoint1: NSPoint(x: bounds.minX + 54.73, y: bounds.maxY - 18.83), controlPoint2: NSPoint(x: bounds.minX + 55.27, y: bounds.maxY - 18.22))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 56.08, y: bounds.maxY - 17.64), controlPoint1: NSPoint(x: bounds.minX + 55.94, y: bounds.maxY - 17.67), controlPoint2: NSPoint(x: bounds.minX + 56.01, y: bounds.maxY - 17.64))
        shape2Path.line(to: NSPoint(x: bounds.minX + 56.12, y: bounds.maxY - 17.64))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 58.41, y: bounds.maxY - 18.36), controlPoint1: NSPoint(x: bounds.minX + 56.92, y: bounds.maxY - 17.76), controlPoint2: NSPoint(x: bounds.minX + 57.69, y: bounds.maxY - 18.01))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 59.09, y: bounds.maxY - 18.72), controlPoint1: NSPoint(x: bounds.minX + 58.62, y: bounds.maxY - 18.46), controlPoint2: NSPoint(x: bounds.minX + 58.84, y: bounds.maxY - 18.58))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 59.22, y: bounds.maxY - 19.01), controlPoint1: NSPoint(x: bounds.minX + 59.18, y: bounds.maxY - 18.79), controlPoint2: NSPoint(x: bounds.minX + 59.24, y: bounds.maxY - 18.9))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 59.02, y: bounds.maxY - 19.26), controlPoint1: NSPoint(x: bounds.minX + 59.21, y: bounds.maxY - 19.13), controlPoint2: NSPoint(x: bounds.minX + 59.13, y: bounds.maxY - 19.23))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 58.18, y: bounds.maxY - 19.53), controlPoint1: NSPoint(x: bounds.minX + 58.73, y: bounds.maxY - 19.35), controlPoint2: NSPoint(x: bounds.minX + 58.45, y: bounds.maxY - 19.44))
        shape2Path.line(to: NSPoint(x: bounds.minX + 58.07, y: bounds.maxY - 19.57))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 56.65, y: bounds.maxY - 20.01), controlPoint1: NSPoint(x: bounds.minX + 57.49, y: bounds.maxY - 19.76), controlPoint2: NSPoint(x: bounds.minX + 57.07, y: bounds.maxY - 19.89))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 55.37, y: bounds.maxY - 20.32), controlPoint1: NSPoint(x: bounds.minX + 56.23, y: bounds.maxY - 20.13), controlPoint2: NSPoint(x: bounds.minX + 55.81, y: bounds.maxY - 20.22))
        shape2Path.line(to: NSPoint(x: bounds.minX + 55.21, y: bounds.maxY - 20.35))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 54.23, y: bounds.maxY - 20.57), controlPoint1: NSPoint(x: bounds.minX + 54.89, y: bounds.maxY - 20.42), controlPoint2: NSPoint(x: bounds.minX + 54.57, y: bounds.maxY - 20.49))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 54.17, y: bounds.maxY - 20.57), controlPoint1: NSPoint(x: bounds.minX + 54.21, y: bounds.maxY - 20.58), controlPoint2: NSPoint(x: bounds.minX + 54.19, y: bounds.maxY - 20.58))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 53.92, y: bounds.maxY - 20.43), controlPoint1: NSPoint(x: bounds.minX + 54.06, y: bounds.maxY - 20.57), controlPoint2: NSPoint(x: bounds.minX + 53.97, y: bounds.maxY - 20.52))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 53.92, y: bounds.maxY - 20.14), controlPoint1: NSPoint(x: bounds.minX + 53.87, y: bounds.maxY - 20.34), controlPoint2: NSPoint(x: bounds.minX + 53.87, y: bounds.maxY - 20.23))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 54.29, y: bounds.maxY - 19.5), controlPoint1: NSPoint(x: bounds.minX + 54.02, y: bounds.maxY - 19.94), controlPoint2: NSPoint(x: bounds.minX + 54.15, y: bounds.maxY - 19.71))
        shape2Path.line(to: NSPoint(x: bounds.minX + 54.29, y: bounds.maxY - 19.5))
        shape2Path.close()
        shape2Path.move(to: NSPoint(x: bounds.minX + 49.93, y: bounds.maxY - 30.14))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 49.81, y: bounds.maxY - 32.52), controlPoint1: NSPoint(x: bounds.minX + 49.8, y: bounds.maxY - 30.93), controlPoint2: NSPoint(x: bounds.minX + 49.76, y: bounds.maxY - 31.72))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 49.91, y: bounds.maxY - 33.35), controlPoint1: NSPoint(x: bounds.minX + 49.83, y: bounds.maxY - 32.77), controlPoint2: NSPoint(x: bounds.minX + 49.86, y: bounds.maxY - 33.05))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 49.84, y: bounds.maxY - 33.6), controlPoint1: NSPoint(x: bounds.minX + 49.93, y: bounds.maxY - 33.44), controlPoint2: NSPoint(x: bounds.minX + 49.9, y: bounds.maxY - 33.53))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 49.62, y: bounds.maxY - 33.7), controlPoint1: NSPoint(x: bounds.minX + 49.79, y: bounds.maxY - 33.66), controlPoint2: NSPoint(x: bounds.minX + 49.71, y: bounds.maxY - 33.7))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 49.42, y: bounds.maxY - 33.62), controlPoint1: NSPoint(x: bounds.minX + 49.55, y: bounds.maxY - 33.7), controlPoint2: NSPoint(x: bounds.minX + 49.48, y: bounds.maxY - 33.67))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 47.63, y: bounds.maxY - 27.16), controlPoint1: NSPoint(x: bounds.minX + 47.62, y: bounds.maxY - 32), controlPoint2: NSPoint(x: bounds.minX + 46.92, y: bounds.maxY - 29.48))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 47.9, y: bounds.maxY - 26.95), controlPoint1: NSPoint(x: bounds.minX + 47.67, y: bounds.maxY - 27.04), controlPoint2: NSPoint(x: bounds.minX + 47.78, y: bounds.maxY - 26.95))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 48.19, y: bounds.maxY - 27.13), controlPoint1: NSPoint(x: bounds.minX + 48.03, y: bounds.maxY - 26.94), controlPoint2: NSPoint(x: bounds.minX + 48.14, y: bounds.maxY - 27.01))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 48.53, y: bounds.maxY - 27.89), controlPoint1: NSPoint(x: bounds.minX + 48.29, y: bounds.maxY - 27.38), controlPoint2: NSPoint(x: bounds.minX + 48.41, y: bounds.maxY - 27.65))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 49.85, y: bounds.maxY - 29.87), controlPoint1: NSPoint(x: bounds.minX + 48.9, y: bounds.maxY - 28.6), controlPoint2: NSPoint(x: bounds.minX + 49.34, y: bounds.maxY - 29.27))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 49.93, y: bounds.maxY - 30.14), controlPoint1: NSPoint(x: bounds.minX + 49.92, y: bounds.maxY - 29.95), controlPoint2: NSPoint(x: bounds.minX + 49.94, y: bounds.maxY - 30.05))
        shape2Path.line(to: NSPoint(x: bounds.minX + 49.93, y: bounds.maxY - 30.14))
        shape2Path.close()
        shape2Path.move(to: NSPoint(x: bounds.minX + 50.73, y: bounds.maxY - 27.02))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 50.44, y: bounds.maxY - 27.97), controlPoint1: NSPoint(x: bounds.minX + 50.64, y: bounds.maxY - 27.33), controlPoint2: NSPoint(x: bounds.minX + 50.54, y: bounds.maxY - 27.64))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 50.16, y: bounds.maxY - 28.19), controlPoint1: NSPoint(x: bounds.minX + 50.41, y: bounds.maxY - 28.1), controlPoint2: NSPoint(x: bounds.minX + 50.29, y: bounds.maxY - 28.19))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 49.91, y: bounds.maxY - 28.05), controlPoint1: NSPoint(x: bounds.minX + 50.06, y: bounds.maxY - 28.19), controlPoint2: NSPoint(x: bounds.minX + 49.97, y: bounds.maxY - 28.14))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 49.53, y: bounds.maxY - 27.39), controlPoint1: NSPoint(x: bounds.minX + 49.78, y: bounds.maxY - 27.84), controlPoint2: NSPoint(x: bounds.minX + 49.65, y: bounds.maxY - 27.62))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 48.77, y: bounds.maxY - 25.03), controlPoint1: NSPoint(x: bounds.minX + 49.16, y: bounds.maxY - 26.65), controlPoint2: NSPoint(x: bounds.minX + 48.9, y: bounds.maxY - 25.85))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 48.71, y: bounds.maxY - 23.33), controlPoint1: NSPoint(x: bounds.minX + 48.68, y: bounds.maxY - 24.47), controlPoint2: NSPoint(x: bounds.minX + 48.66, y: bounds.maxY - 23.9))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 48.75, y: bounds.maxY - 23), controlPoint1: NSPoint(x: bounds.minX + 48.71, y: bounds.maxY - 23.22), controlPoint2: NSPoint(x: bounds.minX + 48.73, y: bounds.maxY - 23.11))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 53.54, y: bounds.maxY - 17.75), controlPoint1: NSPoint(x: bounds.minX + 49.09, y: bounds.maxY - 20.43), controlPoint2: NSPoint(x: bounds.minX + 51, y: bounds.maxY - 18.33))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 53.61, y: bounds.maxY - 17.75), controlPoint1: NSPoint(x: bounds.minX + 53.56, y: bounds.maxY - 17.75), controlPoint2: NSPoint(x: bounds.minX + 53.59, y: bounds.maxY - 17.75))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 53.86, y: bounds.maxY - 17.92), controlPoint1: NSPoint(x: bounds.minX + 53.72, y: bounds.maxY - 17.76), controlPoint2: NSPoint(x: bounds.minX + 53.81, y: bounds.maxY - 17.82))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 53.83, y: bounds.maxY - 18.23), controlPoint1: NSPoint(x: bounds.minX + 53.91, y: bounds.maxY - 18.02), controlPoint2: NSPoint(x: bounds.minX + 53.9, y: bounds.maxY - 18.14))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 53.33, y: bounds.maxY - 18.91), controlPoint1: NSPoint(x: bounds.minX + 53.66, y: bounds.maxY - 18.44), controlPoint2: NSPoint(x: bounds.minX + 53.5, y: bounds.maxY - 18.67))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 52.24, y: bounds.maxY - 21.13), controlPoint1: NSPoint(x: bounds.minX + 52.88, y: bounds.maxY - 19.6), controlPoint2: NSPoint(x: bounds.minX + 52.51, y: bounds.maxY - 20.35))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 52.17, y: bounds.maxY - 21.21), controlPoint1: NSPoint(x: bounds.minX + 52.23, y: bounds.maxY - 21.17), controlPoint2: NSPoint(x: bounds.minX + 52.2, y: bounds.maxY - 21.19))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 50.15, y: bounds.maxY - 22.21), controlPoint1: NSPoint(x: bounds.minX + 51.46, y: bounds.maxY - 21.47), controlPoint2: NSPoint(x: bounds.minX + 50.79, y: bounds.maxY - 21.8))
        shape2Path.line(to: NSPoint(x: bounds.minX + 50.06, y: bounds.maxY - 22.27))
        shape2Path.line(to: NSPoint(x: bounds.minX + 49.98, y: bounds.maxY - 22.31))
        shape2Path.line(to: NSPoint(x: bounds.minX + 49.94, y: bounds.maxY - 22.35))
        shape2Path.line(to: NSPoint(x: bounds.minX + 49.91, y: bounds.maxY - 22.36))
        shape2Path.line(to: NSPoint(x: bounds.minX + 49.88, y: bounds.maxY - 22.39))
        shape2Path.line(to: NSPoint(x: bounds.minX + 49.85, y: bounds.maxY - 22.4))
        shape2Path.line(to: NSPoint(x: bounds.minX + 49.81, y: bounds.maxY - 22.43))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 49.77, y: bounds.maxY - 22.49), controlPoint1: NSPoint(x: bounds.minX + 49.79, y: bounds.maxY - 22.45), controlPoint2: NSPoint(x: bounds.minX + 49.77, y: bounds.maxY - 22.47))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 49.77, y: bounds.maxY - 22.57), controlPoint1: NSPoint(x: bounds.minX + 49.77, y: bounds.maxY - 22.52), controlPoint2: NSPoint(x: bounds.minX + 49.77, y: bounds.maxY - 22.55))
        shape2Path.line(to: NSPoint(x: bounds.minX + 49.77, y: bounds.maxY - 22.66))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 49.75, y: bounds.maxY - 22.83), controlPoint1: NSPoint(x: bounds.minX + 49.77, y: bounds.maxY - 22.72), controlPoint2: NSPoint(x: bounds.minX + 49.76, y: bounds.maxY - 22.77))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 49.73, y: bounds.maxY - 23.18), controlPoint1: NSPoint(x: bounds.minX + 49.74, y: bounds.maxY - 22.94), controlPoint2: NSPoint(x: bounds.minX + 49.73, y: bounds.maxY - 23.06))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 49.73, y: bounds.maxY - 23.53), controlPoint1: NSPoint(x: bounds.minX + 49.72, y: bounds.maxY - 23.29), controlPoint2: NSPoint(x: bounds.minX + 49.72, y: bounds.maxY - 23.41))
        shape2Path.line(to: NSPoint(x: bounds.minX + 49.73, y: bounds.maxY - 23.63))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 49.79, y: bounds.maxY - 23.74), controlPoint1: NSPoint(x: bounds.minX + 49.73, y: bounds.maxY - 23.68), controlPoint2: NSPoint(x: bounds.minX + 49.75, y: bounds.maxY - 23.72))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 49.92, y: bounds.maxY - 23.73), controlPoint1: NSPoint(x: bounds.minX + 49.84, y: bounds.maxY - 23.76), controlPoint2: NSPoint(x: bounds.minX + 49.89, y: bounds.maxY - 23.76))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 50.38, y: bounds.maxY - 23.42), controlPoint1: NSPoint(x: bounds.minX + 50.08, y: bounds.maxY - 23.63), controlPoint2: NSPoint(x: bounds.minX + 50.23, y: bounds.maxY - 23.52))
        shape2Path.line(to: NSPoint(x: bounds.minX + 50.45, y: bounds.maxY - 23.35))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 50.61, y: bounds.maxY - 23.23), controlPoint1: NSPoint(x: bounds.minX + 50.5, y: bounds.maxY - 23.31), controlPoint2: NSPoint(x: bounds.minX + 50.55, y: bounds.maxY - 23.27))
        shape2Path.line(to: NSPoint(x: bounds.minX + 50.7, y: bounds.maxY - 23.18))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 51.26, y: bounds.maxY - 22.84), controlPoint1: NSPoint(x: bounds.minX + 50.86, y: bounds.maxY - 23.06), controlPoint2: NSPoint(x: bounds.minX + 51.05, y: bounds.maxY - 22.95))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 51.63, y: bounds.maxY - 22.91), controlPoint1: NSPoint(x: bounds.minX + 51.38, y: bounds.maxY - 22.77), controlPoint2: NSPoint(x: bounds.minX + 51.54, y: bounds.maxY - 22.81))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 51.69, y: bounds.maxY - 23.16), controlPoint1: NSPoint(x: bounds.minX + 51.68, y: bounds.maxY - 22.98), controlPoint2: NSPoint(x: bounds.minX + 51.71, y: bounds.maxY - 23.07))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 51.5, y: bounds.maxY - 24), controlPoint1: NSPoint(x: bounds.minX + 51.62, y: bounds.maxY - 23.45), controlPoint2: NSPoint(x: bounds.minX + 51.56, y: bounds.maxY - 23.73))
        shape2Path.line(to: NSPoint(x: bounds.minX + 51.47, y: bounds.maxY - 24.14))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 51.15, y: bounds.maxY - 25.59), controlPoint1: NSPoint(x: bounds.minX + 51.38, y: bounds.maxY - 24.61), controlPoint2: NSPoint(x: bounds.minX + 51.27, y: bounds.maxY - 25.11))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 50.76, y: bounds.maxY - 26.93), controlPoint1: NSPoint(x: bounds.minX + 51.02, y: bounds.maxY - 26.07), controlPoint2: NSPoint(x: bounds.minX + 50.9, y: bounds.maxY - 26.47))
        shape2Path.line(to: NSPoint(x: bounds.minX + 50.73, y: bounds.maxY - 27.02))
        shape2Path.close()
        shape2Path.move(to: NSPoint(x: bounds.minX + 51.85, y: bounds.maxY - 35.03))
        shape2Path.line(to: NSPoint(x: bounds.minX + 51.55, y: bounds.maxY - 34.92))
        shape2Path.line(to: NSPoint(x: bounds.minX + 51.51, y: bounds.maxY - 34.9))
        shape2Path.line(to: NSPoint(x: bounds.minX + 51.48, y: bounds.maxY - 34.85))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 50.93, y: bounds.maxY - 32.43), controlPoint1: NSPoint(x: bounds.minX + 51.17, y: bounds.maxY - 34.08), controlPoint2: NSPoint(x: bounds.minX + 50.99, y: bounds.maxY - 33.26))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 50.91, y: bounds.maxY - 31.68), controlPoint1: NSPoint(x: bounds.minX + 50.91, y: bounds.maxY - 32.18), controlPoint2: NSPoint(x: bounds.minX + 50.91, y: bounds.maxY - 31.93))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 51.21, y: bounds.maxY - 31.39), controlPoint1: NSPoint(x: bounds.minX + 50.92, y: bounds.maxY - 31.52), controlPoint2: NSPoint(x: bounds.minX + 51.05, y: bounds.maxY - 31.39))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 51.41, y: bounds.maxY - 31.47), controlPoint1: NSPoint(x: bounds.minX + 51.28, y: bounds.maxY - 31.39), controlPoint2: NSPoint(x: bounds.minX + 51.35, y: bounds.maxY - 31.42))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 52.16, y: bounds.maxY - 32.14), controlPoint1: NSPoint(x: bounds.minX + 51.66, y: bounds.maxY - 31.7), controlPoint2: NSPoint(x: bounds.minX + 51.91, y: bounds.maxY - 31.93))
        shape2Path.line(to: NSPoint(x: bounds.minX + 52.21, y: bounds.maxY - 32.19))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 53.25, y: bounds.maxY - 33.15), controlPoint1: NSPoint(x: bounds.minX + 52.55, y: bounds.maxY - 32.49), controlPoint2: NSPoint(x: bounds.minX + 52.91, y: bounds.maxY - 32.82))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 54.27, y: bounds.maxY - 34.22), controlPoint1: NSPoint(x: bounds.minX + 53.59, y: bounds.maxY - 33.47), controlPoint2: NSPoint(x: bounds.minX + 53.91, y: bounds.maxY - 33.83))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 54.56, y: bounds.maxY - 34.53), controlPoint1: NSPoint(x: bounds.minX + 54.37, y: bounds.maxY - 34.33), controlPoint2: NSPoint(x: bounds.minX + 54.46, y: bounds.maxY - 34.43))
        shape2Path.line(to: NSPoint(x: bounds.minX + 54.59, y: bounds.maxY - 34.56))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 54.62, y: bounds.maxY - 34.56), controlPoint1: NSPoint(x: bounds.minX + 54.59, y: bounds.maxY - 34.57), controlPoint2: NSPoint(x: bounds.minX + 54.61, y: bounds.maxY - 34.57))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 55.77, y: bounds.maxY - 34.46), controlPoint1: NSPoint(x: bounds.minX + 55, y: bounds.maxY - 34.56), controlPoint2: NSPoint(x: bounds.minX + 55.39, y: bounds.maxY - 34.52))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 55.87, y: bounds.maxY - 34.38), controlPoint1: NSPoint(x: bounds.minX + 55.81, y: bounds.maxY - 34.46), controlPoint2: NSPoint(x: bounds.minX + 55.85, y: bounds.maxY - 34.42))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 55.84, y: bounds.maxY - 34.25), controlPoint1: NSPoint(x: bounds.minX + 55.88, y: bounds.maxY - 34.33), controlPoint2: NSPoint(x: bounds.minX + 55.87, y: bounds.maxY - 34.28))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 55.09, y: bounds.maxY - 33.45), controlPoint1: NSPoint(x: bounds.minX + 55.59, y: bounds.maxY - 34), controlPoint2: NSPoint(x: bounds.minX + 55.36, y: bounds.maxY - 33.75))
        shape2Path.line(to: NSPoint(x: bounds.minX + 54.97, y: bounds.maxY - 33.35))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 54.03, y: bounds.maxY - 32.36), controlPoint1: NSPoint(x: bounds.minX + 54.67, y: bounds.maxY - 33.03), controlPoint2: NSPoint(x: bounds.minX + 54.36, y: bounds.maxY - 32.68))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 53.06, y: bounds.maxY - 31.47), controlPoint1: NSPoint(x: bounds.minX + 53.7, y: bounds.maxY - 32.04), controlPoint2: NSPoint(x: bounds.minX + 53.38, y: bounds.maxY - 31.75))
        shape2Path.line(to: NSPoint(x: bounds.minX + 52.89, y: bounds.maxY - 31.31))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 51.77, y: bounds.maxY - 30.28), controlPoint1: NSPoint(x: bounds.minX + 52.51, y: bounds.maxY - 30.96), controlPoint2: NSPoint(x: bounds.minX + 52.14, y: bounds.maxY - 30.64))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 51.27, y: bounds.maxY - 29.8), controlPoint1: NSPoint(x: bounds.minX + 51.61, y: bounds.maxY - 30.13), controlPoint2: NSPoint(x: bounds.minX + 51.44, y: bounds.maxY - 29.96))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 51.19, y: bounds.maxY - 29.49), controlPoint1: NSPoint(x: bounds.minX + 51.19, y: bounds.maxY - 29.72), controlPoint2: NSPoint(x: bounds.minX + 51.16, y: bounds.maxY - 29.6))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 51.36, y: bounds.maxY - 28.82), controlPoint1: NSPoint(x: bounds.minX + 51.24, y: bounds.maxY - 29.26), controlPoint2: NSPoint(x: bounds.minX + 51.3, y: bounds.maxY - 29.04))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 51.75, y: bounds.maxY - 27.5), controlPoint1: NSPoint(x: bounds.minX + 51.48, y: bounds.maxY - 28.34), controlPoint2: NSPoint(x: bounds.minX + 51.63, y: bounds.maxY - 27.89))
        shape2Path.line(to: NSPoint(x: bounds.minX + 51.83, y: bounds.maxY - 27.23))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 52.22, y: bounds.maxY - 25.88), controlPoint1: NSPoint(x: bounds.minX + 51.97, y: bounds.maxY - 26.77), controlPoint2: NSPoint(x: bounds.minX + 52.11, y: bounds.maxY - 26.33))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 52.56, y: bounds.maxY - 24.38), controlPoint1: NSPoint(x: bounds.minX + 52.34, y: bounds.maxY - 25.43), controlPoint2: NSPoint(x: bounds.minX + 52.45, y: bounds.maxY - 24.92))
        shape2Path.line(to: NSPoint(x: bounds.minX + 52.61, y: bounds.maxY - 24.16))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 52.89, y: bounds.maxY - 22.9), controlPoint1: NSPoint(x: bounds.minX + 52.69, y: bounds.maxY - 23.78), controlPoint2: NSPoint(x: bounds.minX + 52.78, y: bounds.maxY - 23.35))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 53.07, y: bounds.maxY - 22.24), controlPoint1: NSPoint(x: bounds.minX + 52.94, y: bounds.maxY - 22.7), controlPoint2: NSPoint(x: bounds.minX + 53, y: bounds.maxY - 22.48))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 53.3, y: bounds.maxY - 22), controlPoint1: NSPoint(x: bounds.minX + 53.1, y: bounds.maxY - 22.13), controlPoint2: NSPoint(x: bounds.minX + 53.19, y: bounds.maxY - 22.04))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 53.85, y: bounds.maxY - 21.85), controlPoint1: NSPoint(x: bounds.minX + 53.5, y: bounds.maxY - 21.94), controlPoint2: NSPoint(x: bounds.minX + 53.68, y: bounds.maxY - 21.89))
        shape2Path.line(to: NSPoint(x: bounds.minX + 53.95, y: bounds.maxY - 21.82))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 55.44, y: bounds.maxY - 21.46), controlPoint1: NSPoint(x: bounds.minX + 54.48, y: bounds.maxY - 21.68), controlPoint2: NSPoint(x: bounds.minX + 54.98, y: bounds.maxY - 21.57))
        shape2Path.line(to: NSPoint(x: bounds.minX + 55.62, y: bounds.maxY - 21.42))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 56.94, y: bounds.maxY - 21.1), controlPoint1: NSPoint(x: bounds.minX + 56.08, y: bounds.maxY - 21.32), controlPoint2: NSPoint(x: bounds.minX + 56.51, y: bounds.maxY - 21.22))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 58.27, y: bounds.maxY - 20.69), controlPoint1: NSPoint(x: bounds.minX + 57.36, y: bounds.maxY - 20.98), controlPoint2: NSPoint(x: bounds.minX + 57.84, y: bounds.maxY - 20.83))
        shape2Path.line(to: NSPoint(x: bounds.minX + 58.41, y: bounds.maxY - 20.64))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 59.86, y: bounds.maxY - 20.18), controlPoint1: NSPoint(x: bounds.minX + 58.86, y: bounds.maxY - 20.49), controlPoint2: NSPoint(x: bounds.minX + 59.34, y: bounds.maxY - 20.33))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 60.63, y: bounds.maxY - 19.98), controlPoint1: NSPoint(x: bounds.minX + 60.16, y: bounds.maxY - 20.1), controlPoint2: NSPoint(x: bounds.minX + 60.41, y: bounds.maxY - 20.03))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 62.35, y: bounds.maxY - 19.71), controlPoint1: NSPoint(x: bounds.minX + 61.2, y: bounds.maxY - 19.84), controlPoint2: NSPoint(x: bounds.minX + 61.77, y: bounds.maxY - 19.75))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 62.97, y: bounds.maxY - 19.68), controlPoint1: NSPoint(x: bounds.minX + 62.56, y: bounds.maxY - 19.69), controlPoint2: NSPoint(x: bounds.minX + 62.77, y: bounds.maxY - 19.68))
        shape2Path.line(to: NSPoint(x: bounds.minX + 63.47, y: bounds.maxY - 19.68))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 65.89, y: bounds.maxY - 20.2), controlPoint1: NSPoint(x: bounds.minX + 64.3, y: bounds.maxY - 19.73), controlPoint2: NSPoint(x: bounds.minX + 65.12, y: bounds.maxY - 19.9))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 65.97, y: bounds.maxY - 20.27), controlPoint1: NSPoint(x: bounds.minX + 65.92, y: bounds.maxY - 20.21), controlPoint2: NSPoint(x: bounds.minX + 65.95, y: bounds.maxY - 20.24))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 66.52, y: bounds.maxY - 22.69), controlPoint1: NSPoint(x: bounds.minX + 66.28, y: bounds.maxY - 21.04), controlPoint2: NSPoint(x: bounds.minX + 66.47, y: bounds.maxY - 21.86))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 66.54, y: bounds.maxY - 23.44), controlPoint1: NSPoint(x: bounds.minX + 66.54, y: bounds.maxY - 22.92), controlPoint2: NSPoint(x: bounds.minX + 66.54, y: bounds.maxY - 23.17))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 66.36, y: bounds.maxY - 23.71), controlPoint1: NSPoint(x: bounds.minX + 66.54, y: bounds.maxY - 23.56), controlPoint2: NSPoint(x: bounds.minX + 66.47, y: bounds.maxY - 23.66))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 66.04, y: bounds.maxY - 23.65), controlPoint1: NSPoint(x: bounds.minX + 66.25, y: bounds.maxY - 23.76), controlPoint2: NSPoint(x: bounds.minX + 66.12, y: bounds.maxY - 23.73))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 65.29, y: bounds.maxY - 22.98), controlPoint1: NSPoint(x: bounds.minX + 65.79, y: bounds.maxY - 23.41), controlPoint2: NSPoint(x: bounds.minX + 65.54, y: bounds.maxY - 23.19))
        shape2Path.line(to: NSPoint(x: bounds.minX + 65.16, y: bounds.maxY - 22.86))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 64.19, y: bounds.maxY - 21.97), controlPoint1: NSPoint(x: bounds.minX + 64.82, y: bounds.maxY - 22.56), controlPoint2: NSPoint(x: bounds.minX + 64.5, y: bounds.maxY - 22.27))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 63.26, y: bounds.maxY - 20.99), controlPoint1: NSPoint(x: bounds.minX + 63.89, y: bounds.maxY - 21.68), controlPoint2: NSPoint(x: bounds.minX + 63.58, y: bounds.maxY - 21.33))
        shape2Path.line(to: NSPoint(x: bounds.minX + 63.16, y: bounds.maxY - 20.89))
        shape2Path.line(to: NSPoint(x: bounds.minX + 62.96, y: bounds.maxY - 20.66))
        shape2Path.line(to: NSPoint(x: bounds.minX + 62.88, y: bounds.maxY - 20.57))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 62.8, y: bounds.maxY - 20.54), controlPoint1: NSPoint(x: bounds.minX + 62.85, y: bounds.maxY - 20.55), controlPoint2: NSPoint(x: bounds.minX + 62.83, y: bounds.maxY - 20.54))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 61.67, y: bounds.maxY - 20.65), controlPoint1: NSPoint(x: bounds.minX + 62.42, y: bounds.maxY - 20.55), controlPoint2: NSPoint(x: bounds.minX + 62.05, y: bounds.maxY - 20.59))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 61.58, y: bounds.maxY - 20.73), controlPoint1: NSPoint(x: bounds.minX + 61.63, y: bounds.maxY - 20.66), controlPoint2: NSPoint(x: bounds.minX + 61.59, y: bounds.maxY - 20.69))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 61.6, y: bounds.maxY - 20.86), controlPoint1: NSPoint(x: bounds.minX + 61.56, y: bounds.maxY - 20.78), controlPoint2: NSPoint(x: bounds.minX + 61.57, y: bounds.maxY - 20.83))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 62.27, y: bounds.maxY - 21.56), controlPoint1: NSPoint(x: bounds.minX + 61.82, y: bounds.maxY - 21.09), controlPoint2: NSPoint(x: bounds.minX + 62.03, y: bounds.maxY - 21.31))
        shape2Path.line(to: NSPoint(x: bounds.minX + 62.46, y: bounds.maxY - 21.77))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 63.41, y: bounds.maxY - 22.77), controlPoint1: NSPoint(x: bounds.minX + 62.76, y: bounds.maxY - 22.1), controlPoint2: NSPoint(x: bounds.minX + 63.08, y: bounds.maxY - 22.44))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 64.5, y: bounds.maxY - 23.79), controlPoint1: NSPoint(x: bounds.minX + 63.74, y: bounds.maxY - 23.11), controlPoint2: NSPoint(x: bounds.minX + 64.14, y: bounds.maxY - 23.46))
        shape2Path.line(to: NSPoint(x: bounds.minX + 64.67, y: bounds.maxY - 23.94))
        shape2Path.line(to: NSPoint(x: bounds.minX + 64.81, y: bounds.maxY - 24.07))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 65.67, y: bounds.maxY - 24.86), controlPoint1: NSPoint(x: bounds.minX + 65.09, y: bounds.maxY - 24.32), controlPoint2: NSPoint(x: bounds.minX + 65.38, y: bounds.maxY - 24.57))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 66.22, y: bounds.maxY - 25.42), controlPoint1: NSPoint(x: bounds.minX + 65.84, y: bounds.maxY - 25.02), controlPoint2: NSPoint(x: bounds.minX + 66.03, y: bounds.maxY - 25.21))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 66.26, y: bounds.maxY - 25.53), controlPoint1: NSPoint(x: bounds.minX + 66.25, y: bounds.maxY - 25.45), controlPoint2: NSPoint(x: bounds.minX + 66.26, y: bounds.maxY - 25.49))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 66.06, y: bounds.maxY - 26.31), controlPoint1: NSPoint(x: bounds.minX + 66.2, y: bounds.maxY - 25.8), controlPoint2: NSPoint(x: bounds.minX + 66.14, y: bounds.maxY - 26.06))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 65.65, y: bounds.maxY - 27.73), controlPoint1: NSPoint(x: bounds.minX + 65.93, y: bounds.maxY - 26.82), controlPoint2: NSPoint(x: bounds.minX + 65.78, y: bounds.maxY - 27.28))
        shape2Path.line(to: NSPoint(x: bounds.minX + 65.61, y: bounds.maxY - 27.83))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 65.2, y: bounds.maxY - 29.25), controlPoint1: NSPoint(x: bounds.minX + 65.47, y: bounds.maxY - 28.32), controlPoint2: NSPoint(x: bounds.minX + 65.32, y: bounds.maxY - 28.77))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 64.86, y: bounds.maxY - 30.75), controlPoint1: NSPoint(x: bounds.minX + 65.07, y: bounds.maxY - 29.73), controlPoint2: NSPoint(x: bounds.minX + 64.98, y: bounds.maxY - 30.19))
        shape2Path.line(to: NSPoint(x: bounds.minX + 64.8, y: bounds.maxY - 31.04))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 64.53, y: bounds.maxY - 32.24), controlPoint1: NSPoint(x: bounds.minX + 64.72, y: bounds.maxY - 31.42), controlPoint2: NSPoint(x: bounds.minX + 64.63, y: bounds.maxY - 31.82))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 64.32, y: bounds.maxY - 33.02), controlPoint1: NSPoint(x: bounds.minX + 64.47, y: bounds.maxY - 32.47), controlPoint2: NSPoint(x: bounds.minX + 64.4, y: bounds.maxY - 32.73))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 64.23, y: bounds.maxY - 33.1), controlPoint1: NSPoint(x: bounds.minX + 64.3, y: bounds.maxY - 33.06), controlPoint2: NSPoint(x: bounds.minX + 64.27, y: bounds.maxY - 33.09))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 63.48, y: bounds.maxY - 33.32), controlPoint1: NSPoint(x: bounds.minX + 63.95, y: bounds.maxY - 33.19), controlPoint2: NSPoint(x: bounds.minX + 63.7, y: bounds.maxY - 33.26))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 62, y: bounds.maxY - 33.68), controlPoint1: NSPoint(x: bounds.minX + 62.95, y: bounds.maxY - 33.46), controlPoint2: NSPoint(x: bounds.minX + 62.45, y: bounds.maxY - 33.57))
        shape2Path.line(to: NSPoint(x: bounds.minX + 61.93, y: bounds.maxY - 33.69))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 60.5, y: bounds.maxY - 34.04), controlPoint1: NSPoint(x: bounds.minX + 61.46, y: bounds.maxY - 33.8), controlPoint2: NSPoint(x: bounds.minX + 60.98, y: bounds.maxY - 33.91))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 59.07, y: bounds.maxY - 34.47), controlPoint1: NSPoint(x: bounds.minX + 60.02, y: bounds.maxY - 34.17), controlPoint2: NSPoint(x: bounds.minX + 59.54, y: bounds.maxY - 34.33))
        shape2Path.line(to: NSPoint(x: bounds.minX + 59.05, y: bounds.maxY - 34.47))
        shape2Path.line(to: NSPoint(x: bounds.minX + 58.82, y: bounds.maxY - 34.55))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 57.57, y: bounds.maxY - 34.94), controlPoint1: NSPoint(x: bounds.minX + 58.42, y: bounds.maxY - 34.68), controlPoint2: NSPoint(x: bounds.minX + 58.01, y: bounds.maxY - 34.82))
        shape2Path.line(to: NSPoint(x: bounds.minX + 57.54, y: bounds.maxY - 34.94))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 56.79, y: bounds.maxY - 35.14), controlPoint1: NSPoint(x: bounds.minX + 57.37, y: bounds.maxY - 35), controlPoint2: NSPoint(x: bounds.minX + 57.1, y: bounds.maxY - 35.07))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 55.08, y: bounds.maxY - 35.41), controlPoint1: NSPoint(x: bounds.minX + 56.23, y: bounds.maxY - 35.28), controlPoint2: NSPoint(x: bounds.minX + 55.66, y: bounds.maxY - 35.37))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 54.45, y: bounds.maxY - 35.44), controlPoint1: NSPoint(x: bounds.minX + 54.87, y: bounds.maxY - 35.43), controlPoint2: NSPoint(x: bounds.minX + 54.66, y: bounds.maxY - 35.44))
        shape2Path.line(to: NSPoint(x: bounds.minX + 53.95, y: bounds.maxY - 35.44))
        shape2Path.line(to: NSPoint(x: bounds.minX + 53.64, y: bounds.maxY - 35.42))
        shape2Path.line(to: NSPoint(x: bounds.minX + 53.36, y: bounds.maxY - 35.38))
        shape2Path.line(to: NSPoint(x: bounds.minX + 53.27, y: bounds.maxY - 35.38))
        shape2Path.line(to: NSPoint(x: bounds.minX + 53.08, y: bounds.maxY - 35.35))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 53.03, y: bounds.maxY - 35.35), controlPoint1: NSPoint(x: bounds.minX + 53.06, y: bounds.maxY - 35.35), controlPoint2: NSPoint(x: bounds.minX + 53.05, y: bounds.maxY - 35.35))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 52.81, y: bounds.maxY - 35.3), controlPoint1: NSPoint(x: bounds.minX + 52.96, y: bounds.maxY - 35.35), controlPoint2: NSPoint(x: bounds.minX + 52.88, y: bounds.maxY - 35.32))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 52.4, y: bounds.maxY - 35.21), controlPoint1: NSPoint(x: bounds.minX + 52.67, y: bounds.maxY - 35.28), controlPoint2: NSPoint(x: bounds.minX + 52.53, y: bounds.maxY - 35.24))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 51.84, y: bounds.maxY - 35.03), controlPoint1: NSPoint(x: bounds.minX + 52.26, y: bounds.maxY - 35.17), controlPoint2: NSPoint(x: bounds.minX + 52.05, y: bounds.maxY - 35.1))
        shape2Path.line(to: NSPoint(x: bounds.minX + 51.85, y: bounds.maxY - 35.03))
        shape2Path.close()
        shape2Path.move(to: NSPoint(x: bounds.minX + 59.32, y: bounds.maxY - 38.66))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 57.42, y: bounds.maxY - 38.95), controlPoint1: NSPoint(x: bounds.minX + 58.7, y: bounds.maxY - 38.85), controlPoint2: NSPoint(x: bounds.minX + 58.06, y: bounds.maxY - 38.95))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 55.83, y: bounds.maxY - 38.76), controlPoint1: NSPoint(x: bounds.minX + 56.88, y: bounds.maxY - 38.96), controlPoint2: NSPoint(x: bounds.minX + 56.35, y: bounds.maxY - 38.89))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 52.83, y: bounds.maxY - 36.97), controlPoint1: NSPoint(x: bounds.minX + 54.69, y: bounds.maxY - 38.45), controlPoint2: NSPoint(x: bounds.minX + 53.65, y: bounds.maxY - 37.83))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 52.77, y: bounds.maxY - 36.66), controlPoint1: NSPoint(x: bounds.minX + 52.75, y: bounds.maxY - 36.89), controlPoint2: NSPoint(x: bounds.minX + 52.73, y: bounds.maxY - 36.76))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 53.04, y: bounds.maxY - 36.48), controlPoint1: NSPoint(x: bounds.minX + 52.82, y: bounds.maxY - 36.55), controlPoint2: NSPoint(x: bounds.minX + 52.93, y: bounds.maxY - 36.48))
        shape2Path.line(to: NSPoint(x: bounds.minX + 53.09, y: bounds.maxY - 36.48))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 53.92, y: bounds.maxY - 36.56), controlPoint1: NSPoint(x: bounds.minX + 53.36, y: bounds.maxY - 36.52), controlPoint2: NSPoint(x: bounds.minX + 53.64, y: bounds.maxY - 36.55))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 54.51, y: bounds.maxY - 36.56), controlPoint1: NSPoint(x: bounds.minX + 54.12, y: bounds.maxY - 36.56), controlPoint2: NSPoint(x: bounds.minX + 54.31, y: bounds.maxY - 36.58))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 56.31, y: bounds.maxY - 36.39), controlPoint1: NSPoint(x: bounds.minX + 55.12, y: bounds.maxY - 36.56), controlPoint2: NSPoint(x: bounds.minX + 55.72, y: bounds.maxY - 36.5))
        shape2Path.line(to: NSPoint(x: bounds.minX + 56.37, y: bounds.maxY - 36.39))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 56.55, y: bounds.maxY - 36.45), controlPoint1: NSPoint(x: bounds.minX + 56.43, y: bounds.maxY - 36.39), controlPoint2: NSPoint(x: bounds.minX + 56.49, y: bounds.maxY - 36.41))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 58.56, y: bounds.maxY - 37.76), controlPoint1: NSPoint(x: bounds.minX + 57.17, y: bounds.maxY - 36.96), controlPoint2: NSPoint(x: bounds.minX + 57.84, y: bounds.maxY - 37.4))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 59.33, y: bounds.maxY - 38.09), controlPoint1: NSPoint(x: bounds.minX + 58.81, y: bounds.maxY - 37.87), controlPoint2: NSPoint(x: bounds.minX + 59.06, y: bounds.maxY - 37.99))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 59.52, y: bounds.maxY - 38.37), controlPoint1: NSPoint(x: bounds.minX + 59.45, y: bounds.maxY - 38.14), controlPoint2: NSPoint(x: bounds.minX + 59.53, y: bounds.maxY - 38.25))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 59.32, y: bounds.maxY - 38.66), controlPoint1: NSPoint(x: bounds.minX + 59.52, y: bounds.maxY - 38.5), controlPoint2: NSPoint(x: bounds.minX + 59.44, y: bounds.maxY - 38.62))
        shape2Path.line(to: NSPoint(x: bounds.minX + 59.32, y: bounds.maxY - 38.66))
        shape2Path.close()
        shape2Path.move(to: NSPoint(x: bounds.minX + 63.19, y: bounds.maxY - 35.62))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 61.59, y: bounds.maxY - 37.41), controlPoint1: NSPoint(x: bounds.minX + 62.75, y: bounds.maxY - 36.3), controlPoint2: NSPoint(x: bounds.minX + 62.21, y: bounds.maxY - 36.9))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 61.41, y: bounds.maxY - 37.48), controlPoint1: NSPoint(x: bounds.minX + 61.54, y: bounds.maxY - 37.46), controlPoint2: NSPoint(x: bounds.minX + 61.47, y: bounds.maxY - 37.48))
        shape2Path.line(to: NSPoint(x: bounds.minX + 61.36, y: bounds.maxY - 37.48))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 59.06, y: bounds.maxY - 36.77), controlPoint1: NSPoint(x: bounds.minX + 60.56, y: bounds.maxY - 37.37), controlPoint2: NSPoint(x: bounds.minX + 59.79, y: bounds.maxY - 37.13))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 58.39, y: bounds.maxY - 36.4), controlPoint1: NSPoint(x: bounds.minX + 58.83, y: bounds.maxY - 36.65), controlPoint2: NSPoint(x: bounds.minX + 58.61, y: bounds.maxY - 36.52))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 58.26, y: bounds.maxY - 36.12), controlPoint1: NSPoint(x: bounds.minX + 58.3, y: bounds.maxY - 36.34), controlPoint2: NSPoint(x: bounds.minX + 58.24, y: bounds.maxY - 36.23))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 58.46, y: bounds.maxY - 35.87), controlPoint1: NSPoint(x: bounds.minX + 58.27, y: bounds.maxY - 36), controlPoint2: NSPoint(x: bounds.minX + 58.35, y: bounds.maxY - 35.91))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 59.21, y: bounds.maxY - 35.62), controlPoint1: NSPoint(x: bounds.minX + 58.71, y: bounds.maxY - 35.79), controlPoint2: NSPoint(x: bounds.minX + 58.96, y: bounds.maxY - 35.71))
        shape2Path.line(to: NSPoint(x: bounds.minX + 59.42, y: bounds.maxY - 35.55))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 60.84, y: bounds.maxY - 35.11), controlPoint1: NSPoint(x: bounds.minX + 59.92, y: bounds.maxY - 35.39), controlPoint2: NSPoint(x: bounds.minX + 60.37, y: bounds.maxY - 35.24))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 62.11, y: bounds.maxY - 34.8), controlPoint1: NSPoint(x: bounds.minX + 61.25, y: bounds.maxY - 35), controlPoint2: NSPoint(x: bounds.minX + 61.67, y: bounds.maxY - 34.9))
        shape2Path.line(to: NSPoint(x: bounds.minX + 62.29, y: bounds.maxY - 34.76))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 63.25, y: bounds.maxY - 34.54), controlPoint1: NSPoint(x: bounds.minX + 62.6, y: bounds.maxY - 34.69), controlPoint2: NSPoint(x: bounds.minX + 62.92, y: bounds.maxY - 34.62))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 63.33, y: bounds.maxY - 34.54), controlPoint1: NSPoint(x: bounds.minX + 63.28, y: bounds.maxY - 34.54), controlPoint2: NSPoint(x: bounds.minX + 63.3, y: bounds.maxY - 34.54))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 63.58, y: bounds.maxY - 34.68), controlPoint1: NSPoint(x: bounds.minX + 63.43, y: bounds.maxY - 34.54), controlPoint2: NSPoint(x: bounds.minX + 63.52, y: bounds.maxY - 34.59))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 63.58, y: bounds.maxY - 34.96), controlPoint1: NSPoint(x: bounds.minX + 63.62, y: bounds.maxY - 34.77), controlPoint2: NSPoint(x: bounds.minX + 63.62, y: bounds.maxY - 34.88))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 63.19, y: bounds.maxY - 35.62), controlPoint1: NSPoint(x: bounds.minX + 63.45, y: bounds.maxY - 35.19), controlPoint2: NSPoint(x: bounds.minX + 63.32, y: bounds.maxY - 35.42))
        shape2Path.line(to: NSPoint(x: bounds.minX + 63.19, y: bounds.maxY - 35.62))
        shape2Path.close()
        shape2Path.move(to: NSPoint(x: bounds.minX + 68.77, y: bounds.maxY - 31.8))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 68.72, y: bounds.maxY - 32.13), controlPoint1: NSPoint(x: bounds.minX + 68.77, y: bounds.maxY - 31.91), controlPoint2: NSPoint(x: bounds.minX + 68.74, y: bounds.maxY - 32.02))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 63.94, y: bounds.maxY - 37.38), controlPoint1: NSPoint(x: bounds.minX + 68.38, y: bounds.maxY - 34.71), controlPoint2: NSPoint(x: bounds.minX + 66.47, y: bounds.maxY - 36.8))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 63.87, y: bounds.maxY - 37.38), controlPoint1: NSPoint(x: bounds.minX + 63.92, y: bounds.maxY - 37.38), controlPoint2: NSPoint(x: bounds.minX + 63.89, y: bounds.maxY - 37.38))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 63.61, y: bounds.maxY - 37.21), controlPoint1: NSPoint(x: bounds.minX + 63.76, y: bounds.maxY - 37.38), controlPoint2: NSPoint(x: bounds.minX + 63.65, y: bounds.maxY - 37.31))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 63.64, y: bounds.maxY - 36.9), controlPoint1: NSPoint(x: bounds.minX + 63.56, y: bounds.maxY - 37.11), controlPoint2: NSPoint(x: bounds.minX + 63.57, y: bounds.maxY - 36.99))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 64.13, y: bounds.maxY - 36.22), controlPoint1: NSPoint(x: bounds.minX + 63.81, y: bounds.maxY - 36.69), controlPoint2: NSPoint(x: bounds.minX + 63.97, y: bounds.maxY - 36.46))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 65.18, y: bounds.maxY - 34.09), controlPoint1: NSPoint(x: bounds.minX + 64.56, y: bounds.maxY - 35.55), controlPoint2: NSPoint(x: bounds.minX + 64.91, y: bounds.maxY - 34.84))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 65.38, y: bounds.maxY - 33.89), controlPoint1: NSPoint(x: bounds.minX + 65.22, y: bounds.maxY - 34), controlPoint2: NSPoint(x: bounds.minX + 65.29, y: bounds.maxY - 33.92))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 67.34, y: bounds.maxY - 32.9), controlPoint1: NSPoint(x: bounds.minX + 66.07, y: bounds.maxY - 33.63), controlPoint2: NSPoint(x: bounds.minX + 66.72, y: bounds.maxY - 33.3))
        shape2Path.line(to: NSPoint(x: bounds.minX + 67.42, y: bounds.maxY - 32.84))
        shape2Path.line(to: NSPoint(x: bounds.minX + 67.52, y: bounds.maxY - 32.78))
        shape2Path.line(to: NSPoint(x: bounds.minX + 67.57, y: bounds.maxY - 32.75))
        shape2Path.line(to: NSPoint(x: bounds.minX + 67.59, y: bounds.maxY - 32.73))
        shape2Path.line(to: NSPoint(x: bounds.minX + 67.65, y: bounds.maxY - 32.69))
        shape2Path.line(to: NSPoint(x: bounds.minX + 67.7, y: bounds.maxY - 32.66))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 67.72, y: bounds.maxY - 32.64), controlPoint1: NSPoint(x: bounds.minX + 67.71, y: bounds.maxY - 32.65), controlPoint2: NSPoint(x: bounds.minX + 67.72, y: bounds.maxY - 32.65))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 67.73, y: bounds.maxY - 32.58), controlPoint1: NSPoint(x: bounds.minX + 67.73, y: bounds.maxY - 32.62), controlPoint2: NSPoint(x: bounds.minX + 67.73, y: bounds.maxY - 32.6))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 67.8, y: bounds.maxY - 31.48), controlPoint1: NSPoint(x: bounds.minX + 67.78, y: bounds.maxY - 32.21), controlPoint2: NSPoint(x: bounds.minX + 67.81, y: bounds.maxY - 31.85))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 67.74, y: bounds.maxY - 31.37), controlPoint1: NSPoint(x: bounds.minX + 67.8, y: bounds.maxY - 31.43), controlPoint2: NSPoint(x: bounds.minX + 67.78, y: bounds.maxY - 31.39))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 67.61, y: bounds.maxY - 31.37), controlPoint1: NSPoint(x: bounds.minX + 67.69, y: bounds.maxY - 31.34), controlPoint2: NSPoint(x: bounds.minX + 67.64, y: bounds.maxY - 31.35))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 66.86, y: bounds.maxY - 31.87), controlPoint1: NSPoint(x: bounds.minX + 67.36, y: bounds.maxY - 31.54), controlPoint2: NSPoint(x: bounds.minX + 67.12, y: bounds.maxY - 31.7))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 66.2, y: bounds.maxY - 32.27), controlPoint1: NSPoint(x: bounds.minX + 66.66, y: bounds.maxY - 32), controlPoint2: NSPoint(x: bounds.minX + 66.44, y: bounds.maxY - 32.14))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 66.06, y: bounds.maxY - 32.31), controlPoint1: NSPoint(x: bounds.minX + 66.16, y: bounds.maxY - 32.3), controlPoint2: NSPoint(x: bounds.minX + 66.11, y: bounds.maxY - 32.31))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 65.83, y: bounds.maxY - 32.2), controlPoint1: NSPoint(x: bounds.minX + 65.97, y: bounds.maxY - 32.31), controlPoint2: NSPoint(x: bounds.minX + 65.89, y: bounds.maxY - 32.27))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 65.77, y: bounds.maxY - 31.95), controlPoint1: NSPoint(x: bounds.minX + 65.78, y: bounds.maxY - 32.13), controlPoint2: NSPoint(x: bounds.minX + 65.75, y: bounds.maxY - 32.04))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 65.94, y: bounds.maxY - 31.2), controlPoint1: NSPoint(x: bounds.minX + 65.84, y: bounds.maxY - 31.7), controlPoint2: NSPoint(x: bounds.minX + 65.89, y: bounds.maxY - 31.45))
        shape2Path.line(to: NSPoint(x: bounds.minX + 65.99, y: bounds.maxY - 30.97))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 66.31, y: bounds.maxY - 29.51), controlPoint1: NSPoint(x: bounds.minX + 66.07, y: bounds.maxY - 30.53), controlPoint2: NSPoint(x: bounds.minX + 66.18, y: bounds.maxY - 30.02))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 66.7, y: bounds.maxY - 28.18), controlPoint1: NSPoint(x: bounds.minX + 66.43, y: bounds.maxY - 29.07), controlPoint2: NSPoint(x: bounds.minX + 66.56, y: bounds.maxY - 28.61))
        shape2Path.line(to: NSPoint(x: bounds.minX + 66.73, y: bounds.maxY - 28.1))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 67.02, y: bounds.maxY - 27.14), controlPoint1: NSPoint(x: bounds.minX + 66.83, y: bounds.maxY - 27.79), controlPoint2: NSPoint(x: bounds.minX + 66.92, y: bounds.maxY - 27.47))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 67.3, y: bounds.maxY - 26.93), controlPoint1: NSPoint(x: bounds.minX + 67.06, y: bounds.maxY - 27.01), controlPoint2: NSPoint(x: bounds.minX + 67.17, y: bounds.maxY - 26.93))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 67.55, y: bounds.maxY - 27.06), controlPoint1: NSPoint(x: bounds.minX + 67.4, y: bounds.maxY - 26.93), controlPoint2: NSPoint(x: bounds.minX + 67.5, y: bounds.maxY - 26.98))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 67.93, y: bounds.maxY - 27.72), controlPoint1: NSPoint(x: bounds.minX + 67.7, y: bounds.maxY - 27.31), controlPoint2: NSPoint(x: bounds.minX + 67.83, y: bounds.maxY - 27.52))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 68.7, y: bounds.maxY - 30.1), controlPoint1: NSPoint(x: bounds.minX + 68.31, y: bounds.maxY - 28.47), controlPoint2: NSPoint(x: bounds.minX + 68.57, y: bounds.maxY - 29.27))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 68.77, y: bounds.maxY - 31.8), controlPoint1: NSPoint(x: bounds.minX + 68.8, y: bounds.maxY - 30.66), controlPoint2: NSPoint(x: bounds.minX + 68.82, y: bounds.maxY - 31.23))
        shape2Path.line(to: NSPoint(x: bounds.minX + 68.77, y: bounds.maxY - 31.8))
        shape2Path.close()
        shape2Path.move(to: NSPoint(x: bounds.minX + 69.84, y: bounds.maxY - 27.98))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 69.58, y: bounds.maxY - 28.19), controlPoint1: NSPoint(x: bounds.minX + 69.81, y: bounds.maxY - 28.1), controlPoint2: NSPoint(x: bounds.minX + 69.7, y: bounds.maxY - 28.18))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 69.29, y: bounds.maxY - 28), controlPoint1: NSPoint(x: bounds.minX + 69.45, y: bounds.maxY - 28.19), controlPoint2: NSPoint(x: bounds.minX + 69.34, y: bounds.maxY - 28.12))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 68.95, y: bounds.maxY - 27.25), controlPoint1: NSPoint(x: bounds.minX + 69.19, y: bounds.maxY - 27.75), controlPoint2: NSPoint(x: bounds.minX + 69.07, y: bounds.maxY - 27.48))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 67.62, y: bounds.maxY - 25.27), controlPoint1: NSPoint(x: bounds.minX + 68.58, y: bounds.maxY - 26.54), controlPoint2: NSPoint(x: bounds.minX + 68.14, y: bounds.maxY - 25.88))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 67.55, y: bounds.maxY - 25), controlPoint1: NSPoint(x: bounds.minX + 67.56, y: bounds.maxY - 25.19), controlPoint2: NSPoint(x: bounds.minX + 67.54, y: bounds.maxY - 25.09))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 67.67, y: bounds.maxY - 22.62), controlPoint1: NSPoint(x: bounds.minX + 67.68, y: bounds.maxY - 24.21), controlPoint2: NSPoint(x: bounds.minX + 67.72, y: bounds.maxY - 23.42))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 67.57, y: bounds.maxY - 21.79), controlPoint1: NSPoint(x: bounds.minX + 67.64, y: bounds.maxY - 22.33), controlPoint2: NSPoint(x: bounds.minX + 67.61, y: bounds.maxY - 22.05))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 67.64, y: bounds.maxY - 21.56), controlPoint1: NSPoint(x: bounds.minX + 67.56, y: bounds.maxY - 21.71), controlPoint2: NSPoint(x: bounds.minX + 67.58, y: bounds.maxY - 21.62))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 67.86, y: bounds.maxY - 21.45), controlPoint1: NSPoint(x: bounds.minX + 67.69, y: bounds.maxY - 21.49), controlPoint2: NSPoint(x: bounds.minX + 67.78, y: bounds.maxY - 21.46))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 68.06, y: bounds.maxY - 21.53), controlPoint1: NSPoint(x: bounds.minX + 67.94, y: bounds.maxY - 21.45), controlPoint2: NSPoint(x: bounds.minX + 68.01, y: bounds.maxY - 21.48))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 69.84, y: bounds.maxY - 27.98), controlPoint1: NSPoint(x: bounds.minX + 69.86, y: bounds.maxY - 23.15), controlPoint2: NSPoint(x: bounds.minX + 70.55, y: bounds.maxY - 25.66))
        shape2Path.line(to: NSPoint(x: bounds.minX + 69.84, y: bounds.maxY - 27.98))
        shape2Path.close()
        shape2Path.windingRule = .evenOddWindingRule
        fillColor2.setFill()
        shape2Path.fill()
    }

    public static func drawDigitButton(bounds: NSRect = NSRect(x: 0, y: 0, width: 191, height: 56), original: Bool = true, hover: Bool = false, pressed: Bool = false) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext

        //// Color Declarations
        let highlightGradientColor = NSColor(deviceRed: 1, green: 1, blue: 1, alpha: 0.09)
        let highlightGradientColor2 = NSColor(deviceRed: 1, green: 1, blue: 1, alpha: 0)
        let shadow2Color = NSColor(deviceRed: 1, green: 1, blue: 1, alpha: 0.36)
        let logoWhite = NSColor(deviceRed: 1, green: 1, blue: 1, alpha: 1)
        let digitBackground = NSColor(deviceRed: 0.314, green: 0.812, blue: 0.635, alpha: 1)

        //// Gradient Declarations
        let highlightGradient = NSGradient(starting: highlightGradientColor, ending: highlightGradientColor2)!

        //// Shadow Declarations
        let outerShadow = NSShadow()
        outerShadow.shadowColor = NSColor.black
        outerShadow.shadowOffset = NSSize(width: 0, height: 0)
        outerShadow.shadowBlurRadius = 0.5
        let innerStroke = NSShadow()
        innerStroke.shadowColor = shadow2Color
        innerStroke.shadowOffset = NSSize(width: 0, height: 0)
        innerStroke.shadowBlurRadius = 0.5

        if (original) {
            //// digit
            NSGraphicsContext.saveGraphicsState()
            context.translateBy(x: bounds.minX + 95.5, y: bounds.maxY - 28)

            outerShadow.set()
            context.beginTransparencyLayer(auxiliaryInfo: nil)


            //// digitBase Drawing
            let digitBasePath = NSBezierPath(roundedRect: NSRect(x: -88.5, y: -21, width: 177, height: 42), xRadius: 5, yRadius: 5)
            digitBackground.setFill()
            digitBasePath.fill()


            //// digitHighlight Drawing
            let digitHighlightPath = NSBezierPath(roundedRect: NSRect(x: -88.5, y: -21, width: 177, height: 42), xRadius: 5, yRadius: 5)
            highlightGradient.draw(in: digitHighlightPath, angle: -45)

            ////// digitHighlight Inner Shadow
            NSGraphicsContext.saveGraphicsState()
            NSRectClip(digitHighlightPath.bounds)
            context.setShadow(offset: NSSize.zero, blur: 0, color: nil)

            context.setAlpha(innerStroke.shadowColor!.alphaComponent)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            let digitHighlightOpaqueShadow = NSShadow()
            digitHighlightOpaqueShadow.shadowColor = innerStroke.shadowColor!.withAlphaComponent(1)
            digitHighlightOpaqueShadow.shadowOffset = innerStroke.shadowOffset
            digitHighlightOpaqueShadow.shadowBlurRadius = innerStroke.shadowBlurRadius
            digitHighlightOpaqueShadow.set()

            context.setBlendMode(.sourceOut)
            context.beginTransparencyLayer(auxiliaryInfo: nil)

            digitHighlightOpaqueShadow.shadowColor!.setFill()
            digitHighlightPath.fill()

            context.endTransparencyLayer()
            context.endTransparencyLayer()
            NSGraphicsContext.restoreGraphicsState()



            context.endTransparencyLayer()

            NSGraphicsContext.restoreGraphicsState()
        }


        if (hover) {
            //// digitHover
            NSGraphicsContext.saveGraphicsState()
            context.translateBy(x: bounds.minX + 95.5, y: bounds.maxY - 28)
            context.scaleBy(x: 1.05, y: 1.05)

            outerShadow.set()
            context.beginTransparencyLayer(auxiliaryInfo: nil)


            //// digitBase 2 Drawing
            let digitBase2Path = NSBezierPath(roundedRect: NSRect(x: -88.5, y: -21, width: 177, height: 42), xRadius: 5, yRadius: 5)
            digitBackground.setFill()
            digitBase2Path.fill()


            //// digitHighlight 2 Drawing
            let digitHighlight2Path = NSBezierPath(roundedRect: NSRect(x: -88.5, y: -21, width: 177, height: 42), xRadius: 5, yRadius: 5)
            highlightGradient.draw(in: digitHighlight2Path, angle: -45)

            ////// digitHighlight 2 Inner Shadow
            NSGraphicsContext.saveGraphicsState()
            NSRectClip(digitHighlight2Path.bounds)
            context.setShadow(offset: NSSize.zero, blur: 0, color: nil)

            context.setAlpha(innerStroke.shadowColor!.alphaComponent)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            let digitHighlight2OpaqueShadow = NSShadow()
            digitHighlight2OpaqueShadow.shadowColor = innerStroke.shadowColor!.withAlphaComponent(1)
            digitHighlight2OpaqueShadow.shadowOffset = innerStroke.shadowOffset
            digitHighlight2OpaqueShadow.shadowBlurRadius = innerStroke.shadowBlurRadius
            digitHighlight2OpaqueShadow.set()

            context.setBlendMode(.sourceOut)
            context.beginTransparencyLayer(auxiliaryInfo: nil)

            digitHighlight2OpaqueShadow.shadowColor!.setFill()
            digitHighlight2Path.fill()

            context.endTransparencyLayer()
            context.endTransparencyLayer()
            NSGraphicsContext.restoreGraphicsState()



            context.endTransparencyLayer()

            NSGraphicsContext.restoreGraphicsState()
        }


        if (pressed) {
            //// digitPressed
            NSGraphicsContext.saveGraphicsState()
            context.translateBy(x: bounds.minX + 95.5, y: bounds.maxY - 28)

            outerShadow.set()
            context.beginTransparencyLayer(auxiliaryInfo: nil)


            //// digitBase 3 Drawing
            let digitBase3Path = NSBezierPath(roundedRect: NSRect(x: -88.5, y: -21, width: 177, height: 42), xRadius: 5, yRadius: 5)
            digitBackground.setFill()
            digitBase3Path.fill()


            //// digitHighlight 3 Drawing
            let digitHighlight3Path = NSBezierPath(roundedRect: NSRect(x: -88.5, y: -21, width: 177, height: 42), xRadius: 5, yRadius: 5)
            highlightGradient.draw(in: digitHighlight3Path, angle: -45)

            ////// digitHighlight 3 Inner Shadow
            NSGraphicsContext.saveGraphicsState()
            NSRectClip(digitHighlight3Path.bounds)
            context.setShadow(offset: NSSize.zero, blur: 0, color: nil)

            context.setAlpha(innerStroke.shadowColor!.alphaComponent)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            let digitHighlight3OpaqueShadow = NSShadow()
            digitHighlight3OpaqueShadow.shadowColor = innerStroke.shadowColor!.withAlphaComponent(1)
            digitHighlight3OpaqueShadow.shadowOffset = innerStroke.shadowOffset
            digitHighlight3OpaqueShadow.shadowBlurRadius = innerStroke.shadowBlurRadius
            digitHighlight3OpaqueShadow.set()

            context.setBlendMode(.sourceOut)
            context.beginTransparencyLayer(auxiliaryInfo: nil)

            digitHighlight3OpaqueShadow.shadowColor!.setFill()
            digitHighlight3Path.fill()

            context.endTransparencyLayer()
            context.endTransparencyLayer()
            NSGraphicsContext.restoreGraphicsState()



            context.endTransparencyLayer()

            NSGraphicsContext.restoreGraphicsState()
        }


        //// digitLogo
        //// Shape Drawing
        let shapePath = NSBezierPath()
        shapePath.move(to: NSPoint(x: bounds.minX + 118.93, y: bounds.maxY - 13.52))
        shapePath.line(to: NSPoint(x: bounds.minX + 109.14, y: bounds.maxY - 13.52))
        shapePath.curve(to: NSPoint(x: bounds.minX + 108.51, y: bounds.maxY - 14.15), controlPoint1: NSPoint(x: bounds.minX + 108.79, y: bounds.maxY - 13.52), controlPoint2: NSPoint(x: bounds.minX + 108.51, y: bounds.maxY - 13.8))
        shapePath.line(to: NSPoint(x: bounds.minX + 108.51, y: bounds.maxY - 23.95))
        shapePath.curve(to: NSPoint(x: bounds.minX + 109.13, y: bounds.maxY - 24.54), controlPoint1: NSPoint(x: bounds.minX + 108.51, y: bounds.maxY - 24.3), controlPoint2: NSPoint(x: bounds.minX + 108.79, y: bounds.maxY - 24.56))
        shapePath.line(to: NSPoint(x: bounds.minX + 118.95, y: bounds.maxY - 23.73))
        shapePath.curve(to: NSPoint(x: bounds.minX + 119.58, y: bounds.maxY - 23.04), controlPoint1: NSPoint(x: bounds.minX + 119.3, y: bounds.maxY - 23.69), controlPoint2: NSPoint(x: bounds.minX + 119.58, y: bounds.maxY - 23.39))
        shapePath.line(to: NSPoint(x: bounds.minX + 119.58, y: bounds.maxY - 14.15))
        shapePath.curve(to: NSPoint(x: bounds.minX + 118.93, y: bounds.maxY - 13.52), controlPoint1: NSPoint(x: bounds.minX + 119.56, y: bounds.maxY - 13.8), controlPoint2: NSPoint(x: bounds.minX + 119.28, y: bounds.maxY - 13.52))
        shapePath.line(to: NSPoint(x: bounds.minX + 118.93, y: bounds.maxY - 13.52))
        shapePath.close()
        shapePath.move(to: NSPoint(x: bounds.minX + 115.04, y: bounds.maxY - 16.32))
        shapePath.line(to: NSPoint(x: bounds.minX + 117.61, y: bounds.maxY - 16.32))
        shapePath.line(to: NSPoint(x: bounds.minX + 117.61, y: bounds.maxY - 17.67))
        shapePath.line(to: NSPoint(x: bounds.minX + 115.04, y: bounds.maxY - 17.67))
        shapePath.line(to: NSPoint(x: bounds.minX + 115.04, y: bounds.maxY - 16.32))
        shapePath.line(to: NSPoint(x: bounds.minX + 115.04, y: bounds.maxY - 16.32))
        shapePath.close()
        shapePath.move(to: NSPoint(x: bounds.minX + 110.35, y: bounds.maxY - 16.32))
        shapePath.line(to: NSPoint(x: bounds.minX + 111.3, y: bounds.maxY - 16.32))
        shapePath.line(to: NSPoint(x: bounds.minX + 111.3, y: bounds.maxY - 15.39))
        shapePath.line(to: NSPoint(x: bounds.minX + 112.04, y: bounds.maxY - 15.39))
        shapePath.line(to: NSPoint(x: bounds.minX + 112.04, y: bounds.maxY - 16.32))
        shapePath.line(to: NSPoint(x: bounds.minX + 112.99, y: bounds.maxY - 16.32))
        shapePath.line(to: NSPoint(x: bounds.minX + 112.99, y: bounds.maxY - 17.04))
        shapePath.line(to: NSPoint(x: bounds.minX + 112.04, y: bounds.maxY - 17.04))
        shapePath.line(to: NSPoint(x: bounds.minX + 112.04, y: bounds.maxY - 17.97))
        shapePath.line(to: NSPoint(x: bounds.minX + 111.3, y: bounds.maxY - 17.97))
        shapePath.line(to: NSPoint(x: bounds.minX + 111.3, y: bounds.maxY - 17.04))
        shapePath.line(to: NSPoint(x: bounds.minX + 110.35, y: bounds.maxY - 17.04))
        shapePath.line(to: NSPoint(x: bounds.minX + 110.35, y: bounds.maxY - 16.32))
        shapePath.line(to: NSPoint(x: bounds.minX + 110.35, y: bounds.maxY - 16.32))
        shapePath.close()
        shapePath.move(to: NSPoint(x: bounds.minX + 113.67, y: bounds.maxY - 22.41))
        shapePath.curve(to: NSPoint(x: bounds.minX + 110.54, y: bounds.maxY - 20.95), controlPoint1: NSPoint(x: bounds.minX + 112.45, y: bounds.maxY - 22.41), controlPoint2: NSPoint(x: bounds.minX + 111.32, y: bounds.maxY - 21.87))
        shapePath.line(to: NSPoint(x: bounds.minX + 111.14, y: bounds.maxY - 20.45))
        shapePath.curve(to: NSPoint(x: bounds.minX + 113.68, y: bounds.maxY - 21.63), controlPoint1: NSPoint(x: bounds.minX + 111.77, y: bounds.maxY - 21.21), controlPoint2: NSPoint(x: bounds.minX + 112.7, y: bounds.maxY - 21.63))
        shapePath.curve(to: NSPoint(x: bounds.minX + 116.94, y: bounds.maxY - 18.94), controlPoint1: NSPoint(x: bounds.minX + 115.27, y: bounds.maxY - 21.63), controlPoint2: NSPoint(x: bounds.minX + 116.64, y: bounds.maxY - 20.5))
        shapePath.line(to: NSPoint(x: bounds.minX + 117.71, y: bounds.maxY - 19.09))
        shapePath.curve(to: NSPoint(x: bounds.minX + 113.67, y: bounds.maxY - 22.41), controlPoint1: NSPoint(x: bounds.minX + 117.34, y: bounds.maxY - 21.01), controlPoint2: NSPoint(x: bounds.minX + 115.65, y: bounds.maxY - 22.41))
        shapePath.line(to: NSPoint(x: bounds.minX + 113.67, y: bounds.maxY - 22.41))
        shapePath.close()
        shapePath.windingRule = .evenOddWindingRule
        logoWhite.setFill()
        shapePath.fill()


        //// Shape 2 Drawing
        let shape2Path = NSBezierPath()
        shape2Path.move(to: NSPoint(x: bounds.minX + 79.87, y: bounds.maxY - 33.59))
        shape2Path.line(to: NSPoint(x: bounds.minX + 79.77, y: bounds.maxY - 33.59))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 76.05, y: bounds.maxY - 35.39), controlPoint1: NSPoint(x: bounds.minX + 78.94, y: bounds.maxY - 34.8), controlPoint2: NSPoint(x: bounds.minX + 77.7, y: bounds.maxY - 35.39))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 72.44, y: bounds.maxY - 33.81), controlPoint1: NSPoint(x: bounds.minX + 74.51, y: bounds.maxY - 35.39), controlPoint2: NSPoint(x: bounds.minX + 73.29, y: bounds.maxY - 34.86))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 71.16, y: bounds.maxY - 29.29), controlPoint1: NSPoint(x: bounds.minX + 71.59, y: bounds.maxY - 32.74), controlPoint2: NSPoint(x: bounds.minX + 71.16, y: bounds.maxY - 31.25))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 72.44, y: bounds.maxY - 24.76), controlPoint1: NSPoint(x: bounds.minX + 71.16, y: bounds.maxY - 27.34), controlPoint2: NSPoint(x: bounds.minX + 71.59, y: bounds.maxY - 25.84))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 76.04, y: bounds.maxY - 23.15), controlPoint1: NSPoint(x: bounds.minX + 73.29, y: bounds.maxY - 23.67), controlPoint2: NSPoint(x: bounds.minX + 74.51, y: bounds.maxY - 23.15))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 79.73, y: bounds.maxY - 24.89), controlPoint1: NSPoint(x: bounds.minX + 77.64, y: bounds.maxY - 23.15), controlPoint2: NSPoint(x: bounds.minX + 78.87, y: bounds.maxY - 23.73))
        shape2Path.line(to: NSPoint(x: bounds.minX + 79.88, y: bounds.maxY - 24.89))
        shape2Path.line(to: NSPoint(x: bounds.minX + 79.8, y: bounds.maxY - 24.04))
        shape2Path.line(to: NSPoint(x: bounds.minX + 79.76, y: bounds.maxY - 23.21))
        shape2Path.line(to: NSPoint(x: bounds.minX + 79.76, y: bounds.maxY - 18.39))
        shape2Path.line(to: NSPoint(x: bounds.minX + 81.56, y: bounds.maxY - 18.39))
        shape2Path.line(to: NSPoint(x: bounds.minX + 81.56, y: bounds.maxY - 35.18))
        shape2Path.line(to: NSPoint(x: bounds.minX + 80.1, y: bounds.maxY - 35.18))
        shape2Path.line(to: NSPoint(x: bounds.minX + 79.87, y: bounds.maxY - 33.59))
        shape2Path.line(to: NSPoint(x: bounds.minX + 79.87, y: bounds.maxY - 33.59))
        shape2Path.close()
        shape2Path.move(to: NSPoint(x: bounds.minX + 76.29, y: bounds.maxY - 33.9))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 78.96, y: bounds.maxY - 32.91), controlPoint1: NSPoint(x: bounds.minX + 77.51, y: bounds.maxY - 33.9), controlPoint2: NSPoint(x: bounds.minX + 78.4, y: bounds.maxY - 33.57))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 79.79, y: bounds.maxY - 29.69), controlPoint1: NSPoint(x: bounds.minX + 79.52, y: bounds.maxY - 32.25), controlPoint2: NSPoint(x: bounds.minX + 79.79, y: bounds.maxY - 31.18))
        shape2Path.line(to: NSPoint(x: bounds.minX + 79.79, y: bounds.maxY - 29.32))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 78.95, y: bounds.maxY - 25.73), controlPoint1: NSPoint(x: bounds.minX + 79.79, y: bounds.maxY - 27.64), controlPoint2: NSPoint(x: bounds.minX + 79.52, y: bounds.maxY - 26.45))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 76.27, y: bounds.maxY - 24.67), controlPoint1: NSPoint(x: bounds.minX + 78.4, y: bounds.maxY - 25.02), controlPoint2: NSPoint(x: bounds.minX + 77.51, y: bounds.maxY - 24.67))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 73.86, y: bounds.maxY - 25.89), controlPoint1: NSPoint(x: bounds.minX + 75.22, y: bounds.maxY - 24.67), controlPoint2: NSPoint(x: bounds.minX + 74.41, y: bounds.maxY - 25.07))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 73.02, y: bounds.maxY - 29.34), controlPoint1: NSPoint(x: bounds.minX + 73.32, y: bounds.maxY - 26.71), controlPoint2: NSPoint(x: bounds.minX + 73.02, y: bounds.maxY - 27.85))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 73.85, y: bounds.maxY - 32.77), controlPoint1: NSPoint(x: bounds.minX + 73.02, y: bounds.maxY - 30.85), controlPoint2: NSPoint(x: bounds.minX + 73.29, y: bounds.maxY - 31.99))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 76.29, y: bounds.maxY - 33.9), controlPoint1: NSPoint(x: bounds.minX + 74.42, y: bounds.maxY - 33.51), controlPoint2: NSPoint(x: bounds.minX + 75.22, y: bounds.maxY - 33.9))
        shape2Path.line(to: NSPoint(x: bounds.minX + 76.29, y: bounds.maxY - 33.9))
        shape2Path.close()
        shape2Path.move(to: NSPoint(x: bounds.minX + 85.28, y: bounds.maxY - 35.18))
        shape2Path.line(to: NSPoint(x: bounds.minX + 83.48, y: bounds.maxY - 35.18))
        shape2Path.line(to: NSPoint(x: bounds.minX + 83.48, y: bounds.maxY - 23.36))
        shape2Path.line(to: NSPoint(x: bounds.minX + 85.28, y: bounds.maxY - 23.36))
        shape2Path.line(to: NSPoint(x: bounds.minX + 85.28, y: bounds.maxY - 35.18))
        shape2Path.line(to: NSPoint(x: bounds.minX + 85.28, y: bounds.maxY - 35.18))
        shape2Path.close()
        shape2Path.move(to: NSPoint(x: bounds.minX + 97.09, y: bounds.maxY - 23.34))
        shape2Path.line(to: NSPoint(x: bounds.minX + 97.09, y: bounds.maxY - 24.49))
        shape2Path.line(to: NSPoint(x: bounds.minX + 94.91, y: bounds.maxY - 24.75))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 95.46, y: bounds.maxY - 25.73), controlPoint1: NSPoint(x: bounds.minX + 95.11, y: bounds.maxY - 25.01), controlPoint2: NSPoint(x: bounds.minX + 95.28, y: bounds.maxY - 25.33))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 95.69, y: bounds.maxY - 27.11), controlPoint1: NSPoint(x: bounds.minX + 95.61, y: bounds.maxY - 26.14), controlPoint2: NSPoint(x: bounds.minX + 95.69, y: bounds.maxY - 26.59))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 94.51, y: bounds.maxY - 29.87), controlPoint1: NSPoint(x: bounds.minX + 95.69, y: bounds.maxY - 28.26), controlPoint2: NSPoint(x: bounds.minX + 95.28, y: bounds.maxY - 29.19))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 91.25, y: bounds.maxY - 30.91), controlPoint1: NSPoint(x: bounds.minX + 93.72, y: bounds.maxY - 30.56), controlPoint2: NSPoint(x: bounds.minX + 92.64, y: bounds.maxY - 30.91))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 90.27, y: bounds.maxY - 30.82), controlPoint1: NSPoint(x: bounds.minX + 90.9, y: bounds.maxY - 30.91), controlPoint2: NSPoint(x: bounds.minX + 90.56, y: bounds.maxY - 30.87))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 89.12, y: bounds.maxY - 32.34), controlPoint1: NSPoint(x: bounds.minX + 89.5, y: bounds.maxY - 31.23), controlPoint2: NSPoint(x: bounds.minX + 89.12, y: bounds.maxY - 31.73))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 89.53, y: bounds.maxY - 33.06), controlPoint1: NSPoint(x: bounds.minX + 89.12, y: bounds.maxY - 32.67), controlPoint2: NSPoint(x: bounds.minX + 89.25, y: bounds.maxY - 32.9))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 90.89, y: bounds.maxY - 33.29), controlPoint1: NSPoint(x: bounds.minX + 89.79, y: bounds.maxY - 33.21), controlPoint2: NSPoint(x: bounds.minX + 90.24, y: bounds.maxY - 33.29))
        shape2Path.line(to: NSPoint(x: bounds.minX + 93, y: bounds.maxY - 33.29))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 95.95, y: bounds.maxY - 34.1), controlPoint1: NSPoint(x: bounds.minX + 94.28, y: bounds.maxY - 33.29), controlPoint2: NSPoint(x: bounds.minX + 95.26, y: bounds.maxY - 33.55))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 96.98, y: bounds.maxY - 36.45), controlPoint1: NSPoint(x: bounds.minX + 96.64, y: bounds.maxY - 34.64), controlPoint2: NSPoint(x: bounds.minX + 96.98, y: bounds.maxY - 35.43))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 95.39, y: bounds.maxY - 39.44), controlPoint1: NSPoint(x: bounds.minX + 96.98, y: bounds.maxY - 37.75), controlPoint2: NSPoint(x: bounds.minX + 96.44, y: bounds.maxY - 38.76))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 90.79, y: bounds.maxY - 40.47), controlPoint1: NSPoint(x: bounds.minX + 94.34, y: bounds.maxY - 40.13), controlPoint2: NSPoint(x: bounds.minX + 92.8, y: bounds.maxY - 40.47))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 87.22, y: bounds.maxY - 39.61), controlPoint1: NSPoint(x: bounds.minX + 89.24, y: bounds.maxY - 40.47), controlPoint2: NSPoint(x: bounds.minX + 88.05, y: bounds.maxY - 40.18))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 85.96, y: bounds.maxY - 37.17), controlPoint1: NSPoint(x: bounds.minX + 86.37, y: bounds.maxY - 39.04), controlPoint2: NSPoint(x: bounds.minX + 85.96, y: bounds.maxY - 38.22))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 86.65, y: bounds.maxY - 35.3), controlPoint1: NSPoint(x: bounds.minX + 85.96, y: bounds.maxY - 36.46), controlPoint2: NSPoint(x: bounds.minX + 86.19, y: bounds.maxY - 35.83))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 88.6, y: bounds.maxY - 34.24), controlPoint1: NSPoint(x: bounds.minX + 87.12, y: bounds.maxY - 34.77), controlPoint2: NSPoint(x: bounds.minX + 87.75, y: bounds.maxY - 34.42))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 87.83, y: bounds.maxY - 33.6), controlPoint1: NSPoint(x: bounds.minX + 88.3, y: bounds.maxY - 34.11), controlPoint2: NSPoint(x: bounds.minX + 88.05, y: bounds.maxY - 33.89))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 87.53, y: bounds.maxY - 32.6), controlPoint1: NSPoint(x: bounds.minX + 87.62, y: bounds.maxY - 33.32), controlPoint2: NSPoint(x: bounds.minX + 87.53, y: bounds.maxY - 32.98))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 87.87, y: bounds.maxY - 31.46), controlPoint1: NSPoint(x: bounds.minX + 87.53, y: bounds.maxY - 32.17), controlPoint2: NSPoint(x: bounds.minX + 87.63, y: bounds.maxY - 31.8))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 88.96, y: bounds.maxY - 30.52), controlPoint1: NSPoint(x: bounds.minX + 88.1, y: bounds.maxY - 31.13), controlPoint2: NSPoint(x: bounds.minX + 88.47, y: bounds.maxY - 30.82))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 87.46, y: bounds.maxY - 29.24), controlPoint1: NSPoint(x: bounds.minX + 88.35, y: bounds.maxY - 30.26), controlPoint2: NSPoint(x: bounds.minX + 87.85, y: bounds.maxY - 29.83))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 86.89, y: bounds.maxY - 27.15), controlPoint1: NSPoint(x: bounds.minX + 87.07, y: bounds.maxY - 28.63), controlPoint2: NSPoint(x: bounds.minX + 86.89, y: bounds.maxY - 27.95))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 88.05, y: bounds.maxY - 24.16), controlPoint1: NSPoint(x: bounds.minX + 86.89, y: bounds.maxY - 25.87), controlPoint2: NSPoint(x: bounds.minX + 87.28, y: bounds.maxY - 24.85))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 91.35, y: bounds.maxY - 23.11), controlPoint1: NSPoint(x: bounds.minX + 88.83, y: bounds.maxY - 23.46), controlPoint2: NSPoint(x: bounds.minX + 89.93, y: bounds.maxY - 23.11))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 93.02, y: bounds.maxY - 23.33), controlPoint1: NSPoint(x: bounds.minX + 91.97, y: bounds.maxY - 23.11), controlPoint2: NSPoint(x: bounds.minX + 92.52, y: bounds.maxY - 23.19))
        shape2Path.line(to: NSPoint(x: bounds.minX + 97.09, y: bounds.maxY - 23.34))
        shape2Path.line(to: NSPoint(x: bounds.minX + 97.09, y: bounds.maxY - 23.34))
        shape2Path.close()
        shape2Path.move(to: NSPoint(x: bounds.minX + 87.67, y: bounds.maxY - 37.16))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 88.48, y: bounds.maxY - 38.61), controlPoint1: NSPoint(x: bounds.minX + 87.67, y: bounds.maxY - 37.79), controlPoint2: NSPoint(x: bounds.minX + 87.93, y: bounds.maxY - 38.29))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 90.8, y: bounds.maxY - 39.11), controlPoint1: NSPoint(x: bounds.minX + 89.02, y: bounds.maxY - 38.94), controlPoint2: NSPoint(x: bounds.minX + 89.79, y: bounds.maxY - 39.11))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 94.15, y: bounds.maxY - 38.43), controlPoint1: NSPoint(x: bounds.minX + 92.31, y: bounds.maxY - 39.11), controlPoint2: NSPoint(x: bounds.minX + 93.41, y: bounds.maxY - 38.89))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 95.23, y: bounds.maxY - 36.6), controlPoint1: NSPoint(x: bounds.minX + 94.87, y: bounds.maxY - 37.98), controlPoint2: NSPoint(x: bounds.minX + 95.23, y: bounds.maxY - 37.37))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 94.63, y: bounds.maxY - 35.26), controlPoint1: NSPoint(x: bounds.minX + 95.23, y: bounds.maxY - 35.97), controlPoint2: NSPoint(x: bounds.minX + 95.03, y: bounds.maxY - 35.52))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 92.39, y: bounds.maxY - 34.89), controlPoint1: NSPoint(x: bounds.minX + 94.22, y: bounds.maxY - 35.02), controlPoint2: NSPoint(x: bounds.minX + 93.48, y: bounds.maxY - 34.89))
        shape2Path.line(to: NSPoint(x: bounds.minX + 90.24, y: bounds.maxY - 34.89))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 88.35, y: bounds.maxY - 35.47), controlPoint1: NSPoint(x: bounds.minX + 89.42, y: bounds.maxY - 34.89), controlPoint2: NSPoint(x: bounds.minX + 88.8, y: bounds.maxY - 35.08))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 87.67, y: bounds.maxY - 37.16), controlPoint1: NSPoint(x: bounds.minX + 87.89, y: bounds.maxY - 35.87), controlPoint2: NSPoint(x: bounds.minX + 87.67, y: bounds.maxY - 36.43))
        shape2Path.line(to: NSPoint(x: bounds.minX + 87.67, y: bounds.maxY - 37.16))
        shape2Path.close()
        shape2Path.move(to: NSPoint(x: bounds.minX + 88.63, y: bounds.maxY - 27.14))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 89.33, y: bounds.maxY - 29.03), controlPoint1: NSPoint(x: bounds.minX + 88.63, y: bounds.maxY - 27.97), controlPoint2: NSPoint(x: bounds.minX + 88.87, y: bounds.maxY - 28.59))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 91.28, y: bounds.maxY - 29.66), controlPoint1: NSPoint(x: bounds.minX + 89.8, y: bounds.maxY - 29.44), controlPoint2: NSPoint(x: bounds.minX + 90.45, y: bounds.maxY - 29.66))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 93.89, y: bounds.maxY - 27.12), controlPoint1: NSPoint(x: bounds.minX + 93.02, y: bounds.maxY - 29.66), controlPoint2: NSPoint(x: bounds.minX + 93.89, y: bounds.maxY - 28.81))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 91.24, y: bounds.maxY - 24.45), controlPoint1: NSPoint(x: bounds.minX + 93.89, y: bounds.maxY - 25.34), controlPoint2: NSPoint(x: bounds.minX + 93.01, y: bounds.maxY - 24.45))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 89.29, y: bounds.maxY - 25.15), controlPoint1: NSPoint(x: bounds.minX + 90.4, y: bounds.maxY - 24.45), controlPoint2: NSPoint(x: bounds.minX + 89.75, y: bounds.maxY - 24.69))
        shape2Path.curve(to: NSPoint(x: bounds.minX + 88.63, y: bounds.maxY - 27.14), controlPoint1: NSPoint(x: bounds.minX + 88.87, y: bounds.maxY - 25.58), controlPoint2: NSPoint(x: bounds.minX + 88.63, y: bounds.maxY - 26.24))
        shape2Path.line(to: NSPoint(x: bounds.minX + 88.63, y: bounds.maxY - 27.14))
        shape2Path.close()
        shape2Path.move(to: NSPoint(x: bounds.minX + 100.21, y: bounds.maxY - 35.18))
        shape2Path.line(to: NSPoint(x: bounds.minX + 98.42, y: bounds.maxY - 35.18))
        shape2Path.line(to: NSPoint(x: bounds.minX + 98.42, y: bounds.maxY - 23.36))
        shape2Path.line(to: NSPoint(x: bounds.minX + 100.21, y: bounds.maxY - 23.36))
        shape2Path.line(to: NSPoint(x: bounds.minX + 100.21, y: bounds.maxY - 35.18))
        shape2Path.line(to: NSPoint(x: bounds.minX + 100.21, y: bounds.maxY - 35.18))
        shape2Path.close()
        shape2Path.windingRule = .evenOddWindingRule
        logoWhite.setFill()
        shape2Path.fill()


        //// Shape 3 Drawing
        let shape3Path = NSBezierPath(rect: NSRect(x: bounds.minX + 79.78, y: bounds.minY + bounds.height - 26, width: 1.45, height: 6.1))
        logoWhite.setFill()
        shape3Path.fill()


        //// Oval 2 Drawing
        let oval2Path = NSBezierPath(ovalIn: NSRect(x: bounds.minX + 83.35, y: bounds.minY + bounds.height - 22.06, width: 2.05, height: 2.05))
        logoWhite.setFill()
        oval2Path.fill()


        //// Oval 4 Drawing
        let oval4Path = NSBezierPath(ovalIn: NSRect(x: bounds.minX + 98.29, y: bounds.minY + bounds.height - 22.06, width: 2.05, height: 2.05))
        logoWhite.setFill()
        oval4Path.fill()


        //// Shape 4 Drawing
        let shape4Path = NSBezierPath()
        shape4Path.move(to: NSPoint(x: bounds.minX + 106.75, y: bounds.maxY - 33.91))
        shape4Path.curve(to: NSPoint(x: bounds.minX + 105.21, y: bounds.maxY - 33.34), controlPoint1: NSPoint(x: bounds.minX + 106.17, y: bounds.maxY - 33.91), controlPoint2: NSPoint(x: bounds.minX + 105.54, y: bounds.maxY - 33.73))
        shape4Path.curve(to: NSPoint(x: bounds.minX + 104.71, y: bounds.maxY - 31.71), controlPoint1: NSPoint(x: bounds.minX + 104.87, y: bounds.maxY - 32.95), controlPoint2: NSPoint(x: bounds.minX + 104.71, y: bounds.maxY - 32.42))
        shape4Path.line(to: NSPoint(x: bounds.minX + 104.71, y: bounds.maxY - 24.74))
        shape4Path.line(to: NSPoint(x: bounds.minX + 106.87, y: bounds.maxY - 24.74))
        shape4Path.line(to: NSPoint(x: bounds.minX + 106.87, y: bounds.maxY - 23.34))
        shape4Path.line(to: NSPoint(x: bounds.minX + 104.69, y: bounds.maxY - 23.34))
        shape4Path.line(to: NSPoint(x: bounds.minX + 104.69, y: bounds.maxY - 20.6))
        shape4Path.line(to: NSPoint(x: bounds.minX + 103.65, y: bounds.maxY - 20.6))
        shape4Path.line(to: NSPoint(x: bounds.minX + 102.9, y: bounds.maxY - 23.14))
        shape4Path.line(to: NSPoint(x: bounds.minX + 101.2, y: bounds.maxY - 23.88))
        shape4Path.line(to: NSPoint(x: bounds.minX + 101.2, y: bounds.maxY - 24.73))
        shape4Path.line(to: NSPoint(x: bounds.minX + 102.9, y: bounds.maxY - 24.73))
        shape4Path.line(to: NSPoint(x: bounds.minX + 102.9, y: bounds.maxY - 31.77))
        shape4Path.curve(to: NSPoint(x: bounds.minX + 106.33, y: bounds.maxY - 35.38), controlPoint1: NSPoint(x: bounds.minX + 102.9, y: bounds.maxY - 34.18), controlPoint2: NSPoint(x: bounds.minX + 104.04, y: bounds.maxY - 35.38))
        shape4Path.curve(to: NSPoint(x: bounds.minX + 106.73, y: bounds.maxY - 35.36), controlPoint1: NSPoint(x: bounds.minX + 106.5, y: bounds.maxY - 35.38), controlPoint2: NSPoint(x: bounds.minX + 106.55, y: bounds.maxY - 35.37))
        shape4Path.curve(to: NSPoint(x: bounds.minX + 106.75, y: bounds.maxY - 33.91), controlPoint1: NSPoint(x: bounds.minX + 106.75, y: bounds.maxY - 33.91), controlPoint2: NSPoint(x: bounds.minX + 106.76, y: bounds.maxY - 33.91))
        shape4Path.line(to: NSPoint(x: bounds.minX + 106.75, y: bounds.maxY - 33.91))
        shape4Path.close()
        shape4Path.windingRule = .evenOddWindingRule
        logoWhite.setFill()
        shape4Path.fill()
    }

    public static func drawDiscoverButton(bounds: NSRect = NSRect(x: 0, y: 0, width: 191, height: 56), original: Bool = true, hover: Bool = false, pressed: Bool = false) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext

        //// Color Declarations
        let highlightGradientColor = NSColor(deviceRed: 1, green: 1, blue: 1, alpha: 0.09)
        let highlightGradientColor2 = NSColor(deviceRed: 1, green: 1, blue: 1, alpha: 0)
        let shadow2Color = NSColor(deviceRed: 1, green: 1, blue: 1, alpha: 0.36)
        let discoverLogoGradientColor1 = NSColor(deviceRed: 0.976, green: 0.627, blue: 0.125, alpha: 1)
        let discoverLogoGradientColor2 = NSColor(deviceRed: 0.965, green: 0.533, blue: 0.125, alpha: 1)
        let discoverLogoGradientColor3 = NSColor(deviceRed: 0.957, green: 0.459, blue: 0.129, alpha: 1)
        let discoverLogoFill = NSColor(deviceRed: 0.941, green: 0.949, blue: 0.961, alpha: 1)
        let discoverBackground = NSColor(deviceRed: 0.204, green: 0.204, blue: 0.22, alpha: 1)

        //// Gradient Declarations
        let highlightGradient = NSGradient(starting: highlightGradientColor, ending: highlightGradientColor2)!
        let discoverLogoGradient = NSGradient(colors: [discoverLogoGradientColor1, discoverLogoGradientColor2, discoverLogoGradientColor3], atLocations: [0.0, 0.60, 1.0], colorSpace: NSColorSpace.genericRGB)!

        //// Shadow Declarations
        let outerShadow = NSShadow()
        outerShadow.shadowColor = NSColor.black
        outerShadow.shadowOffset = NSSize(width: 0, height: 0)
        outerShadow.shadowBlurRadius = 0.5
        let innerStroke = NSShadow()
        innerStroke.shadowColor = shadow2Color
        innerStroke.shadowOffset = NSSize(width: 0, height: 0)
        innerStroke.shadowBlurRadius = 0.5

        if (original) {
            //// discover
            NSGraphicsContext.saveGraphicsState()
            context.translateBy(x: bounds.minX + 95.5, y: bounds.maxY - 28)

            outerShadow.set()
            context.beginTransparencyLayer(auxiliaryInfo: nil)


            //// discoverBase Drawing
            let discoverBasePath = NSBezierPath(roundedRect: NSRect(x: -88.5, y: -21, width: 177, height: 42), xRadius: 5, yRadius: 5)
            discoverBackground.setFill()
            discoverBasePath.fill()


            //// discoverHighlight Drawing
            let discoverHighlightPath = NSBezierPath(roundedRect: NSRect(x: -88.5, y: -21, width: 177, height: 42), xRadius: 5, yRadius: 5)
            highlightGradient.draw(in: discoverHighlightPath, angle: -45)

            ////// discoverHighlight Inner Shadow
            NSGraphicsContext.saveGraphicsState()
            NSRectClip(discoverHighlightPath.bounds)
            context.setShadow(offset: NSSize.zero, blur: 0, color: nil)

            context.setAlpha(innerStroke.shadowColor!.alphaComponent)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            let discoverHighlightOpaqueShadow = NSShadow()
            discoverHighlightOpaqueShadow.shadowColor = innerStroke.shadowColor!.withAlphaComponent(1)
            discoverHighlightOpaqueShadow.shadowOffset = innerStroke.shadowOffset
            discoverHighlightOpaqueShadow.shadowBlurRadius = innerStroke.shadowBlurRadius
            discoverHighlightOpaqueShadow.set()

            context.setBlendMode(.sourceOut)
            context.beginTransparencyLayer(auxiliaryInfo: nil)

            discoverHighlightOpaqueShadow.shadowColor!.setFill()
            discoverHighlightPath.fill()

            context.endTransparencyLayer()
            context.endTransparencyLayer()
            NSGraphicsContext.restoreGraphicsState()



            context.endTransparencyLayer()

            NSGraphicsContext.restoreGraphicsState()
        }


        if (hover) {
            //// discoverHover
            NSGraphicsContext.saveGraphicsState()
            context.translateBy(x: bounds.minX + 95.5, y: bounds.maxY - 28)
            context.scaleBy(x: 1.05, y: 1.05)

            outerShadow.set()
            context.beginTransparencyLayer(auxiliaryInfo: nil)


            //// discoverBase 2 Drawing
            let discoverBase2Path = NSBezierPath(roundedRect: NSRect(x: -88.5, y: -21, width: 177, height: 42), xRadius: 5, yRadius: 5)
            discoverBackground.setFill()
            discoverBase2Path.fill()


            //// discoverHighlight 2 Drawing
            let discoverHighlight2Path = NSBezierPath(roundedRect: NSRect(x: -88.5, y: -21, width: 177, height: 42), xRadius: 5, yRadius: 5)
            highlightGradient.draw(in: discoverHighlight2Path, angle: -45)

            ////// discoverHighlight 2 Inner Shadow
            NSGraphicsContext.saveGraphicsState()
            NSRectClip(discoverHighlight2Path.bounds)
            context.setShadow(offset: NSSize.zero, blur: 0, color: nil)

            context.setAlpha(innerStroke.shadowColor!.alphaComponent)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            let discoverHighlight2OpaqueShadow = NSShadow()
            discoverHighlight2OpaqueShadow.shadowColor = innerStroke.shadowColor!.withAlphaComponent(1)
            discoverHighlight2OpaqueShadow.shadowOffset = innerStroke.shadowOffset
            discoverHighlight2OpaqueShadow.shadowBlurRadius = innerStroke.shadowBlurRadius
            discoverHighlight2OpaqueShadow.set()

            context.setBlendMode(.sourceOut)
            context.beginTransparencyLayer(auxiliaryInfo: nil)

            discoverHighlight2OpaqueShadow.shadowColor!.setFill()
            discoverHighlight2Path.fill()

            context.endTransparencyLayer()
            context.endTransparencyLayer()
            NSGraphicsContext.restoreGraphicsState()



            context.endTransparencyLayer()

            NSGraphicsContext.restoreGraphicsState()
        }


        if (pressed) {
            //// discoverPressed
            NSGraphicsContext.saveGraphicsState()
            context.translateBy(x: bounds.minX + 95.5, y: bounds.maxY - 28)

            outerShadow.set()
            context.beginTransparencyLayer(auxiliaryInfo: nil)


            //// discoverBase 3 Drawing
            let discoverBase3Path = NSBezierPath(roundedRect: NSRect(x: -88.5, y: -21, width: 177, height: 42), xRadius: 5, yRadius: 5)
            discoverBackground.setFill()
            discoverBase3Path.fill()


            //// discoverHighlight 3 Drawing
            let discoverHighlight3Path = NSBezierPath(roundedRect: NSRect(x: -88.5, y: -21, width: 177, height: 42), xRadius: 5, yRadius: 5)
            highlightGradient.draw(in: discoverHighlight3Path, angle: -45)

            ////// discoverHighlight 3 Inner Shadow
            NSGraphicsContext.saveGraphicsState()
            NSRectClip(discoverHighlight3Path.bounds)
            context.setShadow(offset: NSSize.zero, blur: 0, color: nil)

            context.setAlpha(innerStroke.shadowColor!.alphaComponent)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            let discoverHighlight3OpaqueShadow = NSShadow()
            discoverHighlight3OpaqueShadow.shadowColor = innerStroke.shadowColor!.withAlphaComponent(1)
            discoverHighlight3OpaqueShadow.shadowOffset = innerStroke.shadowOffset
            discoverHighlight3OpaqueShadow.shadowBlurRadius = innerStroke.shadowBlurRadius
            discoverHighlight3OpaqueShadow.set()

            context.setBlendMode(.sourceOut)
            context.beginTransparencyLayer(auxiliaryInfo: nil)

            discoverHighlight3OpaqueShadow.shadowColor!.setFill()
            discoverHighlight3Path.fill()

            context.endTransparencyLayer()
            context.endTransparencyLayer()
            NSGraphicsContext.restoreGraphicsState()



            context.endTransparencyLayer()

            NSGraphicsContext.restoreGraphicsState()
        }


        //// discoverLogo
        //// logo Drawing
        let logoPath = NSBezierPath()
        logoPath.move(to: NSPoint(x: bounds.minX + 58.26, y: bounds.maxY - 20.82))
        logoPath.line(to: NSPoint(x: bounds.minX + 54.5, y: bounds.maxY - 20.82))
        logoPath.line(to: NSPoint(x: bounds.minX + 54.5, y: bounds.maxY - 34.54))
        logoPath.line(to: NSPoint(x: bounds.minX + 58.26, y: bounds.maxY - 34.54))
        logoPath.curve(to: NSPoint(x: bounds.minX + 62.94, y: bounds.maxY - 32.95), controlPoint1: NSPoint(x: bounds.minX + 60.24, y: bounds.maxY - 34.54), controlPoint2: NSPoint(x: bounds.minX + 61.72, y: bounds.maxY - 34.06))
        logoPath.curve(to: NSPoint(x: bounds.minX + 65.33, y: bounds.maxY - 27.71), controlPoint1: NSPoint(x: bounds.minX + 64.46, y: bounds.maxY - 31.68), controlPoint2: NSPoint(x: bounds.minX + 65.33, y: bounds.maxY - 29.72))
        logoPath.curve(to: NSPoint(x: bounds.minX + 58.26, y: bounds.maxY - 20.82), controlPoint1: NSPoint(x: bounds.minX + 65.33, y: bounds.maxY - 23.63), controlPoint2: NSPoint(x: bounds.minX + 62.43, y: bounds.maxY - 20.82))
        logoPath.line(to: NSPoint(x: bounds.minX + 58.26, y: bounds.maxY - 20.82))
        logoPath.close()
        logoPath.move(to: NSPoint(x: bounds.minX + 61.26, y: bounds.maxY - 31.1))
        logoPath.curve(to: NSPoint(x: bounds.minX + 57.75, y: bounds.maxY - 32.21), controlPoint1: NSPoint(x: bounds.minX + 60.45, y: bounds.maxY - 31.84), controlPoint2: NSPoint(x: bounds.minX + 59.43, y: bounds.maxY - 32.21))
        logoPath.line(to: NSPoint(x: bounds.minX + 57.04, y: bounds.maxY - 32.21))
        logoPath.line(to: NSPoint(x: bounds.minX + 57.04, y: bounds.maxY - 23.15))
        logoPath.line(to: NSPoint(x: bounds.minX + 57.75, y: bounds.maxY - 23.15))
        logoPath.curve(to: NSPoint(x: bounds.minX + 61.26, y: bounds.maxY - 24.26), controlPoint1: NSPoint(x: bounds.minX + 59.43, y: bounds.maxY - 23.15), controlPoint2: NSPoint(x: bounds.minX + 60.4, y: bounds.maxY - 23.47))
        logoPath.curve(to: NSPoint(x: bounds.minX + 62.68, y: bounds.maxY - 27.65), controlPoint1: NSPoint(x: bounds.minX + 62.13, y: bounds.maxY - 25.11), controlPoint2: NSPoint(x: bounds.minX + 62.68, y: bounds.maxY - 26.38))
        logoPath.curve(to: NSPoint(x: bounds.minX + 61.26, y: bounds.maxY - 31.1), controlPoint1: NSPoint(x: bounds.minX + 62.68, y: bounds.maxY - 28.98), controlPoint2: NSPoint(x: bounds.minX + 62.13, y: bounds.maxY - 30.3))
        logoPath.close()
        logoPath.move(to: NSPoint(x: bounds.minX + 66.5, y: bounds.maxY - 20.82))
        logoPath.line(to: NSPoint(x: bounds.minX + 69.04, y: bounds.maxY - 20.82))
        logoPath.line(to: NSPoint(x: bounds.minX + 69.04, y: bounds.maxY - 34.54))
        logoPath.line(to: NSPoint(x: bounds.minX + 66.5, y: bounds.maxY - 34.54))
        logoPath.line(to: NSPoint(x: bounds.minX + 66.5, y: bounds.maxY - 20.82))
        logoPath.close()
        logoPath.move(to: NSPoint(x: bounds.minX + 75.34, y: bounds.maxY - 26.06))
        logoPath.curve(to: NSPoint(x: bounds.minX + 79.16, y: bounds.maxY - 30.25), controlPoint1: NSPoint(x: bounds.minX + 78.24, y: bounds.maxY - 27.18), controlPoint2: NSPoint(x: bounds.minX + 79.11, y: bounds.maxY - 28.18))
        logoPath.curve(to: NSPoint(x: bounds.minX + 74.63, y: bounds.maxY - 34.75), controlPoint1: NSPoint(x: bounds.minX + 79.16, y: bounds.maxY - 32.9), controlPoint2: NSPoint(x: bounds.minX + 77.27, y: bounds.maxY - 34.75))
        logoPath.curve(to: NSPoint(x: bounds.minX + 70.06, y: bounds.maxY - 32.16), controlPoint1: NSPoint(x: bounds.minX + 72.65, y: bounds.maxY - 34.75), controlPoint2: NSPoint(x: bounds.minX + 71.23, y: bounds.maxY - 33.96))
        logoPath.line(to: NSPoint(x: bounds.minX + 71.73, y: bounds.maxY - 30.51))
        logoPath.curve(to: NSPoint(x: bounds.minX + 74.53, y: bounds.maxY - 32.37), controlPoint1: NSPoint(x: bounds.minX + 72.34, y: bounds.maxY - 31.73), controlPoint2: NSPoint(x: bounds.minX + 73.31, y: bounds.maxY - 32.37))
        logoPath.curve(to: NSPoint(x: bounds.minX + 76.51, y: bounds.maxY - 30.41), controlPoint1: NSPoint(x: bounds.minX + 75.65, y: bounds.maxY - 32.37), controlPoint2: NSPoint(x: bounds.minX + 76.51, y: bounds.maxY - 31.52))
        logoPath.curve(to: NSPoint(x: bounds.minX + 75.75, y: bounds.maxY - 28.98), controlPoint1: NSPoint(x: bounds.minX + 76.51, y: bounds.maxY - 29.83), controlPoint2: NSPoint(x: bounds.minX + 76.26, y: bounds.maxY - 29.35))
        logoPath.curve(to: NSPoint(x: bounds.minX + 73.97, y: bounds.maxY - 28.18), controlPoint1: NSPoint(x: bounds.minX + 75.5, y: bounds.maxY - 28.82), controlPoint2: NSPoint(x: bounds.minX + 74.99, y: bounds.maxY - 28.55))
        logoPath.curve(to: NSPoint(x: bounds.minX + 70.72, y: bounds.maxY - 24.42), controlPoint1: NSPoint(x: bounds.minX + 71.53, y: bounds.maxY - 27.28), controlPoint2: NSPoint(x: bounds.minX + 70.72, y: bounds.maxY - 26.33))
        logoPath.curve(to: NSPoint(x: bounds.minX + 74.83, y: bounds.maxY - 20.5), controlPoint1: NSPoint(x: bounds.minX + 70.72, y: bounds.maxY - 22.2), controlPoint2: NSPoint(x: bounds.minX + 72.5, y: bounds.maxY - 20.5))
        logoPath.curve(to: NSPoint(x: bounds.minX + 78.7, y: bounds.maxY - 22.04), controlPoint1: NSPoint(x: bounds.minX + 76.26, y: bounds.maxY - 20.5), controlPoint2: NSPoint(x: bounds.minX + 77.58, y: bounds.maxY - 21.03))
        logoPath.line(to: NSPoint(x: bounds.minX + 77.38, y: bounds.maxY - 23.89))
        logoPath.curve(to: NSPoint(x: bounds.minX + 75.29, y: bounds.maxY - 22.78), controlPoint1: NSPoint(x: bounds.minX + 76.72, y: bounds.maxY - 23.1), controlPoint2: NSPoint(x: bounds.minX + 76.05, y: bounds.maxY - 22.78))
        logoPath.curve(to: NSPoint(x: bounds.minX + 73.36, y: bounds.maxY - 24.32), controlPoint1: NSPoint(x: bounds.minX + 74.17, y: bounds.maxY - 22.78), controlPoint2: NSPoint(x: bounds.minX + 73.36, y: bounds.maxY - 23.47))
        logoPath.curve(to: NSPoint(x: bounds.minX + 75.34, y: bounds.maxY - 26.06), controlPoint1: NSPoint(x: bounds.minX + 73.36, y: bounds.maxY - 25.06), controlPoint2: NSPoint(x: bounds.minX + 73.82, y: bounds.maxY - 25.48))
        logoPath.close()
        logoPath.move(to: NSPoint(x: bounds.minX + 79.92, y: bounds.maxY - 27.65))
        logoPath.curve(to: NSPoint(x: bounds.minX + 86.93, y: bounds.maxY - 20.5), controlPoint1: NSPoint(x: bounds.minX + 79.92, y: bounds.maxY - 23.68), controlPoint2: NSPoint(x: bounds.minX + 83.07, y: bounds.maxY - 20.5))
        logoPath.curve(to: NSPoint(x: bounds.minX + 90.09, y: bounds.maxY - 21.35), controlPoint1: NSPoint(x: bounds.minX + 88.05, y: bounds.maxY - 20.5), controlPoint2: NSPoint(x: bounds.minX + 88.97, y: bounds.maxY - 20.76))
        logoPath.line(to: NSPoint(x: bounds.minX + 90.09, y: bounds.maxY - 24.47))
        logoPath.curve(to: NSPoint(x: bounds.minX + 86.88, y: bounds.maxY - 22.94), controlPoint1: NSPoint(x: bounds.minX + 89.02, y: bounds.maxY - 23.41), controlPoint2: NSPoint(x: bounds.minX + 88.1, y: bounds.maxY - 22.94))
        logoPath.curve(to: NSPoint(x: bounds.minX + 82.56, y: bounds.maxY - 27.65), controlPoint1: NSPoint(x: bounds.minX + 84.44, y: bounds.maxY - 22.94), controlPoint2: NSPoint(x: bounds.minX + 82.56, y: bounds.maxY - 25))
        logoPath.curve(to: NSPoint(x: bounds.minX + 86.98, y: bounds.maxY - 32.37), controlPoint1: NSPoint(x: bounds.minX + 82.56, y: bounds.maxY - 30.41), controlPoint2: NSPoint(x: bounds.minX + 84.39, y: bounds.maxY - 32.37))
        logoPath.curve(to: NSPoint(x: bounds.minX + 90.09, y: bounds.maxY - 30.89), controlPoint1: NSPoint(x: bounds.minX + 88.15, y: bounds.maxY - 32.37), controlPoint2: NSPoint(x: bounds.minX + 89.07, y: bounds.maxY - 31.95))
        logoPath.line(to: NSPoint(x: bounds.minX + 90.09, y: bounds.maxY - 34.01))
        logoPath.curve(to: NSPoint(x: bounds.minX + 86.88, y: bounds.maxY - 34.81), controlPoint1: NSPoint(x: bounds.minX + 88.92, y: bounds.maxY - 34.59), controlPoint2: NSPoint(x: bounds.minX + 88, y: bounds.maxY - 34.81))
        logoPath.curve(to: NSPoint(x: bounds.minX + 79.92, y: bounds.maxY - 27.65), controlPoint1: NSPoint(x: bounds.minX + 82.97, y: bounds.maxY - 34.81), controlPoint2: NSPoint(x: bounds.minX + 79.92, y: bounds.maxY - 31.68))
        logoPath.close()
        logoPath.move(to: NSPoint(x: bounds.minX + 110.47, y: bounds.maxY - 30.04))
        logoPath.line(to: NSPoint(x: bounds.minX + 113.98, y: bounds.maxY - 20.82))
        logoPath.line(to: NSPoint(x: bounds.minX + 116.78, y: bounds.maxY - 20.82))
        logoPath.line(to: NSPoint(x: bounds.minX + 111.08, y: bounds.maxY - 34.86))
        logoPath.line(to: NSPoint(x: bounds.minX + 109.71, y: bounds.maxY - 34.86))
        logoPath.line(to: NSPoint(x: bounds.minX + 104.12, y: bounds.maxY - 20.82))
        logoPath.line(to: NSPoint(x: bounds.minX + 106.91, y: bounds.maxY - 20.82))
        logoPath.line(to: NSPoint(x: bounds.minX + 110.47, y: bounds.maxY - 30.04))
        logoPath.close()
        logoPath.move(to: NSPoint(x: bounds.minX + 117.94, y: bounds.maxY - 34.54))
        logoPath.line(to: NSPoint(x: bounds.minX + 117.94, y: bounds.maxY - 20.82))
        logoPath.line(to: NSPoint(x: bounds.minX + 125.21, y: bounds.maxY - 20.82))
        logoPath.line(to: NSPoint(x: bounds.minX + 125.21, y: bounds.maxY - 23.15))
        logoPath.line(to: NSPoint(x: bounds.minX + 120.49, y: bounds.maxY - 23.15))
        logoPath.line(to: NSPoint(x: bounds.minX + 120.49, y: bounds.maxY - 26.17))
        logoPath.line(to: NSPoint(x: bounds.minX + 125.06, y: bounds.maxY - 26.17))
        logoPath.line(to: NSPoint(x: bounds.minX + 125.06, y: bounds.maxY - 28.5))
        logoPath.line(to: NSPoint(x: bounds.minX + 120.49, y: bounds.maxY - 28.5))
        logoPath.line(to: NSPoint(x: bounds.minX + 120.49, y: bounds.maxY - 32.21))
        logoPath.line(to: NSPoint(x: bounds.minX + 125.21, y: bounds.maxY - 32.21))
        logoPath.line(to: NSPoint(x: bounds.minX + 125.21, y: bounds.maxY - 34.54))
        logoPath.line(to: NSPoint(x: bounds.minX + 117.94, y: bounds.maxY - 34.54))
        logoPath.close()
        logoPath.move(to: NSPoint(x: bounds.minX + 135.38, y: bounds.maxY - 24.85))
        logoPath.curve(to: NSPoint(x: bounds.minX + 132.38, y: bounds.maxY - 28.77), controlPoint1: NSPoint(x: bounds.minX + 135.38, y: bounds.maxY - 26.96), controlPoint2: NSPoint(x: bounds.minX + 134.31, y: bounds.maxY - 28.34))
        logoPath.line(to: NSPoint(x: bounds.minX + 136.5, y: bounds.maxY - 34.54))
        logoPath.line(to: NSPoint(x: bounds.minX + 133.35, y: bounds.maxY - 34.54))
        logoPath.line(to: NSPoint(x: bounds.minX + 129.79, y: bounds.maxY - 29.03))
        logoPath.line(to: NSPoint(x: bounds.minX + 129.43, y: bounds.maxY - 29.03))
        logoPath.line(to: NSPoint(x: bounds.minX + 129.43, y: bounds.maxY - 34.54))
        logoPath.line(to: NSPoint(x: bounds.minX + 126.89, y: bounds.maxY - 34.54))
        logoPath.line(to: NSPoint(x: bounds.minX + 126.89, y: bounds.maxY - 20.82))
        logoPath.line(to: NSPoint(x: bounds.minX + 130.7, y: bounds.maxY - 20.82))
        logoPath.curve(to: NSPoint(x: bounds.minX + 135.38, y: bounds.maxY - 24.85), controlPoint1: NSPoint(x: bounds.minX + 133.7, y: bounds.maxY - 20.82), controlPoint2: NSPoint(x: bounds.minX + 135.38, y: bounds.maxY - 22.3))
        logoPath.close()
        logoPath.move(to: NSPoint(x: bounds.minX + 130.25, y: bounds.maxY - 27.12))
        logoPath.curve(to: NSPoint(x: bounds.minX + 132.79, y: bounds.maxY - 25), controlPoint1: NSPoint(x: bounds.minX + 131.87, y: bounds.maxY - 27.12), controlPoint2: NSPoint(x: bounds.minX + 132.74, y: bounds.maxY - 26.38))
        logoPath.curve(to: NSPoint(x: bounds.minX + 130.3, y: bounds.maxY - 22.99), controlPoint1: NSPoint(x: bounds.minX + 132.79, y: bounds.maxY - 23.68), controlPoint2: NSPoint(x: bounds.minX + 131.87, y: bounds.maxY - 22.99))
        logoPath.line(to: NSPoint(x: bounds.minX + 129.48, y: bounds.maxY - 22.99))
        logoPath.line(to: NSPoint(x: bounds.minX + 129.48, y: bounds.maxY - 27.12))
        logoPath.line(to: NSPoint(x: bounds.minX + 130.25, y: bounds.maxY - 27.12))
        logoPath.close()
        logoPath.windingRule = .evenOddWindingRule
        discoverLogoFill.setFill()
        logoPath.fill()


        //// Oval 2 Drawing
        let oval2Rect = NSRect(x: bounds.minX + 90.81, y: bounds.minY + bounds.height - 34.86, width: 14.06, height: 14.36)
        let oval2Path = NSBezierPath(ovalIn: oval2Rect)
        NSGraphicsContext.saveGraphicsState()
        oval2Path.addClip()
        discoverLogoGradient.draw(from: NSPoint(x: oval2Rect.midX + 7.03 * oval2Rect.width / 14.06, y: oval2Rect.midY + -7.18 * oval2Rect.height / 14.36),
            to: NSPoint(x: oval2Rect.midX + -7.03 * oval2Rect.width / 14.06, y: oval2Rect.midY + 7.18 * oval2Rect.height / 14.36),
            options: [.drawsBeforeStartingLocation, .drawsAfterEndingLocation])
        NSGraphicsContext.restoreGraphicsState()
    }

}
